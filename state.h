#ifndef STATE_H
#define STATE_H 1

extern const char *token_state_tab[];

typedef enum tokenizer_state
{
  TK_INIT=0,
  TK_IDENTIFIER_BEGIN,
  TK_IDENTIFIER_END,
  TK_PUNCTUATION_BEGIN,
  TK_PUNCTUATION_END,
  TK_INT_DEC_BEGIN,
  TK_INT_HEX_OCT_BEGIN,
  TK_INT_HEX_BEGIN,
  TK_INT_OCT_BEGIN,
  TK_INT_END,
  TK_INT_LONG,
  TK_INT_UNSIGNED,

  TK_SLASH_EQUAL_BEGIN, // TODO: delete it
  TK_SINGLE_LINE_COMENT_BEGIN,
  TK_SINGLE_LINE_COMENT_END,

  TK_MULTI_LINE_COMENT_BEGIN,
  TK_BAD_MULTI_LINE_COMENT,
  TK_MULTI_LINE_COMENT_END,

  /* return _TK_OPERATOR_ACCEPT_BEGIN < state && state < _TK_OPERATOR_ACCEPT_END; */

  TK_TILDE,
  TK_EXCLAIM,
  TK_PERCENT,
  TK_CARET,
  TK_AMPERSAND,
  TK_STAR,
  TK_POSITIVE,
  TK_NEGATIVE,
  TK_LESS,
  TK_GREATER,
  TK_EQUAL,
  TK_SLASH,
  TK_VERTICAL_BAR,

  _TK_OPERATOR_ACCEPT_BEGIN,
  TK_TILDE_END,
  TK_EXCLAIM_END,
  TK_PERCENT_END,
  TK_CARET_END,
  TK_AMPERSAND_END,
  TK_STAR_END,
  TK_POSITIVE_END,
  TK_NEGATIVE_END,
  TK_LESS_END,
  TK_GREATER_END,
  TK_EQUAL_END,
  TK_SLASH_END,
  TK_VERTICAL_BAR_END,


  TK_TILDE_EQUAL,
  TK_EXCLAIM_EQUAL,
  TK_PERCENT_EQUAL,
  TK_CARET_EQUAL,
  TK_AMPERSAND_EQUAL,
  TK_STAR_EQUAL,
  TK_POSITIVE_EQUAL,
  TK_NEGATIVE_EQUAL,
  TK_LESS_EQUAL,
  TK_GREATER_EQUAL,
  TK_EQUAL_EQUAL,
  TK_SLASH_EQUAL,
  TK_VERTICAL_BAR_EQUAL,
  _TK_OPERATOR_ACCEPT_END,

/* TODO: not needed , deleted them */
  TK_TILDE_EQUAL_END,
  TK_EXCLAIM_EQUAL_END,
  TK_PERCENT_EQUAL_END,
  TK_CARET_EQUAL_END,
  TK_AMPERSAND_EQUAL_END,
  TK_STAR_EQUAL_END,
  TK_POSITIVE_EQUAL_END,
  TK_NEGATIVE_EQUAL_END,
  TK_LESS_EQUAL_END,
  TK_GREATER_EQUAL_END,
  TK_EQUAL_EQUAL_END,
  TK_SLASH_EQUAL_END,
  TK_VERTICAL_BAR_EQUAL_END,


  TK_NULL
} tokenizer_state;

enum token_type;


#endif

