#ifndef STATE_H
#define STATE_H 1

extern const char *token_state_tab[];

// TODO: make the table smaller
// by dynamically alloc rows of len(all states)
// but only non-accepted states have a column
// namely: accepted state has no column
// when accepted is much more than non-accepted
// which is always the case, 
// use second scheme to save space 
typedef enum tokenizer_state
{
  TK_INIT=0,
  TK_IDENTIFIER_BEGIN,
  TK_IDENTIFIER_END,
  TK_PUNCTUATION_BEGIN,
  TK_PUNCTUATION_END,
  TK_INT_DEC_BEGIN,
  TK_INT_HEX_OCT_BEGIN,
  TK_INT_HEX_BEGIN,
  TK_INT_OCT_BEGIN,
  TK_INT_END,
  TK_INT_LONG,
  TK_INT_UNSIGNED,

  TK_SINGLE_LINE_COMENT_BEGIN,
  TK_SINGLE_LINE_COMENT_END,

  TK_MULTI_LINE_COMENT_BEGIN,
  TK_BAD_MULTI_LINE_COMENT,
  TK_MULTI_LINE_COMENT_END,

  /* OPERATOR STATES */
  /* NON ACCEPTED OPERATOR STATES */ 

  TK_EXCLAIM,
  TK_EQUAL,
  TK_STAR,
  TK_PERCENT,
  TK_CARET,
  TK_SLASH,

  /* 4 states */
  TK_AMPERSAND,
  TK_VERTICAL_BAR,
  TK_POSITIVE,
  TK_NEGATIVE,

  /* 6 states */
  TK_LESS,
  TK_GREATER,
  /*!NON ACCEPTED OPERATOR STATES */ 

  /* ACCEPTED OPERATOR STATES */
  _TK_OPERATOR_ACCEPT_BEGIN,

  /* PUT BACH OPERATOR STATES */
   /* 3 states */
  TK_EXCLAIM_END,
  TK_EQUAL_END,
  TK_STAR_END,
  TK_PERCENT_END,
  TK_CARET_END,
  TK_SLASH_END,

  /* 4 states */
  TK_AMPERSAND_END,
  TK_VERTICAL_BAR_END,
  TK_POSITIVE_END,
  TK_NEGATIVE_END,

  /* 6 states */
  TK_GREATER_END,
  TK_GREATER_GREATER_END,
  TK_LESS_END,
  TK_LESS_LESS_END,
  _TK_OPERATOR_PUT_BACK,
  /*!PUT BACH OPERATOR STATES */


  TK_TILDE,
  TK_AMPERSAND_AMPERSAND,
  TK_LESS_LESS,
  TK_LESS_LESS_EQUAL,
  TK_GREATER_GREATER,
  TK_GREATER_GREATER_EQUAL,
  TK_VERTICAL_BAR_BAR,
  TK_POSITIVE_POSITIVE,
  TK_NEGATIVE_NEGATIVE,

  TK_EXCLAIM_EQUAL,
  TK_PERCENT_EQUAL,
  TK_CARET_EQUAL,
  TK_AMPERSAND_EQUAL,
  TK_STAR_EQUAL,
  TK_POSITIVE_EQUAL,
  TK_NEGATIVE_EQUAL,
  TK_LESS_EQUAL,
  TK_GREATER_EQUAL,
  TK_EQUAL_EQUAL,
  TK_SLASH_EQUAL,
  TK_VERTICAL_BAR_EQUAL,
  _TK_OPERATOR_ACCEPT_END,
  /*!ACCEPTED OPERATOR STATES */
  /*!OPERATOR STATES */

  TK_CHAR_LITERAL_BEGIN,
  TK_CHAR_LITERAL_PART,
  TK_CHAR_LITERAL_END,
  TK_BAD_CHAR_LITERAL,
  TK_CHAR_LITERAL_ESCAPED,
  TK_CHAR_LITERAL_OCT_BEGIN,
  TK_CHAR_LITERAL_OCT_END,
  TK_CHAR_LITERAL_HEX_BEGIN,
  TK_CHAR_LITERAL_HEX_END,
  TK_CHAR_LITERAL_ZERO,

  TK_NULL
} tokenizer_state;

enum token_type;
typedef tokenizer_state node;


#endif

