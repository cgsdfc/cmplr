>>>>>>>>> grammar rules for C programming language <<<<<<<<<<<

program := translation-unit eof 

translation-unit := external-declaration 

	| translation-unit external-declaration 

external-declaration := function-definition 

	| declaration 

function-definition := declaration-specifier declarator declaration-list composite-statement 

	| declaration-specifier declarator composite-statement 

	| declarator declaration-list composite-statement 

	| declarator composite-statement 

declaration := declaration-specifier init-declarator-list 

	| declaration-specifier 

declaration-specifier := storage-class-specifier declaration-specifier 

	| storage-class-specifier 

	| type-specifier declaration-specifier 

	| type-specifier 

	| type-qualifier declaration-specifier 

	| type-qualifier 

declarator := pointer direct-declarator 

	| direct-declarator 

declaration-list := declaration 

	| declaration-list declaration 

composite-statement := { declaration-list statement-list } 

	| { declaration-list } 

	| { statement-list } 

	| { } 

init-declarator-list := init-declarator 

	| init-declarator-list init-declarator 

storage-class-specifier := auto 

	| register 

	| static 

	| extern 

	| typedef 

type-specifier := void 

	| char 

	| short 

	| int 

	| long 

	| float 

	| double 

	| signed 

	| unsigned 

	| struct-or-union-specifier 

	| enum-specifier 

	| identifier 

type-qualifier := const 

	| volatile 

struct-or-union-specifier := struct-or-union identifier { struct-declaration-list } 

	| struct-or-union { struct-declaration-list } 

	| struct-or-union identifier 

enum-specifier := identifier { enumerator-list } 

	| { enumerator-list } 

	| enum identifier 

struct-or-union := struct 

	| union 

struct-declaration-list := struct-declaration 

	| struct-declaration-list struct-declaration 

struct-declaration := specifier-qualifier-list struct-declarator-list 

initializer := assignment expression 

	| { initializer-list } 

	| { initializer-list , } 

init-declarator := declarator 

	| declarator = initializer 

specifier-qualifier-list := type-qualifier specifier-qualifier-list 

	| type-qualifier 

	| type-specifier specifier-qualifier-list 

	| type-specifier 

struct-declarator-list := struct-declarator 

	| struct-declarator-list struct-declarator 

struct-declarator := declarator 

	| declarator : constant-expression 

	| : constant-expression 

constant-expression := condition-expression 

enumerator-list := enumerator 

	| enumerator-list enumerator 

enumerator := identifier 

	| identifier = constant-expression 

pointer := * type-qualifier-list pointer 

	| * type-qualifier-list 

	| * pointer 

	| * 

direct-declarator := identifier 

	| ( declarator ) 

	| direct-declarator [ constant-expression ] 

	| direct-declarator [ ] 

	| direct-declarator ( parameter-type-list ) 

	| direct-declarator ( identifier-list ) 

	| direct-declarator ( ) 

parameter-type-list := parameter-list 

	| parameter-list , . . . 

identifier-list := identifier 

	| identifier 

	| identifier-list , identifier 

type-qualifier-list := type-qualifier 

	| type-qualifier-list type-qualifier 

parameter-list := parameter-declarator 

	| parameter-declarator 

	| parameter-list , parameter-declarator 

parameter-declarator := declaration-specifier declarator 

	| declaration-specifier abstract-declarator 

	| declaration-specifier 

abstract-declarator := pointer 

	| pointer direct-abstract-declarator 

	| direct-abstract-declarator 

direct-abstract-declarator := ( abstract-declarator ) 

	| direct-abstract-declarator [ constant-expression ] 

	| direct-abstract-declarator [ ] 

	| [ constant-expression ] 

	| [ ] 

	| direct-abstract-declarator ( parameter-type-list ) 

	| direct-abstract-declarator ( ) 

	| ( parameter-type-list ) 

	| ( ) 

initializer-list := initializer 

	| initializer-list , initializer 

type-name := specifier-qualifier-list abstract-declarator 

	| specifier-qualifier-list 

statement := labeled-statement 

	| expression-statement 

	| composite-statement 

	| seletion-statement 

	| iteration-statement 

	| jump-statement 

labeled-statement := identifier : statement 

	| case constant-expression : statement 

	| default : statement 

expression-statement := expression ; 

	| ; 

expression := assignment expression 

	| assignment expression 

	| expression , assignment expression 

seletion-statement := if ( expression ) statement 

	| if ( expression ) statement else statement 

	| switch ( expression ) statement 

iteration-statement := while ( expression ) statement 

	| do statement while ( expression ) ; 

	| for ( expression ; expression ; expression ) statement 

	| for ( expression ; expression ; ) statement 

	| for ( expression ; ; expression ) statement 

	| for ( expression ; ; ) statement 

	| for ( ; expression ; expression ) statement 

	| for ( ; expression ; ) statement 

	| for ( ; ; expression ) statement 

	| for ( ; ; ) statement 

jump-statement := goto identifier ; 

	| return expression ; 

	| return ; 

	| continue ; 

	| break ; 

statement-list := statement 

	| statement-list statement 

assignment-operator := = 

	| *= 

	| /= 

	| %= 

	| += 

	| -= 

	| <<= 

	| >>= 

	| &= 

	| ^= 

	| |= 

assignment expression := condition-expression 

	| unary-expression assignment-operator assignment expression 

condition-expression := logical-OR-expression 

	| logical-OR-expression ? expression : condition-expression 

logical-OR-expression := logical-AND-expression 

	| logical-OR-expression || logical-AND-expression 

logical-AND-expression := inclusive-OR-expression 

	| logical-AND-expression && inclusive-OR-expression 

inclusive-OR-expression := exclusive-OR-expression 

	| inclusive-OR-expression | exclusive-OR-expression 

exclusive-OR-expression := AND-expression 

	| exclusive-OR-expression ^ AND-expression 

unary-expression := postfix-expression 

	| ++ unary-expression 

	| -- unary-expression 

	| unary-operator cast-expression 

	| sizeof unary-expression 

	| sizeof ( type-name ) 

AND-expression := equality-expression 

	| AND-expression & equality-expression 

equality-expression := relational-expression 

	| equality-expression == relational-expression 

	| relational-expression 

	| equality-expression != relational-expression 

relational-expression := shift-expression 

	| relational-expression relational-operator shift-expression 

shift-expression := additive-expression 

	| shift-expression << additive-expression 

	| additive-expression 

	| shift-expression << additive-expression 

additive-expression := multiplicative-expression 

	| additive-expression + multiplicative-expression 

	| multiplicative-expression 

	| additive-expression - multiplicative-expression 

multiplicative-expression := cast-expression 

	| multiplicative-expression multiplicative-operator cast-expression 

cast-expression := unary-expression 

	| ( type-name ) cast-expression 

unary-operator := & 

	| * 

	| + 

	| - 

	| ~ 

	| ! 

postfix-expression := primary-expression 

	| postfix-expression [ expression ] 

	| postfix-expression ( argument-expression-list ) 

	| postfix-expression ( ) 

	| postfix-expression . identifier 

	| postfix-expression -> identifier 

	| postfix-expression ++ 

	| postfix-expression -- 

primary-expression := identifier 

	| char-const 

	| float-const 

	| string-const 

	| int-const 

	| ( expression ) 

argument-expression-list := assignment expression 

	| argument-expression-list , assignment expression 

relational-operator := < 

	| > 

	| <= 

	| >= 

multiplicative-operator := * 

	| % 

	| / 

summary: nonterm=66, terminal=86, keyword=123, operator=168, punctuation=193
unresolved=0
