I[0]
program :=  ^ translation-unit eof
translation-unit :=  ^ external-declaration
translation-unit :=  ^ translation-unit external-declaration
external-declaration :=  ^ function-definition
external-declaration :=  ^ declaration
function-definition :=  ^ declaration-specifier declarator declaration-list composite-statement
function-definition :=  ^ declaration-specifier declarator composite-statement
function-definition :=  ^ declarator declaration-list composite-statement
function-definition :=  ^ declarator composite-statement
declaration :=  ^ declaration-specifier init-declarator-list
declaration :=  ^ declaration-specifier
declaration-specifier :=  ^ storage-class-specifier declaration-specifier
declaration-specifier :=  ^ storage-class-specifier
declaration-specifier :=  ^ type-specifier declaration-specifier
declaration-specifier :=  ^ type-specifier
declaration-specifier :=  ^ type-qualifier declaration-specifier
declaration-specifier :=  ^ type-qualifier
declarator :=  ^ pointer direct-declarator
declarator :=  ^ direct-declarator
storage-class-specifier :=  ^ auto
storage-class-specifier :=  ^ register
storage-class-specifier :=  ^ static
storage-class-specifier :=  ^ extern
storage-class-specifier :=  ^ typedef
type-specifier :=  ^ void
type-specifier :=  ^ char
type-specifier :=  ^ short
type-specifier :=  ^ int
type-specifier :=  ^ long
type-specifier :=  ^ float
type-specifier :=  ^ double
type-specifier :=  ^ signed
type-specifier :=  ^ unsigned
type-specifier :=  ^ struct-or-union-specifier
type-specifier :=  ^ enum-specifier
type-specifier :=  ^ identifier
type-qualifier :=  ^ const
type-qualifier :=  ^ volatile
pointer :=  ^ * type-qualifier-list pointer
pointer :=  ^ * type-qualifier-list
pointer :=  ^ * pointer
pointer :=  ^ *
direct-declarator :=  ^ identifier
direct-declarator :=  ^ ( declarator )
direct-declarator :=  ^ direct-declarator [ constant-expression ]
direct-declarator :=  ^ direct-declarator [ ]
direct-declarator :=  ^ direct-declarator ( parameter-type-list )
direct-declarator :=  ^ direct-declarator ( identifier-list )
direct-declarator :=  ^ direct-declarator ( )
struct-or-union-specifier :=  ^ struct-or-union identifier { struct-declaration-list }
struct-or-union-specifier :=  ^ struct-or-union { struct-declaration-list }
struct-or-union-specifier :=  ^ struct-or-union identifier
enum-specifier :=  ^ enum identifier { enumerator-list }
enum-specifier :=  ^ enum { enumerator-list }
enum-specifier :=  ^ enum identifier
struct-or-union :=  ^ struct
struct-or-union :=  ^ union

I[1]
external-declaration :=  ^ function-definition
external-declaration :=  ^ declaration
function-definition :=  ^ declaration-specifier declarator declaration-list composite-statement
function-definition :=  ^ declaration-specifier declarator composite-statement
function-definition :=  ^ declarator declaration-list composite-statement
function-definition :=  ^ declarator composite-statement
declaration :=  ^ declaration-specifier init-declarator-list
declaration :=  ^ declaration-specifier
declaration-specifier :=  ^ storage-class-specifier declaration-specifier
declaration-specifier :=  ^ storage-class-specifier
declaration-specifier :=  ^ type-specifier declaration-specifier
declaration-specifier :=  ^ type-specifier
declaration-specifier :=  ^ type-qualifier declaration-specifier
declaration-specifier :=  ^ type-qualifier
declarator :=  ^ pointer direct-declarator
declarator :=  ^ direct-declarator
storage-class-specifier :=  ^ auto
storage-class-specifier :=  ^ register
storage-class-specifier :=  ^ static
storage-class-specifier :=  ^ extern
storage-class-specifier :=  ^ typedef
type-specifier :=  ^ void
type-specifier :=  ^ char
type-specifier :=  ^ short
type-specifier :=  ^ int
type-specifier :=  ^ long
type-specifier :=  ^ float
type-specifier :=  ^ double
type-specifier :=  ^ signed
type-specifier :=  ^ unsigned
type-specifier :=  ^ struct-or-union-specifier
type-specifier :=  ^ enum-specifier
type-specifier :=  ^ identifier
type-qualifier :=  ^ const
type-qualifier :=  ^ volatile
pointer :=  ^ * type-qualifier-list pointer
pointer :=  ^ * type-qualifier-list
pointer :=  ^ * pointer
pointer :=  ^ *
direct-declarator :=  ^ identifier
direct-declarator :=  ^ ( declarator )
direct-declarator :=  ^ direct-declarator [ constant-expression ]
direct-declarator :=  ^ direct-declarator [ ]
direct-declarator :=  ^ direct-declarator ( parameter-type-list )
direct-declarator :=  ^ direct-declarator ( identifier-list )
direct-declarator :=  ^ direct-declarator ( )
struct-or-union-specifier :=  ^ struct-or-union identifier { struct-declaration-list }
struct-or-union-specifier :=  ^ struct-or-union { struct-declaration-list }
struct-or-union-specifier :=  ^ struct-or-union identifier
enum-specifier :=  ^ enum identifier { enumerator-list }
enum-specifier :=  ^ enum { enumerator-list }
enum-specifier :=  ^ enum identifier
struct-or-union :=  ^ struct
struct-or-union :=  ^ union
program :=  translation-unit ^ eof
translation-unit :=  translation-unit ^ external-declaration
// 0 [translation-unit] 1

I[2]
translation-unit :=  external-declaration ^
// 0 [external-declaration] 2

I[3]
external-declaration :=  function-definition ^


I[4]
external-declaration :=  declaration ^

I[5]
declarator :=  ^ pointer direct-declarator
declarator :=  ^ direct-declarator
pointer :=  ^ * type-qualifier-list pointer
pointer :=  ^ * type-qualifier-list
pointer :=  ^ * pointer
pointer :=  ^ *
direct-declarator :=  ^ identifier
direct-declarator :=  ^ ( declarator )
direct-declarator :=  ^ direct-declarator [ constant-expression ]
direct-declarator :=  ^ direct-declarator [ ]
direct-declarator :=  ^ direct-declarator ( parameter-type-list )
direct-declarator :=  ^ direct-declarator ( identifier-list )
direct-declarator :=  ^ direct-declarator ( )
function-definition :=  declaration-specifier ^ declarator declaration-list composite-statement
function-definition :=  declaration-specifier ^ declarator composite-statement
declaration :=  declaration-specifier ^ init-declarator-list
declaration :=  declaration-specifier ^
init-declarator-list :=  ^ init-declarator
init-declarator-list :=  ^ init-declarator-list init-declarator
init-declarator :=  ^ declarator
init-declarator :=  ^ declarator = initializer

I[6]
declaration :=  ^ declaration-specifier init-declarator-list
declaration :=  ^ declaration-specifier
declaration-specifier :=  ^ storage-class-specifier declaration-specifier
declaration-specifier :=  ^ storage-class-specifier
declaration-specifier :=  ^ type-specifier declaration-specifier
declaration-specifier :=  ^ type-specifier
declaration-specifier :=  ^ type-qualifier declaration-specifier
declaration-specifier :=  ^ type-qualifier
storage-class-specifier :=  ^ auto
storage-class-specifier :=  ^ register
storage-class-specifier :=  ^ static
storage-class-specifier :=  ^ extern
storage-class-specifier :=  ^ typedef
type-specifier :=  ^ void
type-specifier :=  ^ char
type-specifier :=  ^ short
type-specifier :=  ^ int
type-specifier :=  ^ long
type-specifier :=  ^ float
type-specifier :=  ^ double
type-specifier :=  ^ signed
type-specifier :=  ^ unsigned
type-specifier :=  ^ struct-or-union-specifier
type-specifier :=  ^ enum-specifier
type-specifier :=  ^ identifier
type-qualifier :=  ^ const
type-qualifier :=  ^ volatile
struct-or-union-specifier :=  ^ struct-or-union identifier { struct-declaration-list }
struct-or-union-specifier :=  ^ struct-or-union { struct-declaration-list }
struct-or-union-specifier :=  ^ struct-or-union identifier
enum-specifier :=  ^ enum identifier { enumerator-list }
enum-specifier :=  ^ enum { enumerator-list }
enum-specifier :=  ^ enum identifier
struct-or-union :=  ^ struct
struct-or-union :=  ^ union
function-definition :=  declarator ^ declaration-list composite-statement
function-definition :=  declarator ^ composite-statement
declaration-list :=  ^ declaration
declaration-list :=  ^ declaration-list declaration
composite-statement :=  ^ { declaration-list statement-list }
composite-statement :=  ^ { declaration-list }
composite-statement :=  ^ { statement-list }
composite-statement :=  ^ { }

I[7]
declaration-specifier :=  ^ storage-class-specifier declaration-specifier
declaration-specifier :=  ^ storage-class-specifier
declaration-specifier :=  ^ type-specifier declaration-specifier
declaration-specifier :=  ^ type-specifier
declaration-specifier :=  ^ type-qualifier declaration-specifier
declaration-specifier :=  ^ type-qualifier
storage-class-specifier :=  ^ auto
storage-class-specifier :=  ^ register
storage-class-specifier :=  ^ static
storage-class-specifier :=  ^ extern
storage-class-specifier :=  ^ typedef
type-specifier :=  ^ void
type-specifier :=  ^ char
type-specifier :=  ^ short
type-specifier :=  ^ int
type-specifier :=  ^ long
type-specifier :=  ^ float
type-specifier :=  ^ double
type-specifier :=  ^ signed
type-specifier :=  ^ unsigned
type-specifier :=  ^ struct-or-union-specifier
type-specifier :=  ^ enum-specifier
type-specifier :=  ^ identifier
type-qualifier :=  ^ const
type-qualifier :=  ^ volatile
struct-or-union-specifier :=  ^ struct-or-union identifier { struct-declaration-list }
struct-or-union-specifier :=  ^ struct-or-union { struct-declaration-list }
struct-or-union-specifier :=  ^ struct-or-union identifier
enum-specifier :=  ^ enum identifier { enumerator-list }
enum-specifier :=  ^ enum { enumerator-list }
enum-specifier :=  ^ enum identifier
struct-or-union :=  ^ struct
struct-or-union :=  ^ union
declaration-specifier :=  storage-class-specifier ^ declaration-specifier
declaration-specifier :=  storage-class-specifier ^
// example of shift-reduce conflict

I[8]
declaration-specifier :=  ^ storage-class-specifier declaration-specifier
declaration-specifier :=  ^ storage-class-specifier
declaration-specifier :=  ^ type-specifier declaration-specifier
declaration-specifier :=  ^ type-specifier
declaration-specifier :=  ^ type-qualifier declaration-specifier
declaration-specifier :=  ^ type-qualifier
storage-class-specifier :=  ^ auto
storage-class-specifier :=  ^ register
storage-class-specifier :=  ^ static
storage-class-specifier :=  ^ extern
storage-class-specifier :=  ^ typedef
type-specifier :=  ^ void
type-specifier :=  ^ char
type-specifier :=  ^ short
type-specifier :=  ^ int
type-specifier :=  ^ long
type-specifier :=  ^ float
type-specifier :=  ^ double
type-specifier :=  ^ signed
type-specifier :=  ^ unsigned
type-specifier :=  ^ struct-or-union-specifier
type-specifier :=  ^ enum-specifier
type-specifier :=  ^ identifier
type-qualifier :=  ^ const
type-qualifier :=  ^ volatile
struct-or-union-specifier :=  ^ struct-or-union identifier { struct-declaration-list }
struct-or-union-specifier :=  ^ struct-or-union { struct-declaration-list }
struct-or-union-specifier :=  ^ struct-or-union identifier
enum-specifier :=  ^ enum identifier { enumerator-list }
enum-specifier :=  ^ enum { enumerator-list }
enum-specifier :=  ^ enum identifier
struct-or-union :=  ^ struct
struct-or-union :=  ^ union
declaration-specifier :=  type-specifier ^ declaration-specifier
declaration-specifier :=  type-specifier ^

I[9]
declaration-specifier :=  ^ storage-class-specifier declaration-specifier
declaration-specifier :=  ^ storage-class-specifier
declaration-specifier :=  ^ type-specifier declaration-specifier
declaration-specifier :=  ^ type-specifier
declaration-specifier :=  ^ type-qualifier declaration-specifier
declaration-specifier :=  ^ type-qualifier
storage-class-specifier :=  ^ auto
storage-class-specifier :=  ^ register
storage-class-specifier :=  ^ static
storage-class-specifier :=  ^ extern
storage-class-specifier :=  ^ typedef
type-specifier :=  ^ void
type-specifier :=  ^ char
type-specifier :=  ^ short
type-specifier :=  ^ int
type-specifier :=  ^ long
type-specifier :=  ^ float
type-specifier :=  ^ double
type-specifier :=  ^ signed
type-specifier :=  ^ unsigned
type-specifier :=  ^ struct-or-union-specifier
type-specifier :=  ^ enum-specifier
type-specifier :=  ^ identifier
type-qualifier :=  ^ const
type-qualifier :=  ^ volatile
struct-or-union-specifier :=  ^ struct-or-union identifier { struct-declaration-list }
struct-or-union-specifier :=  ^ struct-or-union { struct-declaration-list }
struct-or-union-specifier :=  ^ struct-or-union identifier
enum-specifier :=  ^ enum identifier { enumerator-list }
enum-specifier :=  ^ enum { enumerator-list }
enum-specifier :=  ^ enum identifier
struct-or-union :=  ^ struct
struct-or-union :=  ^ union
declaration-specifier :=  type-qualifier ^ declaration-specifier
declaration-specifier :=  type-qualifier ^

I[10]
type-specifier :=  struct-or-union-specifier ^

I[11]
type-specifier :=  enum-specifier ^

I[12]
struct-or-union-specifier :=  struct-or-union ^ identifier { struct-declaration-list }
struct-or-union-specifier :=  struct-or-union ^ { struct-declaration-list }
struct-or-union-specifier :=  struct-or-union ^ identifier

I[13]
direct-declarator :=  ^ identifier
direct-declarator :=  ^ ( declarator )
direct-declarator :=  ^ direct-declarator [ constant-expression ]
direct-declarator :=  ^ direct-declarator [ ]
direct-declarator :=  ^ direct-declarator ( parameter-type-list )
direct-declarator :=  ^ direct-declarator ( identifier-list )
direct-declarator :=  ^ direct-declarator ( )
declarator :=  pointer ^ direct-declarator

I[14]
declarator :=  direct-declarator ^
direct-declarator :=  direct-declarator ^ [ constant-expression ]
direct-declarator :=  direct-declarator ^ [ ]
direct-declarator :=  direct-declarator ^ ( parameter-type-list )
direct-declarator :=  direct-declarator ^ ( identifier-list )
direct-declarator :=  direct-declarator ^ ( )

I[15]
type-specifier :=  identifier ^
direct-declarator :=  identifier ^

I[16]
enum-specifier :=  enum ^ identifier { enumerator-list }
enum-specifier :=  enum ^ { enumerator-list }
enum-specifier :=  enum ^ identifier

I[17]
storage-class-specifier :=  typedef ^

I[18]
storage-class-specifier :=  extern ^

I[19]
storage-class-specifier :=  static ^

I[20]
storage-class-specifier :=  register ^

I[21]
storage-class-specifier :=  auto ^

I[22]
type-specifier :=  unsigned ^

I[23]
type-specifier :=  signed ^

I[24]
type-specifier :=  double ^

I[25]
type-specifier :=  float ^

I[26]
type-specifier :=  long ^

I[27]
type-specifier :=  int ^

I[28]
type-specifier :=  short ^

I[29]
type-specifier :=  char ^

I[30]
type-specifier :=  void ^

I[31]
type-qualifier :=  volatile ^

I[32]
type-qualifier :=  const ^

I[33]
struct-or-union :=  union ^

I[34]
struct-or-union :=  struct ^

I[35]
declarator :=  ^ pointer direct-declarator
declarator :=  ^ direct-declarator
pointer :=  ^ * type-qualifier-list pointer
pointer :=  ^ * type-qualifier-list
pointer :=  ^ * pointer
pointer :=  ^ *
direct-declarator :=  ^ identifier
direct-declarator :=  ^ ( declarator )
direct-declarator :=  ^ direct-declarator [ constant-expression ]
direct-declarator :=  ^ direct-declarator [ ]
direct-declarator :=  ^ direct-declarator ( parameter-type-list )
direct-declarator :=  ^ direct-declarator ( identifier-list )
direct-declarator :=  ^ direct-declarator ( )
direct-declarator :=  ( ^ declarator )

I[36]
type-qualifier :=  ^ const
type-qualifier :=  ^ volatile
pointer :=  ^ * type-qualifier-list pointer
pointer :=  ^ * type-qualifier-list
pointer :=  ^ * pointer
pointer :=  ^ *
pointer :=  * ^ type-qualifier-list pointer
pointer :=  * ^ type-qualifier-list
pointer :=  * ^ pointer
pointer :=  * ^
type-qualifier-list :=  ^ type-qualifier
type-qualifier-list :=  ^ type-qualifier-list type-qualifier

I[37]
translation-unit :=  translation-unit external-declaration ^

I[38]
program :=  translation-unit eof ^

I[39]
declaration :=  ^ declaration-specifier init-declarator-list
declaration :=  ^ declaration-specifier
declaration-specifier :=  ^ storage-class-specifier declaration-specifier
declaration-specifier :=  ^ storage-class-specifier
declaration-specifier :=  ^ type-specifier declaration-specifier
declaration-specifier :=  ^ type-specifier
declaration-specifier :=  ^ type-qualifier declaration-specifier
declaration-specifier :=  ^ type-qualifier
storage-class-specifier :=  ^ auto
storage-class-specifier :=  ^ register
storage-class-specifier :=  ^ static
storage-class-specifier :=  ^ extern
storage-class-specifier :=  ^ typedef
type-specifier :=  ^ void
type-specifier :=  ^ char
type-specifier :=  ^ short
type-specifier :=  ^ int
type-specifier :=  ^ long
type-specifier :=  ^ float
type-specifier :=  ^ double
type-specifier :=  ^ signed
type-specifier :=  ^ unsigned
type-specifier :=  ^ struct-or-union-specifier
type-specifier :=  ^ enum-specifier
type-specifier :=  ^ identifier
type-qualifier :=  ^ const
type-qualifier :=  ^ volatile
struct-or-union-specifier :=  ^ struct-or-union identifier { struct-declaration-list }
struct-or-union-specifier :=  ^ struct-or-union { struct-declaration-list }
struct-or-union-specifier :=  ^ struct-or-union identifier
enum-specifier :=  ^ enum identifier { enumerator-list }
enum-specifier :=  ^ enum { enumerator-list }
enum-specifier :=  ^ enum identifier
struct-or-union :=  ^ struct
struct-or-union :=  ^ union
declaration-list :=  ^ declaration
declaration-list :=  ^ declaration-list declaration
composite-statement :=  ^ { declaration-list statement-list }
composite-statement :=  ^ { declaration-list }
composite-statement :=  ^ { statement-list }
composite-statement :=  ^ { }
function-definition :=  declaration-specifier declarator ^ declaration-list composite-statement
function-definition :=  declaration-specifier declarator ^ composite-statement
init-declarator :=  declarator ^
init-declarator :=  declarator ^ = initializer

I[40]
declarator :=  ^ pointer direct-declarator
declarator :=  ^ direct-declarator
pointer :=  ^ * type-qualifier-list pointer
pointer :=  ^ * type-qualifier-list
pointer :=  ^ * pointer
pointer :=  ^ *
direct-declarator :=  ^ identifier
direct-declarator :=  ^ ( declarator )
direct-declarator :=  ^ direct-declarator [ constant-expression ]
direct-declarator :=  ^ direct-declarator [ ]
direct-declarator :=  ^ direct-declarator ( parameter-type-list )
direct-declarator :=  ^ direct-declarator ( identifier-list )
direct-declarator :=  ^ direct-declarator ( )
init-declarator :=  ^ declarator
init-declarator :=  ^ declarator = initializer
declaration :=  declaration-specifier init-declarator-list ^
init-declarator-list :=  init-declarator-list ^ init-declarator

I[41]
init-declarator-list :=  init-declarator ^

I[42]
direct-declarator :=  identifier ^

I[43]
declaration-list :=  declaration ^

I[44]
declarator :=  ^ pointer direct-declarator
declarator :=  ^ direct-declarator
pointer :=  ^ * type-qualifier-list pointer
pointer :=  ^ * type-qualifier-list
pointer :=  ^ * pointer
pointer :=  ^ *
direct-declarator :=  ^ identifier
direct-declarator :=  ^ ( declarator )
direct-declarator :=  ^ direct-declarator [ constant-expression ]
direct-declarator :=  ^ direct-declarator [ ]
direct-declarator :=  ^ direct-declarator ( parameter-type-list )
direct-declarator :=  ^ direct-declarator ( identifier-list )
direct-declarator :=  ^ direct-declarator ( )
declaration :=  declaration-specifier ^ init-declarator-list
declaration :=  declaration-specifier ^
init-declarator-list :=  ^ init-declarator
init-declarator-list :=  ^ init-declarator-list init-declarator
init-declarator :=  ^ declarator
init-declarator :=  ^ declarator = initializer

I[45]
declaration :=  ^ declaration-specifier init-declarator-list
declaration :=  ^ declaration-specifier
declaration-specifier :=  ^ storage-class-specifier declaration-specifier
declaration-specifier :=  ^ storage-class-specifier
declaration-specifier :=  ^ type-specifier declaration-specifier
declaration-specifier :=  ^ type-specifier
declaration-specifier :=  ^ type-qualifier declaration-specifier
declaration-specifier :=  ^ type-qualifier
storage-class-specifier :=  ^ auto
storage-class-specifier :=  ^ register
storage-class-specifier :=  ^ static
storage-class-specifier :=  ^ extern
storage-class-specifier :=  ^ typedef
type-specifier :=  ^ void
type-specifier :=  ^ char
type-specifier :=  ^ short
type-specifier :=  ^ int
type-specifier :=  ^ long
type-specifier :=  ^ float
type-specifier :=  ^ double
type-specifier :=  ^ signed
type-specifier :=  ^ unsigned
type-specifier :=  ^ struct-or-union-specifier
type-specifier :=  ^ enum-specifier
type-specifier :=  ^ identifier
type-qualifier :=  ^ const
type-qualifier :=  ^ volatile
struct-or-union-specifier :=  ^ struct-or-union identifier { struct-declaration-list }
struct-or-union-specifier :=  ^ struct-or-union { struct-declaration-list }
struct-or-union-specifier :=  ^ struct-or-union identifier
enum-specifier :=  ^ enum identifier { enumerator-list }
enum-specifier :=  ^ enum { enumerator-list }
enum-specifier :=  ^ enum identifier
struct-or-union :=  ^ struct
struct-or-union :=  ^ union
composite-statement :=  ^ { declaration-list statement-list }
composite-statement :=  ^ { declaration-list }
composite-statement :=  ^ { statement-list }
composite-statement :=  ^ { }
function-definition :=  declarator declaration-list ^ composite-statement
declaration-list :=  declaration-list ^ declaration

I[46]
function-definition :=  declarator composite-statement ^

I[47]
type-specifier :=  identifier ^

I[48]
declaration :=  ^ declaration-specifier init-declarator-list
declaration :=  ^ declaration-specifier
declaration-specifier :=  ^ storage-class-specifier declaration-specifier
declaration-specifier :=  ^ storage-class-specifier
declaration-specifier :=  ^ type-specifier declaration-specifier
declaration-specifier :=  ^ type-specifier
declaration-specifier :=  ^ type-qualifier declaration-specifier
declaration-specifier :=  ^ type-qualifier
storage-class-specifier :=  ^ auto
storage-class-specifier :=  ^ register
storage-class-specifier :=  ^ static
storage-class-specifier :=  ^ extern
storage-class-specifier :=  ^ typedef
type-specifier :=  ^ void
type-specifier :=  ^ char
type-specifier :=  ^ short
type-specifier :=  ^ int
type-specifier :=  ^ long
type-specifier :=  ^ float
type-specifier :=  ^ double
type-specifier :=  ^ signed
type-specifier :=  ^ unsigned
type-specifier :=  ^ struct-or-union-specifier
type-specifier :=  ^ enum-specifier
type-specifier :=  ^ identifier
type-qualifier :=  ^ const
type-qualifier :=  ^ volatile
struct-or-union-specifier :=  ^ struct-or-union identifier { struct-declaration-list }
struct-or-union-specifier :=  ^ struct-or-union { struct-declaration-list }
struct-or-union-specifier :=  ^ struct-or-union identifier
enum-specifier :=  ^ enum identifier { enumerator-list }
enum-specifier :=  ^ enum { enumerator-list }
enum-specifier :=  ^ enum identifier
struct-or-union :=  ^ struct
struct-or-union :=  ^ union
declaration-list :=  ^ declaration
declaration-list :=  ^ declaration-list declaration
composite-statement :=  ^ { declaration-list statement-list }
composite-statement :=  ^ { declaration-list }
composite-statement :=  ^ { statement-list }
composite-statement :=  ^ { }
composite-statement :=  { ^ declaration-list statement-list }
composite-statement :=  { ^ declaration-list }
composite-statement :=  { ^ statement-list }
composite-statement :=  { ^ }
statement-list :=  ^ statement
statement-list :=  ^ statement-list statement
statement :=  ^ labeled-statement
statement :=  ^ expression-statement
statement :=  ^ composite-statement
statement :=  ^ seletion-statement
statement :=  ^ iteration-statement
statement :=  ^ jump-statement
labeled-statement :=  ^ identifier : statement
labeled-statement :=  ^ case constant-expression : statement
labeled-statement :=  ^ default : statement
expression-statement :=  ^ expression ;
expression-statement :=  ^ ;
seletion-statement :=  ^ if ( expression ) statement
seletion-statement :=  ^ if ( expression ) statement else statement
seletion-statement :=  ^ switch ( expression ) statement
iteration-statement :=  ^ while ( expression ) statement
iteration-statement :=  ^ do statement while ( expression ) ;
iteration-statement :=  ^ for ( expression ; expression ; expression ) statement
iteration-statement :=  ^ for ( expression ; expression ; ) statement
iteration-statement :=  ^ for ( expression ; ; expression ) statement
iteration-statement :=  ^ for ( expression ; ; ) statement
iteration-statement :=  ^ for ( ; expression ; expression ) statement
iteration-statement :=  ^ for ( ; expression ; ) statement
iteration-statement :=  ^ for ( ; ; expression ) statement
iteration-statement :=  ^ for ( ; ; ) statement
jump-statement :=  ^ goto identifier ;
jump-statement :=  ^ return expression ;
jump-statement :=  ^ return ;
jump-statement :=  ^ continue ;
jump-statement :=  ^ break ;
expression :=  ^ assignment-expression
expression :=  ^ expression , assignment-expression
assignment-expression :=  ^ condition-expression
assignment-expression :=  ^ unary-expression assignment-operator assignment-expression
condition-expression :=  ^ logical-OR-expression
condition-expression :=  ^ logical-OR-expression ? expression : condition-expression
unary-expression :=  ^ postfix-expression
unary-expression :=  ^ ++ unary-expression
unary-expression :=  ^ -- unary-expression
unary-expression :=  ^ unary-operator cast-expression
unary-expression :=  ^ sizeof unary-expression
unary-expression :=  ^ sizeof ( type-name )
logical-OR-expression :=  ^ logical-AND-expression
logical-OR-expression :=  ^ logical-OR-expression || logical-AND-expression
postfix-expression :=  ^ primary-expression
postfix-expression :=  ^ postfix-expression [ expression ]
postfix-expression :=  ^ postfix-expression ( argument-expression-list )
postfix-expression :=  ^ postfix-expression ( )
postfix-expression :=  ^ postfix-expression . identifier
postfix-expression :=  ^ postfix-expression -> identifier
postfix-expression :=  ^ postfix-expression ++
postfix-expression :=  ^ postfix-expression --
unary-operator :=  ^ &
unary-operator :=  ^ *
unary-operator :=  ^ +
unary-operator :=  ^ -
unary-operator :=  ^ ~
unary-operator :=  ^ !
logical-AND-expression :=  ^ inclusive-OR-expression
logical-AND-expression :=  ^ logical-AND-expression && inclusive-OR-expression
primary-expression :=  ^ identifier
primary-expression :=  ^ char-const
primary-expression :=  ^ float-const
primary-expression :=  ^ string-const
primary-expression :=  ^ int-const
primary-expression :=  ^ ( expression )
inclusive-OR-expression :=  ^ exclusive-OR-expression
inclusive-OR-expression :=  ^ inclusive-OR-expression | exclusive-OR-expression
exclusive-OR-expression :=  ^ AND-expression
exclusive-OR-expression :=  ^ exclusive-OR-expression ^ AND-expression
AND-expression :=  ^ equality-expression
AND-expression :=  ^ AND-expression & equality-expression
equality-expression :=  ^ relational-expression
equality-expression :=  ^ equality-expression equality-operator relational-expression
relational-expression :=  ^ shift-expression
relational-expression :=  ^ relational-expression relational-operator shift-expression
shift-expression :=  ^ additive-expression
shift-expression :=  ^ shift-expression shift-operator additive-expression
additive-expression :=  ^ multiplicative-expression
additive-expression :=  ^ additive-expression additive-operator multiplicative-expression
multiplicative-expression :=  ^ cast-expression
multiplicative-expression :=  ^ multiplicative-expression multiplicative-operator cast-expression
cast-expression :=  ^ unary-expression
cast-expression :=  ^ ( type-name ) cast-expression

I[49]
declaration-specifier :=  storage-class-specifier declaration-specifier ^

I[50]
declaration-specifier :=  type-specifier declaration-specifier ^

I[51]
declaration-specifier :=  type-qualifier declaration-specifier ^

I[52]
struct-or-union-specifier :=  struct-or-union identifier ^ { struct-declaration-list }
struct-or-union-specifier :=  struct-or-union identifier ^

I[53]
type-specifier :=  ^ void
type-specifier :=  ^ char
type-specifier :=  ^ short
type-specifier :=  ^ int
type-specifier :=  ^ long
type-specifier :=  ^ float
type-specifier :=  ^ double
type-specifier :=  ^ signed
type-specifier :=  ^ unsigned
type-specifier :=  ^ struct-or-union-specifier
type-specifier :=  ^ enum-specifier
type-specifier :=  ^ identifier
type-qualifier :=  ^ const
type-qualifier :=  ^ volatile
struct-or-union-specifier :=  ^ struct-or-union identifier { struct-declaration-list }
struct-or-union-specifier :=  ^ struct-or-union { struct-declaration-list }
struct-or-union-specifier :=  ^ struct-or-union identifier
enum-specifier :=  ^ enum identifier { enumerator-list }
enum-specifier :=  ^ enum { enumerator-list }
enum-specifier :=  ^ enum identifier
struct-or-union :=  ^ struct
struct-or-union :=  ^ union
struct-or-union-specifier :=  struct-or-union { ^ struct-declaration-list }
struct-declaration-list :=  ^ struct-declaration
struct-declaration-list :=  ^ struct-declaration-list struct-declaration
struct-declaration :=  ^ specifier-qualifier-list struct-declarator-list
specifier-qualifier-list :=  ^ type-qualifier specifier-qualifier-list
specifier-qualifier-list :=  ^ type-qualifier
specifier-qualifier-list :=  ^ type-specifier specifier-qualifier-list
specifier-qualifier-list :=  ^ type-specifier

I[54]
direct-declarator :=  direct-declarator ^ [ constant-expression ]
direct-declarator :=  direct-declarator ^ [ ]
direct-declarator :=  direct-declarator ^ ( parameter-type-list )
direct-declarator :=  direct-declarator ^ ( identifier-list )
direct-declarator :=  direct-declarator ^ ( )
declarator :=  pointer direct-declarator ^

I[55]
condition-expression :=  ^ logical-OR-expression
condition-expression :=  ^ logical-OR-expression ? expression : condition-expression
unary-expression :=  ^ postfix-expression
unary-expression :=  ^ ++ unary-expression
unary-expression :=  ^ -- unary-expression
unary-expression :=  ^ unary-operator cast-expression
unary-expression :=  ^ sizeof unary-expression
unary-expression :=  ^ sizeof ( type-name )
logical-OR-expression :=  ^ logical-AND-expression
logical-OR-expression :=  ^ logical-OR-expression || logical-AND-expression
postfix-expression :=  ^ primary-expression
postfix-expression :=  ^ postfix-expression [ expression ]
postfix-expression :=  ^ postfix-expression ( argument-expression-list )
postfix-expression :=  ^ postfix-expression ( )
postfix-expression :=  ^ postfix-expression . identifier
postfix-expression :=  ^ postfix-expression -> identifier
postfix-expression :=  ^ postfix-expression ++
postfix-expression :=  ^ postfix-expression --
unary-operator :=  ^ &
unary-operator :=  ^ *
unary-operator :=  ^ +
unary-operator :=  ^ -
unary-operator :=  ^ ~
unary-operator :=  ^ !
logical-AND-expression :=  ^ inclusive-OR-expression
logical-AND-expression :=  ^ logical-AND-expression && inclusive-OR-expression
primary-expression :=  ^ identifier
primary-expression :=  ^ char-const
primary-expression :=  ^ float-const
primary-expression :=  ^ string-const
primary-expression :=  ^ int-const
primary-expression :=  ^ ( expression )
inclusive-OR-expression :=  ^ exclusive-OR-expression
inclusive-OR-expression :=  ^ inclusive-OR-expression | exclusive-OR-expression
exclusive-OR-expression :=  ^ AND-expression
exclusive-OR-expression :=  ^ exclusive-OR-expression ^ AND-expression
AND-expression :=  ^ equality-expression
AND-expression :=  ^ AND-expression & equality-expression
equality-expression :=  ^ relational-expression
equality-expression :=  ^ equality-expression equality-operator relational-expression
relational-expression :=  ^ shift-expression
relational-expression :=  ^ relational-expression relational-operator shift-expression
shift-expression :=  ^ additive-expression
shift-expression :=  ^ shift-expression shift-operator additive-expression
additive-expression :=  ^ multiplicative-expression
additive-expression :=  ^ additive-expression additive-operator multiplicative-expression
multiplicative-expression :=  ^ cast-expression
multiplicative-expression :=  ^ multiplicative-expression multiplicative-operator cast-expression
cast-expression :=  ^ unary-expression
cast-expression :=  ^ ( type-name ) cast-expression
direct-declarator :=  direct-declarator [ ^ constant-expression ]
direct-declarator :=  direct-declarator [ ^ ]
constant-expression :=  ^ condition-expression

I[56]
declaration-specifier :=  ^ storage-class-specifier declaration-specifier
declaration-specifier :=  ^ storage-class-specifier
declaration-specifier :=  ^ type-specifier declaration-specifier
declaration-specifier :=  ^ type-specifier
declaration-specifier :=  ^ type-qualifier declaration-specifier
declaration-specifier :=  ^ type-qualifier
storage-class-specifier :=  ^ auto
storage-class-specifier :=  ^ register
storage-class-specifier :=  ^ static
storage-class-specifier :=  ^ extern
storage-class-specifier :=  ^ typedef
type-specifier :=  ^ void
type-specifier :=  ^ char
type-specifier :=  ^ short
type-specifier :=  ^ int
type-specifier :=  ^ long
type-specifier :=  ^ float
type-specifier :=  ^ double
type-specifier :=  ^ signed
type-specifier :=  ^ unsigned
type-specifier :=  ^ struct-or-union-specifier
type-specifier :=  ^ enum-specifier
type-specifier :=  ^ identifier
type-qualifier :=  ^ const
type-qualifier :=  ^ volatile
struct-or-union-specifier :=  ^ struct-or-union identifier { struct-declaration-list }
struct-or-union-specifier :=  ^ struct-or-union { struct-declaration-list }
struct-or-union-specifier :=  ^ struct-or-union identifier
enum-specifier :=  ^ enum identifier { enumerator-list }
enum-specifier :=  ^ enum { enumerator-list }
enum-specifier :=  ^ enum identifier
struct-or-union :=  ^ struct
struct-or-union :=  ^ union
direct-declarator :=  direct-declarator ( ^ parameter-type-list )
direct-declarator :=  direct-declarator ( ^ identifier-list )
direct-declarator :=  direct-declarator ( ^ )
parameter-type-list :=  ^ parameter-list
parameter-type-list :=  ^ parameter-list , . . .
identifier-list :=  ^ identifier
identifier-list :=  ^ identifier-list , identifier
parameter-list :=  ^ parameter-declarator
parameter-list :=  ^ parameter-list , parameter-declarator
parameter-declarator :=  ^ declaration-specifier declarator
parameter-declarator :=  ^ declaration-specifier abstract-declarator
parameter-declarator :=  ^ declaration-specifier

I[57]
enum-specifier :=  enum identifier ^ { enumerator-list }
enum-specifier :=  enum identifier ^

I[58]
enum-specifier :=  enum { ^ enumerator-list }
enumerator-list :=  ^ enumerator
enumerator-list :=  ^ enumerator-list enumerator
enumerator :=  ^ identifier
enumerator :=  ^ identifier = constant-expression

I[59]
direct-declarator :=  ( declarator ^ )

I[60]
type-qualifier-list :=  type-qualifier ^

I[61]
pointer :=  * pointer ^

I[62]
type-qualifier :=  ^ const
type-qualifier :=  ^ volatile
pointer :=  ^ * type-qualifier-list pointer
pointer :=  ^ * type-qualifier-list
pointer :=  ^ * pointer
pointer :=  ^ *
pointer :=  * type-qualifier-list ^ pointer
pointer :=  * type-qualifier-list ^
type-qualifier-list :=  type-qualifier-list ^ type-qualifier

I[63]
declaration :=  ^ declaration-specifier init-declarator-list
declaration :=  ^ declaration-specifier
declaration-specifier :=  ^ storage-class-specifier declaration-specifier
declaration-specifier :=  ^ storage-class-specifier
declaration-specifier :=  ^ type-specifier declaration-specifier
declaration-specifier :=  ^ type-specifier
declaration-specifier :=  ^ type-qualifier declaration-specifier
declaration-specifier :=  ^ type-qualifier
storage-class-specifier :=  ^ auto
storage-class-specifier :=  ^ register
storage-class-specifier :=  ^ static
storage-class-specifier :=  ^ extern
storage-class-specifier :=  ^ typedef
type-specifier :=  ^ void
type-specifier :=  ^ char
type-specifier :=  ^ short
type-specifier :=  ^ int
type-specifier :=  ^ long
type-specifier :=  ^ float
type-specifier :=  ^ double
type-specifier :=  ^ signed
type-specifier :=  ^ unsigned
type-specifier :=  ^ struct-or-union-specifier
type-specifier :=  ^ enum-specifier
type-specifier :=  ^ identifier
type-qualifier :=  ^ const
type-qualifier :=  ^ volatile
struct-or-union-specifier :=  ^ struct-or-union identifier { struct-declaration-list }
struct-or-union-specifier :=  ^ struct-or-union { struct-declaration-list }
struct-or-union-specifier :=  ^ struct-or-union identifier
enum-specifier :=  ^ enum identifier { enumerator-list }
enum-specifier :=  ^ enum { enumerator-list }
enum-specifier :=  ^ enum identifier
struct-or-union :=  ^ struct
struct-or-union :=  ^ union
composite-statement :=  ^ { declaration-list statement-list }
composite-statement :=  ^ { declaration-list }
composite-statement :=  ^ { statement-list }
composite-statement :=  ^ { }
declaration-list :=  declaration-list ^ declaration
function-definition :=  declaration-specifier declarator declaration-list ^ composite-statement

I[64]
function-definition :=  declaration-specifier declarator composite-statement ^

I[65]
assignment-expression :=  ^ condition-expression
assignment-expression :=  ^ unary-expression assignment-operator assignment-expression
condition-expression :=  ^ logical-OR-expression
condition-expression :=  ^ logical-OR-expression ? expression : condition-expression
unary-expression :=  ^ postfix-expression
unary-expression :=  ^ ++ unary-expression
unary-expression :=  ^ -- unary-expression
unary-expression :=  ^ unary-operator cast-expression
unary-expression :=  ^ sizeof unary-expression
unary-expression :=  ^ sizeof ( type-name )
logical-OR-expression :=  ^ logical-AND-expression
logical-OR-expression :=  ^ logical-OR-expression || logical-AND-expression
postfix-expression :=  ^ primary-expression
postfix-expression :=  ^ postfix-expression [ expression ]
postfix-expression :=  ^ postfix-expression ( argument-expression-list )
postfix-expression :=  ^ postfix-expression ( )
postfix-expression :=  ^ postfix-expression . identifier
postfix-expression :=  ^ postfix-expression -> identifier
postfix-expression :=  ^ postfix-expression ++
postfix-expression :=  ^ postfix-expression --
unary-operator :=  ^ &
unary-operator :=  ^ *
unary-operator :=  ^ +
unary-operator :=  ^ -
unary-operator :=  ^ ~
unary-operator :=  ^ !
logical-AND-expression :=  ^ inclusive-OR-expression
logical-AND-expression :=  ^ logical-AND-expression && inclusive-OR-expression
primary-expression :=  ^ identifier
primary-expression :=  ^ char-const
primary-expression :=  ^ float-const
primary-expression :=  ^ string-const
primary-expression :=  ^ int-const
primary-expression :=  ^ ( expression )
inclusive-OR-expression :=  ^ exclusive-OR-expression
inclusive-OR-expression :=  ^ inclusive-OR-expression | exclusive-OR-expression
exclusive-OR-expression :=  ^ AND-expression
exclusive-OR-expression :=  ^ exclusive-OR-expression ^ AND-expression
AND-expression :=  ^ equality-expression
AND-expression :=  ^ AND-expression & equality-expression
equality-expression :=  ^ relational-expression
equality-expression :=  ^ equality-expression equality-operator relational-expression
relational-expression :=  ^ shift-expression
relational-expression :=  ^ relational-expression relational-operator shift-expression
shift-expression :=  ^ additive-expression
shift-expression :=  ^ shift-expression shift-operator additive-expression
additive-expression :=  ^ multiplicative-expression
additive-expression :=  ^ additive-expression additive-operator multiplicative-expression
multiplicative-expression :=  ^ cast-expression
multiplicative-expression :=  ^ multiplicative-expression multiplicative-operator cast-expression
cast-expression :=  ^ unary-expression
cast-expression :=  ^ ( type-name ) cast-expression
init-declarator :=  declarator = ^ initializer
initializer :=  ^ assignment-expression
initializer :=  ^ { initializer-list }
initializer :=  ^ { initializer-list , }

I[66]
init-declarator :=  declarator ^
init-declarator :=  declarator ^ = initializer

I[67]
init-declarator-list :=  init-declarator-list init-declarator ^

I[68]
declaration-list :=  declaration-list declaration ^

I[69]
function-definition :=  declarator declaration-list composite-statement ^

I[70]
declaration :=  ^ declaration-specifier init-declarator-list
declaration :=  ^ declaration-specifier
declaration-specifier :=  ^ storage-class-specifier declaration-specifier
declaration-specifier :=  ^ storage-class-specifier
declaration-specifier :=  ^ type-specifier declaration-specifier
declaration-specifier :=  ^ type-specifier
declaration-specifier :=  ^ type-qualifier declaration-specifier
declaration-specifier :=  ^ type-qualifier
storage-class-specifier :=  ^ auto
storage-class-specifier :=  ^ register
storage-class-specifier :=  ^ static
storage-class-specifier :=  ^ extern
storage-class-specifier :=  ^ typedef
type-specifier :=  ^ void
type-specifier :=  ^ char
type-specifier :=  ^ short
type-specifier :=  ^ int
type-specifier :=  ^ long
type-specifier :=  ^ float
type-specifier :=  ^ double
type-specifier :=  ^ signed
type-specifier :=  ^ unsigned
type-specifier :=  ^ struct-or-union-specifier
type-specifier :=  ^ enum-specifier
type-specifier :=  ^ identifier
type-qualifier :=  ^ const
type-qualifier :=  ^ volatile
struct-or-union-specifier :=  ^ struct-or-union identifier { struct-declaration-list }
struct-or-union-specifier :=  ^ struct-or-union { struct-declaration-list }
struct-or-union-specifier :=  ^ struct-or-union identifier
enum-specifier :=  ^ enum identifier { enumerator-list }
enum-specifier :=  ^ enum { enumerator-list }
enum-specifier :=  ^ enum identifier
struct-or-union :=  ^ struct
struct-or-union :=  ^ union
composite-statement :=  ^ { declaration-list statement-list }
composite-statement :=  ^ { declaration-list }
composite-statement :=  ^ { statement-list }
composite-statement :=  ^ { }
declaration-list :=  declaration-list ^ declaration
statement-list :=  ^ statement
statement-list :=  ^ statement-list statement
statement :=  ^ labeled-statement
statement :=  ^ expression-statement
statement :=  ^ composite-statement
statement :=  ^ seletion-statement
statement :=  ^ iteration-statement
statement :=  ^ jump-statement
labeled-statement :=  ^ identifier : statement
labeled-statement :=  ^ case constant-expression : statement
labeled-statement :=  ^ default : statement
expression-statement :=  ^ expression ;
expression-statement :=  ^ ;
seletion-statement :=  ^ if ( expression ) statement
seletion-statement :=  ^ if ( expression ) statement else statement
seletion-statement :=  ^ switch ( expression ) statement
iteration-statement :=  ^ while ( expression ) statement
iteration-statement :=  ^ do statement while ( expression ) ;
iteration-statement :=  ^ for ( expression ; expression ; expression ) statement
iteration-statement :=  ^ for ( expression ; expression ; ) statement
iteration-statement :=  ^ for ( expression ; ; expression ) statement
iteration-statement :=  ^ for ( expression ; ; ) statement
iteration-statement :=  ^ for ( ; expression ; expression ) statement
iteration-statement :=  ^ for ( ; expression ; ) statement
iteration-statement :=  ^ for ( ; ; expression ) statement
iteration-statement :=  ^ for ( ; ; ) statement
jump-statement :=  ^ goto identifier ;
jump-statement :=  ^ return expression ;
jump-statement :=  ^ return ;
jump-statement :=  ^ continue ;
jump-statement :=  ^ break ;
expression :=  ^ assignment-expression
expression :=  ^ expression , assignment-expression
assignment-expression :=  ^ condition-expression
assignment-expression :=  ^ unary-expression assignment-operator assignment-expression
condition-expression :=  ^ logical-OR-expression
condition-expression :=  ^ logical-OR-expression ? expression : condition-expression
unary-expression :=  ^ postfix-expression
unary-expression :=  ^ ++ unary-expression
unary-expression :=  ^ -- unary-expression
unary-expression :=  ^ unary-operator cast-expression
unary-expression :=  ^ sizeof unary-expression
unary-expression :=  ^ sizeof ( type-name )
logical-OR-expression :=  ^ logical-AND-expression
logical-OR-expression :=  ^ logical-OR-expression || logical-AND-expression
postfix-expression :=  ^ primary-expression
postfix-expression :=  ^ postfix-expression [ expression ]
postfix-expression :=  ^ postfix-expression ( argument-expression-list )
postfix-expression :=  ^ postfix-expression ( )
postfix-expression :=  ^ postfix-expression . identifier
postfix-expression :=  ^ postfix-expression -> identifier
postfix-expression :=  ^ postfix-expression ++
postfix-expression :=  ^ postfix-expression --
unary-operator :=  ^ &
unary-operator :=  ^ *
unary-operator :=  ^ +
unary-operator :=  ^ -
unary-operator :=  ^ ~
unary-operator :=  ^ !
logical-AND-expression :=  ^ inclusive-OR-expression
logical-AND-expression :=  ^ logical-AND-expression && inclusive-OR-expression
primary-expression :=  ^ identifier
primary-expression :=  ^ char-const
primary-expression :=  ^ float-const
primary-expression :=  ^ string-const
primary-expression :=  ^ int-const
primary-expression :=  ^ ( expression )
inclusive-OR-expression :=  ^ exclusive-OR-expression
inclusive-OR-expression :=  ^ inclusive-OR-expression | exclusive-OR-expression
exclusive-OR-expression :=  ^ AND-expression
exclusive-OR-expression :=  ^ exclusive-OR-expression ^ AND-expression
AND-expression :=  ^ equality-expression
AND-expression :=  ^ AND-expression & equality-expression
equality-expression :=  ^ relational-expression
equality-expression :=  ^ equality-expression equality-operator relational-expression
relational-expression :=  ^ shift-expression
relational-expression :=  ^ relational-expression relational-operator shift-expression
shift-expression :=  ^ additive-expression
shift-expression :=  ^ shift-expression shift-operator additive-expression
additive-expression :=  ^ multiplicative-expression
additive-expression :=  ^ additive-expression additive-operator multiplicative-expression
multiplicative-expression :=  ^ cast-expression
multiplicative-expression :=  ^ multiplicative-expression multiplicative-operator cast-expression
cast-expression :=  ^ unary-expression
cast-expression :=  ^ ( type-name ) cast-expression
composite-statement :=  { declaration-list ^ statement-list }
composite-statement :=  { declaration-list ^ }

I[71]
statement :=  composite-statement ^

I[72]
statement-list :=  statement ^

I[73]
statement :=  labeled-statement ^

I[74]
statement :=  expression-statement ^

I[75]
expression-statement :=  expression ^ ;
expression :=  expression ^ , assignment-expression

I[76]
statement :=  seletion-statement ^

I[77]
statement :=  iteration-statement ^

I[78]
statement :=  jump-statement ^

I[79]
composite-statement :=  ^ { declaration-list statement-list }
composite-statement :=  ^ { declaration-list }
composite-statement :=  ^ { statement-list }
composite-statement :=  ^ { }
statement :=  ^ labeled-statement
statement :=  ^ expression-statement
statement :=  ^ composite-statement
statement :=  ^ seletion-statement
statement :=  ^ iteration-statement
statement :=  ^ jump-statement
labeled-statement :=  ^ identifier : statement
labeled-statement :=  ^ case constant-expression : statement
labeled-statement :=  ^ default : statement
expression-statement :=  ^ expression ;
expression-statement :=  ^ ;
seletion-statement :=  ^ if ( expression ) statement
seletion-statement :=  ^ if ( expression ) statement else statement
seletion-statement :=  ^ switch ( expression ) statement
iteration-statement :=  ^ while ( expression ) statement
iteration-statement :=  ^ do statement while ( expression ) ;
iteration-statement :=  ^ for ( expression ; expression ; expression ) statement
iteration-statement :=  ^ for ( expression ; expression ; ) statement
iteration-statement :=  ^ for ( expression ; ; expression ) statement
iteration-statement :=  ^ for ( expression ; ; ) statement
iteration-statement :=  ^ for ( ; expression ; expression ) statement
iteration-statement :=  ^ for ( ; expression ; ) statement
iteration-statement :=  ^ for ( ; ; expression ) statement
iteration-statement :=  ^ for ( ; ; ) statement
jump-statement :=  ^ goto identifier ;
jump-statement :=  ^ return expression ;
jump-statement :=  ^ return ;
jump-statement :=  ^ continue ;
jump-statement :=  ^ break ;
expression :=  ^ assignment-expression
expression :=  ^ expression , assignment-expression
assignment-expression :=  ^ condition-expression
assignment-expression :=  ^ unary-expression assignment-operator assignment-expression
condition-expression :=  ^ logical-OR-expression
condition-expression :=  ^ logical-OR-expression ? expression : condition-expression
unary-expression :=  ^ postfix-expression
unary-expression :=  ^ ++ unary-expression
unary-expression :=  ^ -- unary-expression
unary-expression :=  ^ unary-operator cast-expression
unary-expression :=  ^ sizeof unary-expression
unary-expression :=  ^ sizeof ( type-name )
logical-OR-expression :=  ^ logical-AND-expression
logical-OR-expression :=  ^ logical-OR-expression || logical-AND-expression
postfix-expression :=  ^ primary-expression
postfix-expression :=  ^ postfix-expression [ expression ]
postfix-expression :=  ^ postfix-expression ( argument-expression-list )
postfix-expression :=  ^ postfix-expression ( )
postfix-expression :=  ^ postfix-expression . identifier
postfix-expression :=  ^ postfix-expression -> identifier
postfix-expression :=  ^ postfix-expression ++
postfix-expression :=  ^ postfix-expression --
unary-operator :=  ^ &
unary-operator :=  ^ *
unary-operator :=  ^ +
unary-operator :=  ^ -
unary-operator :=  ^ ~
unary-operator :=  ^ !
logical-AND-expression :=  ^ inclusive-OR-expression
logical-AND-expression :=  ^ logical-AND-expression && inclusive-OR-expression
primary-expression :=  ^ identifier
primary-expression :=  ^ char-const
primary-expression :=  ^ float-const
primary-expression :=  ^ string-const
primary-expression :=  ^ int-const
primary-expression :=  ^ ( expression )
inclusive-OR-expression :=  ^ exclusive-OR-expression
inclusive-OR-expression :=  ^ inclusive-OR-expression | exclusive-OR-expression
exclusive-OR-expression :=  ^ AND-expression
exclusive-OR-expression :=  ^ exclusive-OR-expression ^ AND-expression
AND-expression :=  ^ equality-expression
AND-expression :=  ^ AND-expression & equality-expression
equality-expression :=  ^ relational-expression
equality-expression :=  ^ equality-expression equality-operator relational-expression
relational-expression :=  ^ shift-expression
relational-expression :=  ^ relational-expression relational-operator shift-expression
shift-expression :=  ^ additive-expression
shift-expression :=  ^ shift-expression shift-operator additive-expression
additive-expression :=  ^ multiplicative-expression
additive-expression :=  ^ additive-expression additive-operator multiplicative-expression
multiplicative-expression :=  ^ cast-expression
multiplicative-expression :=  ^ multiplicative-expression multiplicative-operator cast-expression
cast-expression :=  ^ unary-expression
cast-expression :=  ^ ( type-name ) cast-expression
composite-statement :=  { statement-list ^ }
statement-list :=  statement-list ^ statement

I[80]
expression :=  assignment-expression ^

I[81]
assignment-expression :=  condition-expression ^

I[82]
condition-expression :=  logical-OR-expression ^
condition-expression :=  logical-OR-expression ^ ? expression : condition-expression
logical-OR-expression :=  logical-OR-expression ^ || logical-AND-expression

I[83]
logical-OR-expression :=  logical-AND-expression ^
logical-AND-expression :=  logical-AND-expression ^ && inclusive-OR-expression

I[84]
logical-AND-expression :=  inclusive-OR-expression ^
inclusive-OR-expression :=  inclusive-OR-expression ^ | exclusive-OR-expression

I[85]
inclusive-OR-expression :=  exclusive-OR-expression ^
exclusive-OR-expression :=  exclusive-OR-expression ^ ^ AND-expression

I[86]
assignment-expression :=  unary-expression ^ assignment-operator assignment-expression
cast-expression :=  unary-expression ^
assignment-operator :=  ^ =
assignment-operator :=  ^ *=
assignment-operator :=  ^ /=
assignment-operator :=  ^ %=
assignment-operator :=  ^ +=
assignment-operator :=  ^ -=
assignment-operator :=  ^ <<=
assignment-operator :=  ^ >>=
assignment-operator :=  ^ &=
assignment-operator :=  ^ ^=
assignment-operator :=  ^ |=

I[87]
exclusive-OR-expression :=  AND-expression ^
AND-expression :=  AND-expression ^ & equality-expression

I[88]
AND-expression :=  equality-expression ^
equality-expression :=  equality-expression ^ equality-operator relational-expression
equality-operator :=  ^ ==
equality-operator :=  ^ !=

I[89]
equality-expression :=  relational-expression ^
relational-expression :=  relational-expression ^ relational-operator shift-expression
relational-operator :=  ^ <
relational-operator :=  ^ >
relational-operator :=  ^ <=
relational-operator :=  ^ >=

I[90]
relational-expression :=  shift-expression ^
shift-expression :=  shift-expression ^ shift-operator additive-expression
shift-operator :=  ^ <<
shift-operator :=  ^ >>

I[91]
shift-expression :=  additive-expression ^
additive-expression :=  additive-expression ^ additive-operator multiplicative-expression
additive-operator :=  ^ +
additive-operator :=  ^ -

I[92]
additive-expression :=  multiplicative-expression ^
multiplicative-expression :=  multiplicative-expression ^ multiplicative-operator cast-expression
multiplicative-operator :=  ^ *
multiplicative-operator :=  ^ %
multiplicative-operator :=  ^ /

I[93]
multiplicative-expression :=  cast-expression ^

I[94]
unary-expression :=  ^ postfix-expression
unary-expression :=  ^ ++ unary-expression
unary-expression :=  ^ -- unary-expression
unary-expression :=  ^ unary-operator cast-expression
unary-expression :=  ^ sizeof unary-expression
unary-expression :=  ^ sizeof ( type-name )
postfix-expression :=  ^ primary-expression
postfix-expression :=  ^ postfix-expression [ expression ]
postfix-expression :=  ^ postfix-expression ( argument-expression-list )
postfix-expression :=  ^ postfix-expression ( )
postfix-expression :=  ^ postfix-expression . identifier
postfix-expression :=  ^ postfix-expression -> identifier
postfix-expression :=  ^ postfix-expression ++
postfix-expression :=  ^ postfix-expression --
unary-operator :=  ^ &
unary-operator :=  ^ *
unary-operator :=  ^ +
unary-operator :=  ^ -
unary-operator :=  ^ ~
unary-operator :=  ^ !
primary-expression :=  ^ identifier
primary-expression :=  ^ char-const
primary-expression :=  ^ float-const
primary-expression :=  ^ string-const
primary-expression :=  ^ int-const
primary-expression :=  ^ ( expression )
cast-expression :=  ^ unary-expression
cast-expression :=  ^ ( type-name ) cast-expression
unary-expression :=  unary-operator ^ cast-expression

I[95]
unary-expression :=  postfix-expression ^
postfix-expression :=  postfix-expression ^ [ expression ]
postfix-expression :=  postfix-expression ^ ( argument-expression-list )
postfix-expression :=  postfix-expression ^ ( )
postfix-expression :=  postfix-expression ^ . identifier
postfix-expression :=  postfix-expression ^ -> identifier
postfix-expression :=  postfix-expression ^ ++
postfix-expression :=  postfix-expression ^ --

I[96]
postfix-expression :=  primary-expression ^

I[97]
type-specifier :=  identifier ^
labeled-statement :=  identifier ^ : statement
primary-expression :=  identifier ^

I[98]
primary-expression :=  float-const ^

I[99]
primary-expression :=  int-const ^

I[100]
primary-expression :=  string-const ^

I[101]
primary-expression :=  char-const ^

I[102]
unary-expression :=  ^ postfix-expression
unary-expression :=  ^ ++ unary-expression
unary-expression :=  ^ -- unary-expression
unary-expression :=  ^ unary-operator cast-expression
unary-expression :=  ^ sizeof unary-expression
unary-expression :=  ^ sizeof ( type-name )
postfix-expression :=  ^ primary-expression
postfix-expression :=  ^ postfix-expression [ expression ]
postfix-expression :=  ^ postfix-expression ( argument-expression-list )
postfix-expression :=  ^ postfix-expression ( )
postfix-expression :=  ^ postfix-expression . identifier
postfix-expression :=  ^ postfix-expression -> identifier
postfix-expression :=  ^ postfix-expression ++
postfix-expression :=  ^ postfix-expression --
unary-operator :=  ^ &
unary-operator :=  ^ *
unary-operator :=  ^ +
unary-operator :=  ^ -
unary-operator :=  ^ ~
unary-operator :=  ^ !
primary-expression :=  ^ identifier
primary-expression :=  ^ char-const
primary-expression :=  ^ float-const
primary-expression :=  ^ string-const
primary-expression :=  ^ int-const
primary-expression :=  ^ ( expression )
unary-expression :=  sizeof ^ unary-expression
unary-expression :=  sizeof ^ ( type-name )

I[103]
iteration-statement :=  while ^ ( expression ) statement

I[104]
condition-expression :=  ^ logical-OR-expression
condition-expression :=  ^ logical-OR-expression ? expression : condition-expression
unary-expression :=  ^ postfix-expression
unary-expression :=  ^ ++ unary-expression
unary-expression :=  ^ -- unary-expression
unary-expression :=  ^ unary-operator cast-expression
unary-expression :=  ^ sizeof unary-expression
unary-expression :=  ^ sizeof ( type-name )
logical-OR-expression :=  ^ logical-AND-expression
logical-OR-expression :=  ^ logical-OR-expression || logical-AND-expression
postfix-expression :=  ^ primary-expression
postfix-expression :=  ^ postfix-expression [ expression ]
postfix-expression :=  ^ postfix-expression ( argument-expression-list )
postfix-expression :=  ^ postfix-expression ( )
postfix-expression :=  ^ postfix-expression . identifier
postfix-expression :=  ^ postfix-expression -> identifier
postfix-expression :=  ^ postfix-expression ++
postfix-expression :=  ^ postfix-expression --
unary-operator :=  ^ &
unary-operator :=  ^ *
unary-operator :=  ^ +
unary-operator :=  ^ -
unary-operator :=  ^ ~
unary-operator :=  ^ !
logical-AND-expression :=  ^ inclusive-OR-expression
logical-AND-expression :=  ^ logical-AND-expression && inclusive-OR-expression
primary-expression :=  ^ identifier
primary-expression :=  ^ char-const
primary-expression :=  ^ float-const
primary-expression :=  ^ string-const
primary-expression :=  ^ int-const
primary-expression :=  ^ ( expression )
inclusive-OR-expression :=  ^ exclusive-OR-expression
inclusive-OR-expression :=  ^ inclusive-OR-expression | exclusive-OR-expression
exclusive-OR-expression :=  ^ AND-expression
exclusive-OR-expression :=  ^ exclusive-OR-expression ^ AND-expression
AND-expression :=  ^ equality-expression
AND-expression :=  ^ AND-expression & equality-expression
equality-expression :=  ^ relational-expression
equality-expression :=  ^ equality-expression equality-operator relational-expression
relational-expression :=  ^ shift-expression
relational-expression :=  ^ relational-expression relational-operator shift-expression
shift-expression :=  ^ additive-expression
shift-expression :=  ^ shift-expression shift-operator additive-expression
additive-expression :=  ^ multiplicative-expression
additive-expression :=  ^ additive-expression additive-operator multiplicative-expression
multiplicative-expression :=  ^ cast-expression
multiplicative-expression :=  ^ multiplicative-expression multiplicative-operator cast-expression
cast-expression :=  ^ unary-expression
cast-expression :=  ^ ( type-name ) cast-expression
constant-expression :=  ^ condition-expression
labeled-statement :=  case ^ constant-expression : statement

I[105]
labeled-statement :=  default ^ : statement

I[106]
seletion-statement :=  if ^ ( expression ) statement

I[107]
seletion-statement :=  if ^ ( expression ) statement else statement

I[108]
seletion-statement :=  switch ^ ( expression ) statement

I[109]
composite-statement :=  ^ { declaration-list statement-list }
composite-statement :=  ^ { declaration-list }
composite-statement :=  ^ { statement-list }
composite-statement :=  ^ { }
statement :=  ^ labeled-statement
statement :=  ^ expression-statement
statement :=  ^ composite-statement
statement :=  ^ seletion-statement
statement :=  ^ iteration-statement
statement :=  ^ jump-statement
labeled-statement :=  ^ identifier : statement
labeled-statement :=  ^ case constant-expression : statement
labeled-statement :=  ^ default : statement
expression-statement :=  ^ expression ;
expression-statement :=  ^ ;
seletion-statement :=  ^ if ( expression ) statement
seletion-statement :=  ^ if ( expression ) statement else statement
seletion-statement :=  ^ switch ( expression ) statement
iteration-statement :=  ^ while ( expression ) statement
iteration-statement :=  ^ do statement while ( expression ) ;
iteration-statement :=  ^ for ( expression ; expression ; expression ) statement
iteration-statement :=  ^ for ( expression ; expression ; ) statement
iteration-statement :=  ^ for ( expression ; ; expression ) statement
iteration-statement :=  ^ for ( expression ; ; ) statement
iteration-statement :=  ^ for ( ; expression ; expression ) statement
iteration-statement :=  ^ for ( ; expression ; ) statement
iteration-statement :=  ^ for ( ; ; expression ) statement
iteration-statement :=  ^ for ( ; ; ) statement
jump-statement :=  ^ goto identifier ;
jump-statement :=  ^ return expression ;
jump-statement :=  ^ return ;
jump-statement :=  ^ continue ;
jump-statement :=  ^ break ;
expression :=  ^ assignment-expression
expression :=  ^ expression , assignment-expression
assignment-expression :=  ^ condition-expression
assignment-expression :=  ^ unary-expression assignment-operator assignment-expression
condition-expression :=  ^ logical-OR-expression
condition-expression :=  ^ logical-OR-expression ? expression : condition-expression
unary-expression :=  ^ postfix-expression
unary-expression :=  ^ ++ unary-expression
unary-expression :=  ^ -- unary-expression
unary-expression :=  ^ unary-operator cast-expression
unary-expression :=  ^ sizeof unary-expression
unary-expression :=  ^ sizeof ( type-name )
logical-OR-expression :=  ^ logical-AND-expression
logical-OR-expression :=  ^ logical-OR-expression || logical-AND-expression
postfix-expression :=  ^ primary-expression
postfix-expression :=  ^ postfix-expression [ expression ]
postfix-expression :=  ^ postfix-expression ( argument-expression-list )
postfix-expression :=  ^ postfix-expression ( )
postfix-expression :=  ^ postfix-expression . identifier
postfix-expression :=  ^ postfix-expression -> identifier
postfix-expression :=  ^ postfix-expression ++
postfix-expression :=  ^ postfix-expression --
unary-operator :=  ^ &
unary-operator :=  ^ *
unary-operator :=  ^ +
unary-operator :=  ^ -
unary-operator :=  ^ ~
unary-operator :=  ^ !
logical-AND-expression :=  ^ inclusive-OR-expression
logical-AND-expression :=  ^ logical-AND-expression && inclusive-OR-expression
primary-expression :=  ^ identifier
primary-expression :=  ^ char-const
primary-expression :=  ^ float-const
primary-expression :=  ^ string-const
primary-expression :=  ^ int-const
primary-expression :=  ^ ( expression )
inclusive-OR-expression :=  ^ exclusive-OR-expression
inclusive-OR-expression :=  ^ inclusive-OR-expression | exclusive-OR-expression
exclusive-OR-expression :=  ^ AND-expression
exclusive-OR-expression :=  ^ exclusive-OR-expression ^ AND-expression
AND-expression :=  ^ equality-expression
AND-expression :=  ^ AND-expression & equality-expression
equality-expression :=  ^ relational-expression
equality-expression :=  ^ equality-expression equality-operator relational-expression
relational-expression :=  ^ shift-expression
relational-expression :=  ^ relational-expression relational-operator shift-expression
shift-expression :=  ^ additive-expression
shift-expression :=  ^ shift-expression shift-operator additive-expression
additive-expression :=  ^ multiplicative-expression
additive-expression :=  ^ additive-expression additive-operator multiplicative-expression
multiplicative-expression :=  ^ cast-expression
multiplicative-expression :=  ^ multiplicative-expression multiplicative-operator cast-expression
cast-expression :=  ^ unary-expression
cast-expression :=  ^ ( type-name ) cast-expression
iteration-statement :=  do ^ statement while ( expression ) ;

I[110]
iteration-statement :=  for ^ ( expression ; expression ; expression ) statement
iteration-statement :=  for ^ ( expression ; expression ; ) statement
iteration-statement :=  for ^ ( expression ; ; expression ) statement
iteration-statement :=  for ^ ( expression ; ; ) statement
iteration-statement :=  for ^ ( ; expression ; expression ) statement
iteration-statement :=  for ^ ( ; expression ; ) statement
iteration-statement :=  for ^ ( ; ; expression ) statement
iteration-statement :=  for ^ ( ; ; ) statement

I[111]
jump-statement :=  goto ^ identifier ;

I[112]
expression :=  ^ assignment-expression
expression :=  ^ expression , assignment-expression
assignment-expression :=  ^ condition-expression
assignment-expression :=  ^ unary-expression assignment-operator assignment-expression
condition-expression :=  ^ logical-OR-expression
condition-expression :=  ^ logical-OR-expression ? expression : condition-expression
unary-expression :=  ^ postfix-expression
unary-expression :=  ^ ++ unary-expression
unary-expression :=  ^ -- unary-expression
unary-expression :=  ^ unary-operator cast-expression
unary-expression :=  ^ sizeof unary-expression
unary-expression :=  ^ sizeof ( type-name )
logical-OR-expression :=  ^ logical-AND-expression
logical-OR-expression :=  ^ logical-OR-expression || logical-AND-expression
postfix-expression :=  ^ primary-expression
postfix-expression :=  ^ postfix-expression [ expression ]
postfix-expression :=  ^ postfix-expression ( argument-expression-list )
postfix-expression :=  ^ postfix-expression ( )
postfix-expression :=  ^ postfix-expression . identifier
postfix-expression :=  ^ postfix-expression -> identifier
postfix-expression :=  ^ postfix-expression ++
postfix-expression :=  ^ postfix-expression --
unary-operator :=  ^ &
unary-operator :=  ^ *
unary-operator :=  ^ +
unary-operator :=  ^ -
unary-operator :=  ^ ~
unary-operator :=  ^ !
logical-AND-expression :=  ^ inclusive-OR-expression
logical-AND-expression :=  ^ logical-AND-expression && inclusive-OR-expression
primary-expression :=  ^ identifier
primary-expression :=  ^ char-const
primary-expression :=  ^ float-const
primary-expression :=  ^ string-const
primary-expression :=  ^ int-const
primary-expression :=  ^ ( expression )
inclusive-OR-expression :=  ^ exclusive-OR-expression
inclusive-OR-expression :=  ^ inclusive-OR-expression | exclusive-OR-expression
exclusive-OR-expression :=  ^ AND-expression
exclusive-OR-expression :=  ^ exclusive-OR-expression ^ AND-expression
AND-expression :=  ^ equality-expression
AND-expression :=  ^ AND-expression & equality-expression
equality-expression :=  ^ relational-expression
equality-expression :=  ^ equality-expression equality-operator relational-expression
relational-expression :=  ^ shift-expression
relational-expression :=  ^ relational-expression relational-operator shift-expression
shift-expression :=  ^ additive-expression
shift-expression :=  ^ shift-expression shift-operator additive-expression
additive-expression :=  ^ multiplicative-expression
additive-expression :=  ^ additive-expression additive-operator multiplicative-expression
multiplicative-expression :=  ^ cast-expression
multiplicative-expression :=  ^ multiplicative-expression multiplicative-operator cast-expression
cast-expression :=  ^ unary-expression
cast-expression :=  ^ ( type-name ) cast-expression
jump-statement :=  return ^ expression ;
jump-statement :=  return ^ ;

I[113]
jump-statement :=  continue ^ ;

I[114]
jump-statement :=  break ^ ;

I[115]
unary-expression :=  ^ postfix-expression
unary-expression :=  ^ ++ unary-expression
unary-expression :=  ^ -- unary-expression
unary-expression :=  ^ unary-operator cast-expression
unary-expression :=  ^ sizeof unary-expression
unary-expression :=  ^ sizeof ( type-name )
postfix-expression :=  ^ primary-expression
postfix-expression :=  ^ postfix-expression [ expression ]
postfix-expression :=  ^ postfix-expression ( argument-expression-list )
postfix-expression :=  ^ postfix-expression ( )
postfix-expression :=  ^ postfix-expression . identifier
postfix-expression :=  ^ postfix-expression -> identifier
postfix-expression :=  ^ postfix-expression ++
postfix-expression :=  ^ postfix-expression --
unary-operator :=  ^ &
unary-operator :=  ^ *
unary-operator :=  ^ +
unary-operator :=  ^ -
unary-operator :=  ^ ~
unary-operator :=  ^ !
primary-expression :=  ^ identifier
primary-expression :=  ^ char-const
primary-expression :=  ^ float-const
primary-expression :=  ^ string-const
primary-expression :=  ^ int-const
primary-expression :=  ^ ( expression )
unary-expression :=  ++ ^ unary-expression

I[116]
unary-expression :=  ^ postfix-expression
unary-expression :=  ^ ++ unary-expression
unary-expression :=  ^ -- unary-expression
unary-expression :=  ^ unary-operator cast-expression
unary-expression :=  ^ sizeof unary-expression
unary-expression :=  ^ sizeof ( type-name )
postfix-expression :=  ^ primary-expression
postfix-expression :=  ^ postfix-expression [ expression ]
postfix-expression :=  ^ postfix-expression ( argument-expression-list )
postfix-expression :=  ^ postfix-expression ( )
postfix-expression :=  ^ postfix-expression . identifier
postfix-expression :=  ^ postfix-expression -> identifier
postfix-expression :=  ^ postfix-expression ++
postfix-expression :=  ^ postfix-expression --
unary-operator :=  ^ &
unary-operator :=  ^ *
unary-operator :=  ^ +
unary-operator :=  ^ -
unary-operator :=  ^ ~
unary-operator :=  ^ !
primary-expression :=  ^ identifier
primary-expression :=  ^ char-const
primary-expression :=  ^ float-const
primary-expression :=  ^ string-const
primary-expression :=  ^ int-const
primary-expression :=  ^ ( expression )
unary-expression :=  -- ^ unary-expression

I[117]
unary-operator :=  ! ^

I[118]
unary-operator :=  ~ ^

I[119]
unary-operator :=  - ^

I[120]
unary-operator :=  + ^

I[121]
unary-operator :=  * ^

I[122]
unary-operator :=  & ^

I[123]
composite-statement :=  { } ^

I[124]
type-specifier :=  ^ void
type-specifier :=  ^ char
type-specifier :=  ^ short
type-specifier :=  ^ int
type-specifier :=  ^ long
type-specifier :=  ^ float
type-specifier :=  ^ double
type-specifier :=  ^ signed
type-specifier :=  ^ unsigned
type-specifier :=  ^ struct-or-union-specifier
type-specifier :=  ^ enum-specifier
type-specifier :=  ^ identifier
type-qualifier :=  ^ const
type-qualifier :=  ^ volatile
struct-or-union-specifier :=  ^ struct-or-union identifier { struct-declaration-list }
struct-or-union-specifier :=  ^ struct-or-union { struct-declaration-list }
struct-or-union-specifier :=  ^ struct-or-union identifier
enum-specifier :=  ^ enum identifier { enumerator-list }
enum-specifier :=  ^ enum { enumerator-list }
enum-specifier :=  ^ enum identifier
struct-or-union :=  ^ struct
struct-or-union :=  ^ union
expression :=  ^ assignment-expression
expression :=  ^ expression , assignment-expression
assignment-expression :=  ^ condition-expression
assignment-expression :=  ^ unary-expression assignment-operator assignment-expression
condition-expression :=  ^ logical-OR-expression
condition-expression :=  ^ logical-OR-expression ? expression : condition-expression
unary-expression :=  ^ postfix-expression
unary-expression :=  ^ ++ unary-expression
unary-expression :=  ^ -- unary-expression
unary-expression :=  ^ unary-operator cast-expression
unary-expression :=  ^ sizeof unary-expression
unary-expression :=  ^ sizeof ( type-name )
logical-OR-expression :=  ^ logical-AND-expression
logical-OR-expression :=  ^ logical-OR-expression || logical-AND-expression
postfix-expression :=  ^ primary-expression
postfix-expression :=  ^ postfix-expression [ expression ]
postfix-expression :=  ^ postfix-expression ( argument-expression-list )
postfix-expression :=  ^ postfix-expression ( )
postfix-expression :=  ^ postfix-expression . identifier
postfix-expression :=  ^ postfix-expression -> identifier
postfix-expression :=  ^ postfix-expression ++
postfix-expression :=  ^ postfix-expression --
unary-operator :=  ^ &
unary-operator :=  ^ *
unary-operator :=  ^ +
unary-operator :=  ^ -
unary-operator :=  ^ ~
unary-operator :=  ^ !
logical-AND-expression :=  ^ inclusive-OR-expression
logical-AND-expression :=  ^ logical-AND-expression && inclusive-OR-expression
primary-expression :=  ^ identifier
primary-expression :=  ^ char-const
primary-expression :=  ^ float-const
primary-expression :=  ^ string-const
primary-expression :=  ^ int-const
primary-expression :=  ^ ( expression )
inclusive-OR-expression :=  ^ exclusive-OR-expression
inclusive-OR-expression :=  ^ inclusive-OR-expression | exclusive-OR-expression
exclusive-OR-expression :=  ^ AND-expression
exclusive-OR-expression :=  ^ exclusive-OR-expression ^ AND-expression
AND-expression :=  ^ equality-expression
AND-expression :=  ^ AND-expression & equality-expression
equality-expression :=  ^ relational-expression
equality-expression :=  ^ equality-expression equality-operator relational-expression
relational-expression :=  ^ shift-expression
relational-expression :=  ^ relational-expression relational-operator shift-expression
shift-expression :=  ^ additive-expression
shift-expression :=  ^ shift-expression shift-operator additive-expression
additive-expression :=  ^ multiplicative-expression
additive-expression :=  ^ additive-expression additive-operator multiplicative-expression
multiplicative-expression :=  ^ cast-expression
multiplicative-expression :=  ^ multiplicative-expression multiplicative-operator cast-expression
cast-expression :=  ^ unary-expression
cast-expression :=  ^ ( type-name ) cast-expression
specifier-qualifier-list :=  ^ type-qualifier specifier-qualifier-list
specifier-qualifier-list :=  ^ type-qualifier
specifier-qualifier-list :=  ^ type-specifier specifier-qualifier-list
specifier-qualifier-list :=  ^ type-specifier
primary-expression :=  ( ^ expression )
cast-expression :=  ( ^ type-name ) cast-expression
type-name :=  ^ specifier-qualifier-list abstract-declarator
type-name :=  ^ specifier-qualifier-list

I[125]
expression-statement :=  ; ^

I[126]
type-specifier :=  ^ void
type-specifier :=  ^ char
type-specifier :=  ^ short
type-specifier :=  ^ int
type-specifier :=  ^ long
type-specifier :=  ^ float
type-specifier :=  ^ double
type-specifier :=  ^ signed
type-specifier :=  ^ unsigned
type-specifier :=  ^ struct-or-union-specifier
type-specifier :=  ^ enum-specifier
type-specifier :=  ^ identifier
type-qualifier :=  ^ const
type-qualifier :=  ^ volatile
struct-or-union-specifier :=  ^ struct-or-union identifier { struct-declaration-list }
struct-or-union-specifier :=  ^ struct-or-union { struct-declaration-list }
struct-or-union-specifier :=  ^ struct-or-union identifier
enum-specifier :=  ^ enum identifier { enumerator-list }
enum-specifier :=  ^ enum { enumerator-list }
enum-specifier :=  ^ enum identifier
struct-or-union :=  ^ struct
struct-or-union :=  ^ union
struct-declaration-list :=  ^ struct-declaration
struct-declaration-list :=  ^ struct-declaration-list struct-declaration
struct-declaration :=  ^ specifier-qualifier-list struct-declarator-list
specifier-qualifier-list :=  ^ type-qualifier specifier-qualifier-list
specifier-qualifier-list :=  ^ type-qualifier
specifier-qualifier-list :=  ^ type-specifier specifier-qualifier-list
specifier-qualifier-list :=  ^ type-specifier
struct-or-union-specifier :=  struct-or-union identifier { ^ struct-declaration-list }

I[127]
type-specifier :=  ^ void
type-specifier :=  ^ char
type-specifier :=  ^ short
type-specifier :=  ^ int
type-specifier :=  ^ long
type-specifier :=  ^ float
type-specifier :=  ^ double
type-specifier :=  ^ signed
type-specifier :=  ^ unsigned
type-specifier :=  ^ struct-or-union-specifier
type-specifier :=  ^ enum-specifier
type-specifier :=  ^ identifier
type-qualifier :=  ^ const
type-qualifier :=  ^ volatile
struct-or-union-specifier :=  ^ struct-or-union identifier { struct-declaration-list }
struct-or-union-specifier :=  ^ struct-or-union { struct-declaration-list }
struct-or-union-specifier :=  ^ struct-or-union identifier
enum-specifier :=  ^ enum identifier { enumerator-list }
enum-specifier :=  ^ enum { enumerator-list }
enum-specifier :=  ^ enum identifier
struct-or-union :=  ^ struct
struct-or-union :=  ^ union
specifier-qualifier-list :=  ^ type-qualifier specifier-qualifier-list
specifier-qualifier-list :=  ^ type-qualifier
specifier-qualifier-list :=  ^ type-specifier specifier-qualifier-list
specifier-qualifier-list :=  ^ type-specifier
specifier-qualifier-list :=  type-specifier ^ specifier-qualifier-list
specifier-qualifier-list :=  type-specifier ^

I[128]
type-specifier :=  ^ void
type-specifier :=  ^ char
type-specifier :=  ^ short
type-specifier :=  ^ int
type-specifier :=  ^ long
type-specifier :=  ^ float
type-specifier :=  ^ double
type-specifier :=  ^ signed
type-specifier :=  ^ unsigned
type-specifier :=  ^ struct-or-union-specifier
type-specifier :=  ^ enum-specifier
type-specifier :=  ^ identifier
type-qualifier :=  ^ const
type-qualifier :=  ^ volatile
struct-or-union-specifier :=  ^ struct-or-union identifier { struct-declaration-list }
struct-or-union-specifier :=  ^ struct-or-union { struct-declaration-list }
struct-or-union-specifier :=  ^ struct-or-union identifier
enum-specifier :=  ^ enum identifier { enumerator-list }
enum-specifier :=  ^ enum { enumerator-list }
enum-specifier :=  ^ enum identifier
struct-or-union :=  ^ struct
struct-or-union :=  ^ union
specifier-qualifier-list :=  ^ type-qualifier specifier-qualifier-list
specifier-qualifier-list :=  ^ type-qualifier
specifier-qualifier-list :=  ^ type-specifier specifier-qualifier-list
specifier-qualifier-list :=  ^ type-specifier
specifier-qualifier-list :=  type-qualifier ^ specifier-qualifier-list
specifier-qualifier-list :=  type-qualifier ^

I[129]
type-specifier :=  ^ void
type-specifier :=  ^ char
type-specifier :=  ^ short
type-specifier :=  ^ int
type-specifier :=  ^ long
type-specifier :=  ^ float
type-specifier :=  ^ double
type-specifier :=  ^ signed
type-specifier :=  ^ unsigned
type-specifier :=  ^ struct-or-union-specifier
type-specifier :=  ^ enum-specifier
type-specifier :=  ^ identifier
type-qualifier :=  ^ const
type-qualifier :=  ^ volatile
struct-or-union-specifier :=  ^ struct-or-union identifier { struct-declaration-list }
struct-or-union-specifier :=  ^ struct-or-union { struct-declaration-list }
struct-or-union-specifier :=  ^ struct-or-union identifier
enum-specifier :=  ^ enum identifier { enumerator-list }
enum-specifier :=  ^ enum { enumerator-list }
enum-specifier :=  ^ enum identifier
struct-or-union :=  ^ struct
struct-or-union :=  ^ union
struct-declaration :=  ^ specifier-qualifier-list struct-declarator-list
specifier-qualifier-list :=  ^ type-qualifier specifier-qualifier-list
specifier-qualifier-list :=  ^ type-qualifier
specifier-qualifier-list :=  ^ type-specifier specifier-qualifier-list
specifier-qualifier-list :=  ^ type-specifier
struct-or-union-specifier :=  struct-or-union { struct-declaration-list ^ }
struct-declaration-list :=  struct-declaration-list ^ struct-declaration

I[130]
struct-declaration-list :=  struct-declaration ^

I[131]
declarator :=  ^ pointer direct-declarator
declarator :=  ^ direct-declarator
pointer :=  ^ * type-qualifier-list pointer
pointer :=  ^ * type-qualifier-list
pointer :=  ^ * pointer
pointer :=  ^ *
direct-declarator :=  ^ identifier
direct-declarator :=  ^ ( declarator )
direct-declarator :=  ^ direct-declarator [ constant-expression ]
direct-declarator :=  ^ direct-declarator [ ]
direct-declarator :=  ^ direct-declarator ( parameter-type-list )
direct-declarator :=  ^ direct-declarator ( identifier-list )
direct-declarator :=  ^ direct-declarator ( )
struct-declaration :=  specifier-qualifier-list ^ struct-declarator-list
struct-declarator-list :=  ^ struct-declarator
struct-declarator-list :=  ^ struct-declarator-list struct-declarator
struct-declarator :=  ^ declarator
struct-declarator :=  ^ declarator : constant-expression
struct-declarator :=  ^ : constant-expression

I[132]
direct-declarator :=  direct-declarator [ constant-expression ^ ]

I[133]
constant-expression :=  condition-expression ^

I[134]
cast-expression :=  unary-expression ^

I[135]
primary-expression :=  identifier ^

I[136]
direct-declarator :=  direct-declarator [ ] ^

I[137]
declarator :=  ^ pointer direct-declarator
declarator :=  ^ direct-declarator
pointer :=  ^ * type-qualifier-list pointer
pointer :=  ^ * type-qualifier-list
pointer :=  ^ * pointer
pointer :=  ^ *
direct-declarator :=  ^ identifier
direct-declarator :=  ^ ( declarator )
direct-declarator :=  ^ direct-declarator [ constant-expression ]
direct-declarator :=  ^ direct-declarator [ ]
direct-declarator :=  ^ direct-declarator ( parameter-type-list )
direct-declarator :=  ^ direct-declarator ( identifier-list )
direct-declarator :=  ^ direct-declarator ( )
parameter-declarator :=  declaration-specifier ^ declarator
parameter-declarator :=  declaration-specifier ^ abstract-declarator
parameter-declarator :=  declaration-specifier ^
abstract-declarator :=  ^ pointer
abstract-declarator :=  ^ pointer direct-abstract-declarator
abstract-declarator :=  ^ direct-abstract-declarator
direct-abstract-declarator :=  ^ ( abstract-declarator )
direct-abstract-declarator :=  ^ direct-abstract-declarator [ constant-expression ]
direct-abstract-declarator :=  ^ direct-abstract-declarator [ ]
direct-abstract-declarator :=  ^ [ constant-expression ]
direct-abstract-declarator :=  ^ [ ]
direct-abstract-declarator :=  ^ direct-abstract-declarator ( parameter-type-list )
direct-abstract-declarator :=  ^ direct-abstract-declarator ( )
direct-abstract-declarator :=  ^ ( parameter-type-list )
direct-abstract-declarator :=  ^ ( )

I[138]
direct-declarator :=  direct-declarator ( parameter-type-list ^ )

I[139]
direct-declarator :=  direct-declarator ( identifier-list ^ )
identifier-list :=  identifier-list ^ , identifier

I[140]
parameter-type-list :=  parameter-list ^
parameter-type-list :=  parameter-list ^ , . . .
parameter-list :=  parameter-list ^ , parameter-declarator

I[141]
parameter-list :=  parameter-declarator ^

I[142]
type-specifier :=  identifier ^
identifier-list :=  identifier ^

I[143]
direct-declarator :=  direct-declarator ( ) ^

I[144]
enumerator-list :=  ^ enumerator
enumerator-list :=  ^ enumerator-list enumerator
enumerator :=  ^ identifier
enumerator :=  ^ identifier = constant-expression
enum-specifier :=  enum identifier { ^ enumerator-list }

I[145]
enumerator :=  ^ identifier
enumerator :=  ^ identifier = constant-expression
enum-specifier :=  enum { enumerator-list ^ }
enumerator-list :=  enumerator-list ^ enumerator

I[146]
enumerator-list :=  enumerator ^

I[147]
enumerator :=  identifier ^
enumerator :=  identifier ^ = constant-expression

I[148]
direct-declarator :=  ( declarator ) ^

I[149]
type-qualifier-list :=  type-qualifier-list type-qualifier ^

I[150]
pointer :=  * type-qualifier-list pointer ^

I[151]
function-definition :=  declaration-specifier declarator declaration-list composite-statement ^

I[152]
init-declarator :=  declarator = initializer ^

I[153]
initializer :=  assignment-expression ^

I[154]
assignment-expression :=  ^ condition-expression
assignment-expression :=  ^ unary-expression assignment-operator assignment-expression
condition-expression :=  ^ logical-OR-expression
condition-expression :=  ^ logical-OR-expression ? expression : condition-expression
unary-expression :=  ^ postfix-expression
unary-expression :=  ^ ++ unary-expression
unary-expression :=  ^ -- unary-expression
unary-expression :=  ^ unary-operator cast-expression
unary-expression :=  ^ sizeof unary-expression
unary-expression :=  ^ sizeof ( type-name )
logical-OR-expression :=  ^ logical-AND-expression
logical-OR-expression :=  ^ logical-OR-expression || logical-AND-expression
postfix-expression :=  ^ primary-expression
postfix-expression :=  ^ postfix-expression [ expression ]
postfix-expression :=  ^ postfix-expression ( argument-expression-list )
postfix-expression :=  ^ postfix-expression ( )
postfix-expression :=  ^ postfix-expression . identifier
postfix-expression :=  ^ postfix-expression -> identifier
postfix-expression :=  ^ postfix-expression ++
postfix-expression :=  ^ postfix-expression --
unary-operator :=  ^ &
unary-operator :=  ^ *
unary-operator :=  ^ +
unary-operator :=  ^ -
unary-operator :=  ^ ~
unary-operator :=  ^ !
logical-AND-expression :=  ^ inclusive-OR-expression
logical-AND-expression :=  ^ logical-AND-expression && inclusive-OR-expression
primary-expression :=  ^ identifier
primary-expression :=  ^ char-const
primary-expression :=  ^ float-const
primary-expression :=  ^ string-const
primary-expression :=  ^ int-const
primary-expression :=  ^ ( expression )
inclusive-OR-expression :=  ^ exclusive-OR-expression
inclusive-OR-expression :=  ^ inclusive-OR-expression | exclusive-OR-expression
exclusive-OR-expression :=  ^ AND-expression
exclusive-OR-expression :=  ^ exclusive-OR-expression ^ AND-expression
AND-expression :=  ^ equality-expression
AND-expression :=  ^ AND-expression & equality-expression
equality-expression :=  ^ relational-expression
equality-expression :=  ^ equality-expression equality-operator relational-expression
relational-expression :=  ^ shift-expression
relational-expression :=  ^ relational-expression relational-operator shift-expression
shift-expression :=  ^ additive-expression
shift-expression :=  ^ shift-expression shift-operator additive-expression
additive-expression :=  ^ multiplicative-expression
additive-expression :=  ^ additive-expression additive-operator multiplicative-expression
multiplicative-expression :=  ^ cast-expression
multiplicative-expression :=  ^ multiplicative-expression multiplicative-operator cast-expression
cast-expression :=  ^ unary-expression
cast-expression :=  ^ ( type-name ) cast-expression
initializer :=  ^ assignment-expression
initializer :=  ^ { initializer-list }
initializer :=  ^ { initializer-list , }
initializer :=  { ^ initializer-list }
initializer :=  { ^ initializer-list , }
initializer-list :=  ^ initializer
initializer-list :=  ^ initializer-list , initializer

I[155]
composite-statement :=  ^ { declaration-list statement-list }
composite-statement :=  ^ { declaration-list }
composite-statement :=  ^ { statement-list }
composite-statement :=  ^ { }
statement :=  ^ labeled-statement
statement :=  ^ expression-statement
statement :=  ^ composite-statement
statement :=  ^ seletion-statement
statement :=  ^ iteration-statement
statement :=  ^ jump-statement
labeled-statement :=  ^ identifier : statement
labeled-statement :=  ^ case constant-expression : statement
labeled-statement :=  ^ default : statement
expression-statement :=  ^ expression ;
expression-statement :=  ^ ;
seletion-statement :=  ^ if ( expression ) statement
seletion-statement :=  ^ if ( expression ) statement else statement
seletion-statement :=  ^ switch ( expression ) statement
iteration-statement :=  ^ while ( expression ) statement
iteration-statement :=  ^ do statement while ( expression ) ;
iteration-statement :=  ^ for ( expression ; expression ; expression ) statement
iteration-statement :=  ^ for ( expression ; expression ; ) statement
iteration-statement :=  ^ for ( expression ; ; expression ) statement
iteration-statement :=  ^ for ( expression ; ; ) statement
iteration-statement :=  ^ for ( ; expression ; expression ) statement
iteration-statement :=  ^ for ( ; expression ; ) statement
iteration-statement :=  ^ for ( ; ; expression ) statement
iteration-statement :=  ^ for ( ; ; ) statement
jump-statement :=  ^ goto identifier ;
jump-statement :=  ^ return expression ;
jump-statement :=  ^ return ;
jump-statement :=  ^ continue ;
jump-statement :=  ^ break ;
expression :=  ^ assignment-expression
expression :=  ^ expression , assignment-expression
assignment-expression :=  ^ condition-expression
assignment-expression :=  ^ unary-expression assignment-operator assignment-expression
condition-expression :=  ^ logical-OR-expression
condition-expression :=  ^ logical-OR-expression ? expression : condition-expression
unary-expression :=  ^ postfix-expression
unary-expression :=  ^ ++ unary-expression
unary-expression :=  ^ -- unary-expression
unary-expression :=  ^ unary-operator cast-expression
unary-expression :=  ^ sizeof unary-expression
unary-expression :=  ^ sizeof ( type-name )
logical-OR-expression :=  ^ logical-AND-expression
logical-OR-expression :=  ^ logical-OR-expression || logical-AND-expression
postfix-expression :=  ^ primary-expression
postfix-expression :=  ^ postfix-expression [ expression ]
postfix-expression :=  ^ postfix-expression ( argument-expression-list )
postfix-expression :=  ^ postfix-expression ( )
postfix-expression :=  ^ postfix-expression . identifier
postfix-expression :=  ^ postfix-expression -> identifier
postfix-expression :=  ^ postfix-expression ++
postfix-expression :=  ^ postfix-expression --
unary-operator :=  ^ &
unary-operator :=  ^ *
unary-operator :=  ^ +
unary-operator :=  ^ -
unary-operator :=  ^ ~
unary-operator :=  ^ !
logical-AND-expression :=  ^ inclusive-OR-expression
logical-AND-expression :=  ^ logical-AND-expression && inclusive-OR-expression
primary-expression :=  ^ identifier
primary-expression :=  ^ char-const
primary-expression :=  ^ float-const
primary-expression :=  ^ string-const
primary-expression :=  ^ int-const
primary-expression :=  ^ ( expression )
inclusive-OR-expression :=  ^ exclusive-OR-expression
inclusive-OR-expression :=  ^ inclusive-OR-expression | exclusive-OR-expression
exclusive-OR-expression :=  ^ AND-expression
exclusive-OR-expression :=  ^ exclusive-OR-expression ^ AND-expression
AND-expression :=  ^ equality-expression
AND-expression :=  ^ AND-expression & equality-expression
equality-expression :=  ^ relational-expression
equality-expression :=  ^ equality-expression equality-operator relational-expression
relational-expression :=  ^ shift-expression
relational-expression :=  ^ relational-expression relational-operator shift-expression
shift-expression :=  ^ additive-expression
shift-expression :=  ^ shift-expression shift-operator additive-expression
additive-expression :=  ^ multiplicative-expression
additive-expression :=  ^ additive-expression additive-operator multiplicative-expression
multiplicative-expression :=  ^ cast-expression
multiplicative-expression :=  ^ multiplicative-expression multiplicative-operator cast-expression
cast-expression :=  ^ unary-expression
cast-expression :=  ^ ( type-name ) cast-expression
statement-list :=  statement-list ^ statement
composite-statement :=  { declaration-list statement-list ^ }

I[156]
composite-statement :=  { declaration-list } ^

I[157]
assignment-expression :=  ^ condition-expression
assignment-expression :=  ^ unary-expression assignment-operator assignment-expression
condition-expression :=  ^ logical-OR-expression
condition-expression :=  ^ logical-OR-expression ? expression : condition-expression
unary-expression :=  ^ postfix-expression
unary-expression :=  ^ ++ unary-expression
unary-expression :=  ^ -- unary-expression
unary-expression :=  ^ unary-operator cast-expression
unary-expression :=  ^ sizeof unary-expression
unary-expression :=  ^ sizeof ( type-name )
logical-OR-expression :=  ^ logical-AND-expression
logical-OR-expression :=  ^ logical-OR-expression || logical-AND-expression
postfix-expression :=  ^ primary-expression
postfix-expression :=  ^ postfix-expression [ expression ]
postfix-expression :=  ^ postfix-expression ( argument-expression-list )
postfix-expression :=  ^ postfix-expression ( )
postfix-expression :=  ^ postfix-expression . identifier
postfix-expression :=  ^ postfix-expression -> identifier
postfix-expression :=  ^ postfix-expression ++
postfix-expression :=  ^ postfix-expression --
unary-operator :=  ^ &
unary-operator :=  ^ *
unary-operator :=  ^ +
unary-operator :=  ^ -
unary-operator :=  ^ ~
unary-operator :=  ^ !
logical-AND-expression :=  ^ inclusive-OR-expression
logical-AND-expression :=  ^ logical-AND-expression && inclusive-OR-expression
primary-expression :=  ^ identifier
primary-expression :=  ^ char-const
primary-expression :=  ^ float-const
primary-expression :=  ^ string-const
primary-expression :=  ^ int-const
primary-expression :=  ^ ( expression )
inclusive-OR-expression :=  ^ exclusive-OR-expression
inclusive-OR-expression :=  ^ inclusive-OR-expression | exclusive-OR-expression
exclusive-OR-expression :=  ^ AND-expression
exclusive-OR-expression :=  ^ exclusive-OR-expression ^ AND-expression
AND-expression :=  ^ equality-expression
AND-expression :=  ^ AND-expression & equality-expression
equality-expression :=  ^ relational-expression
equality-expression :=  ^ equality-expression equality-operator relational-expression
relational-expression :=  ^ shift-expression
relational-expression :=  ^ relational-expression relational-operator shift-expression
shift-expression :=  ^ additive-expression
shift-expression :=  ^ shift-expression shift-operator additive-expression
additive-expression :=  ^ multiplicative-expression
additive-expression :=  ^ additive-expression additive-operator multiplicative-expression
multiplicative-expression :=  ^ cast-expression
multiplicative-expression :=  ^ multiplicative-expression multiplicative-operator cast-expression
cast-expression :=  ^ unary-expression
cast-expression :=  ^ ( type-name ) cast-expression
expression :=  expression , ^ assignment-expression

I[158]
expression-statement :=  expression ; ^

I[159]
statement-list :=  statement-list statement ^

I[160]
labeled-statement :=  identifier ^ : statement
primary-expression :=  identifier ^

I[161]
composite-statement :=  { statement-list } ^

I[162]
unary-expression :=  ^ postfix-expression
unary-expression :=  ^ ++ unary-expression
unary-expression :=  ^ -- unary-expression
unary-expression :=  ^ unary-operator cast-expression
unary-expression :=  ^ sizeof unary-expression
unary-expression :=  ^ sizeof ( type-name )
postfix-expression :=  ^ primary-expression
postfix-expression :=  ^ postfix-expression [ expression ]
postfix-expression :=  ^ postfix-expression ( argument-expression-list )
postfix-expression :=  ^ postfix-expression ( )
postfix-expression :=  ^ postfix-expression . identifier
postfix-expression :=  ^ postfix-expression -> identifier
postfix-expression :=  ^ postfix-expression ++
postfix-expression :=  ^ postfix-expression --
unary-operator :=  ^ &
unary-operator :=  ^ *
unary-operator :=  ^ +
unary-operator :=  ^ -
unary-operator :=  ^ ~
unary-operator :=  ^ !
logical-AND-expression :=  ^ inclusive-OR-expression
logical-AND-expression :=  ^ logical-AND-expression && inclusive-OR-expression
primary-expression :=  ^ identifier
primary-expression :=  ^ char-const
primary-expression :=  ^ float-const
primary-expression :=  ^ string-const
primary-expression :=  ^ int-const
primary-expression :=  ^ ( expression )
inclusive-OR-expression :=  ^ exclusive-OR-expression
inclusive-OR-expression :=  ^ inclusive-OR-expression | exclusive-OR-expression
exclusive-OR-expression :=  ^ AND-expression
exclusive-OR-expression :=  ^ exclusive-OR-expression ^ AND-expression
AND-expression :=  ^ equality-expression
AND-expression :=  ^ AND-expression & equality-expression
equality-expression :=  ^ relational-expression
equality-expression :=  ^ equality-expression equality-operator relational-expression
relational-expression :=  ^ shift-expression
relational-expression :=  ^ relational-expression relational-operator shift-expression
shift-expression :=  ^ additive-expression
shift-expression :=  ^ shift-expression shift-operator additive-expression
additive-expression :=  ^ multiplicative-expression
additive-expression :=  ^ additive-expression additive-operator multiplicative-expression
multiplicative-expression :=  ^ cast-expression
multiplicative-expression :=  ^ multiplicative-expression multiplicative-operator cast-expression
cast-expression :=  ^ unary-expression
cast-expression :=  ^ ( type-name ) cast-expression
logical-OR-expression :=  logical-OR-expression || ^ logical-AND-expression

I[163]
expression :=  ^ assignment-expression
expression :=  ^ expression , assignment-expression
assignment-expression :=  ^ condition-expression
assignment-expression :=  ^ unary-expression assignment-operator assignment-expression
condition-expression :=  ^ logical-OR-expression
condition-expression :=  ^ logical-OR-expression ? expression : condition-expression
unary-expression :=  ^ postfix-expression
unary-expression :=  ^ ++ unary-expression
unary-expression :=  ^ -- unary-expression
unary-expression :=  ^ unary-operator cast-expression
unary-expression :=  ^ sizeof unary-expression
unary-expression :=  ^ sizeof ( type-name )
logical-OR-expression :=  ^ logical-AND-expression
logical-OR-expression :=  ^ logical-OR-expression || logical-AND-expression
postfix-expression :=  ^ primary-expression
postfix-expression :=  ^ postfix-expression [ expression ]
postfix-expression :=  ^ postfix-expression ( argument-expression-list )
postfix-expression :=  ^ postfix-expression ( )
postfix-expression :=  ^ postfix-expression . identifier
postfix-expression :=  ^ postfix-expression -> identifier
postfix-expression :=  ^ postfix-expression ++
postfix-expression :=  ^ postfix-expression --
unary-operator :=  ^ &
unary-operator :=  ^ *
unary-operator :=  ^ +
unary-operator :=  ^ -
unary-operator :=  ^ ~
unary-operator :=  ^ !
logical-AND-expression :=  ^ inclusive-OR-expression
logical-AND-expression :=  ^ logical-AND-expression && inclusive-OR-expression
primary-expression :=  ^ identifier
primary-expression :=  ^ char-const
primary-expression :=  ^ float-const
primary-expression :=  ^ string-const
primary-expression :=  ^ int-const
primary-expression :=  ^ ( expression )
inclusive-OR-expression :=  ^ exclusive-OR-expression
inclusive-OR-expression :=  ^ inclusive-OR-expression | exclusive-OR-expression
exclusive-OR-expression :=  ^ AND-expression
exclusive-OR-expression :=  ^ exclusive-OR-expression ^ AND-expression
AND-expression :=  ^ equality-expression
AND-expression :=  ^ AND-expression & equality-expression
equality-expression :=  ^ relational-expression
equality-expression :=  ^ equality-expression equality-operator relational-expression
relational-expression :=  ^ shift-expression
relational-expression :=  ^ relational-expression relational-operator shift-expression
shift-expression :=  ^ additive-expression
shift-expression :=  ^ shift-expression shift-operator additive-expression
additive-expression :=  ^ multiplicative-expression
additive-expression :=  ^ additive-expression additive-operator multiplicative-expression
multiplicative-expression :=  ^ cast-expression
multiplicative-expression :=  ^ multiplicative-expression multiplicative-operator cast-expression
cast-expression :=  ^ unary-expression
cast-expression :=  ^ ( type-name ) cast-expression
condition-expression :=  logical-OR-expression ? ^ expression : condition-expression

I[164]
unary-expression :=  ^ postfix-expression
unary-expression :=  ^ ++ unary-expression
unary-expression :=  ^ -- unary-expression
unary-expression :=  ^ unary-operator cast-expression
unary-expression :=  ^ sizeof unary-expression
unary-expression :=  ^ sizeof ( type-name )
postfix-expression :=  ^ primary-expression
postfix-expression :=  ^ postfix-expression [ expression ]
postfix-expression :=  ^ postfix-expression ( argument-expression-list )
postfix-expression :=  ^ postfix-expression ( )
postfix-expression :=  ^ postfix-expression . identifier
postfix-expression :=  ^ postfix-expression -> identifier
postfix-expression :=  ^ postfix-expression ++
postfix-expression :=  ^ postfix-expression --
unary-operator :=  ^ &
unary-operator :=  ^ *
unary-operator :=  ^ +
unary-operator :=  ^ -
unary-operator :=  ^ ~
unary-operator :=  ^ !
primary-expression :=  ^ identifier
primary-expression :=  ^ char-const
primary-expression :=  ^ float-const
primary-expression :=  ^ string-const
primary-expression :=  ^ int-const
primary-expression :=  ^ ( expression )
inclusive-OR-expression :=  ^ exclusive-OR-expression
inclusive-OR-expression :=  ^ inclusive-OR-expression | exclusive-OR-expression
exclusive-OR-expression :=  ^ AND-expression
exclusive-OR-expression :=  ^ exclusive-OR-expression ^ AND-expression
AND-expression :=  ^ equality-expression
AND-expression :=  ^ AND-expression & equality-expression
equality-expression :=  ^ relational-expression
equality-expression :=  ^ equality-expression equality-operator relational-expression
relational-expression :=  ^ shift-expression
relational-expression :=  ^ relational-expression relational-operator shift-expression
shift-expression :=  ^ additive-expression
shift-expression :=  ^ shift-expression shift-operator additive-expression
additive-expression :=  ^ multiplicative-expression
additive-expression :=  ^ additive-expression additive-operator multiplicative-expression
multiplicative-expression :=  ^ cast-expression
multiplicative-expression :=  ^ multiplicative-expression multiplicative-operator cast-expression
cast-expression :=  ^ unary-expression
cast-expression :=  ^ ( type-name ) cast-expression
logical-AND-expression :=  logical-AND-expression && ^ inclusive-OR-expression

I[165]
unary-expression :=  ^ postfix-expression
unary-expression :=  ^ ++ unary-expression
unary-expression :=  ^ -- unary-expression
unary-expression :=  ^ unary-operator cast-expression
unary-expression :=  ^ sizeof unary-expression
unary-expression :=  ^ sizeof ( type-name )
postfix-expression :=  ^ primary-expression
postfix-expression :=  ^ postfix-expression [ expression ]
postfix-expression :=  ^ postfix-expression ( argument-expression-list )
postfix-expression :=  ^ postfix-expression ( )
postfix-expression :=  ^ postfix-expression . identifier
postfix-expression :=  ^ postfix-expression -> identifier
postfix-expression :=  ^ postfix-expression ++
postfix-expression :=  ^ postfix-expression --
unary-operator :=  ^ &
unary-operator :=  ^ *
unary-operator :=  ^ +
unary-operator :=  ^ -
unary-operator :=  ^ ~
unary-operator :=  ^ !
primary-expression :=  ^ identifier
primary-expression :=  ^ char-const
primary-expression :=  ^ float-const
primary-expression :=  ^ string-const
primary-expression :=  ^ int-const
primary-expression :=  ^ ( expression )
exclusive-OR-expression :=  ^ AND-expression
exclusive-OR-expression :=  ^ exclusive-OR-expression ^ AND-expression
AND-expression :=  ^ equality-expression
AND-expression :=  ^ AND-expression & equality-expression
equality-expression :=  ^ relational-expression
equality-expression :=  ^ equality-expression equality-operator relational-expression
relational-expression :=  ^ shift-expression
relational-expression :=  ^ relational-expression relational-operator shift-expression
shift-expression :=  ^ additive-expression
shift-expression :=  ^ shift-expression shift-operator additive-expression
additive-expression :=  ^ multiplicative-expression
additive-expression :=  ^ additive-expression additive-operator multiplicative-expression
multiplicative-expression :=  ^ cast-expression
multiplicative-expression :=  ^ multiplicative-expression multiplicative-operator cast-expression
cast-expression :=  ^ unary-expression
cast-expression :=  ^ ( type-name ) cast-expression
inclusive-OR-expression :=  inclusive-OR-expression | ^ exclusive-OR-expression

I[166]
unary-expression :=  ^ postfix-expression
unary-expression :=  ^ ++ unary-expression
unary-expression :=  ^ -- unary-expression
unary-expression :=  ^ unary-operator cast-expression
unary-expression :=  ^ sizeof unary-expression
unary-expression :=  ^ sizeof ( type-name )
postfix-expression :=  ^ primary-expression
postfix-expression :=  ^ postfix-expression [ expression ]
postfix-expression :=  ^ postfix-expression ( argument-expression-list )
postfix-expression :=  ^ postfix-expression ( )
postfix-expression :=  ^ postfix-expression . identifier
postfix-expression :=  ^ postfix-expression -> identifier
postfix-expression :=  ^ postfix-expression ++
postfix-expression :=  ^ postfix-expression --
unary-operator :=  ^ &
unary-operator :=  ^ *
unary-operator :=  ^ +
unary-operator :=  ^ -
unary-operator :=  ^ ~
unary-operator :=  ^ !
primary-expression :=  ^ identifier
primary-expression :=  ^ char-const
primary-expression :=  ^ float-const
primary-expression :=  ^ string-const
primary-expression :=  ^ int-const
primary-expression :=  ^ ( expression )
AND-expression :=  ^ equality-expression
AND-expression :=  ^ AND-expression & equality-expression
equality-expression :=  ^ relational-expression
equality-expression :=  ^ equality-expression equality-operator relational-expression
relational-expression :=  ^ shift-expression
relational-expression :=  ^ relational-expression relational-operator shift-expression
shift-expression :=  ^ additive-expression
shift-expression :=  ^ shift-expression shift-operator additive-expression
additive-expression :=  ^ multiplicative-expression
additive-expression :=  ^ additive-expression additive-operator multiplicative-expression
multiplicative-expression :=  ^ cast-expression
multiplicative-expression :=  ^ multiplicative-expression multiplicative-operator cast-expression
cast-expression :=  ^ unary-expression
cast-expression :=  ^ ( type-name ) cast-expression
exclusive-OR-expression :=  exclusive-OR-expression ^ ^ AND-expression

I[167]
assignment-expression :=  ^ condition-expression
assignment-expression :=  ^ unary-expression assignment-operator assignment-expression
condition-expression :=  ^ logical-OR-expression
condition-expression :=  ^ logical-OR-expression ? expression : condition-expression
unary-expression :=  ^ postfix-expression
unary-expression :=  ^ ++ unary-expression
unary-expression :=  ^ -- unary-expression
unary-expression :=  ^ unary-operator cast-expression
unary-expression :=  ^ sizeof unary-expression
unary-expression :=  ^ sizeof ( type-name )
logical-OR-expression :=  ^ logical-AND-expression
logical-OR-expression :=  ^ logical-OR-expression || logical-AND-expression
postfix-expression :=  ^ primary-expression
postfix-expression :=  ^ postfix-expression [ expression ]
postfix-expression :=  ^ postfix-expression ( argument-expression-list )
postfix-expression :=  ^ postfix-expression ( )
postfix-expression :=  ^ postfix-expression . identifier
postfix-expression :=  ^ postfix-expression -> identifier
postfix-expression :=  ^ postfix-expression ++
postfix-expression :=  ^ postfix-expression --
unary-operator :=  ^ &
unary-operator :=  ^ *
unary-operator :=  ^ +
unary-operator :=  ^ -
unary-operator :=  ^ ~
unary-operator :=  ^ !
logical-AND-expression :=  ^ inclusive-OR-expression
logical-AND-expression :=  ^ logical-AND-expression && inclusive-OR-expression
primary-expression :=  ^ identifier
primary-expression :=  ^ char-const
primary-expression :=  ^ float-const
primary-expression :=  ^ string-const
primary-expression :=  ^ int-const
primary-expression :=  ^ ( expression )
inclusive-OR-expression :=  ^ exclusive-OR-expression
inclusive-OR-expression :=  ^ inclusive-OR-expression | exclusive-OR-expression
exclusive-OR-expression :=  ^ AND-expression
exclusive-OR-expression :=  ^ exclusive-OR-expression ^ AND-expression
AND-expression :=  ^ equality-expression
AND-expression :=  ^ AND-expression & equality-expression
equality-expression :=  ^ relational-expression
equality-expression :=  ^ equality-expression equality-operator relational-expression
relational-expression :=  ^ shift-expression
relational-expression :=  ^ relational-expression relational-operator shift-expression
shift-expression :=  ^ additive-expression
shift-expression :=  ^ shift-expression shift-operator additive-expression
additive-expression :=  ^ multiplicative-expression
additive-expression :=  ^ additive-expression additive-operator multiplicative-expression
multiplicative-expression :=  ^ cast-expression
multiplicative-expression :=  ^ multiplicative-expression multiplicative-operator cast-expression
cast-expression :=  ^ unary-expression
cast-expression :=  ^ ( type-name ) cast-expression
assignment-expression :=  unary-expression assignment-operator ^ assignment-expression

I[168]
assignment-operator :=  = ^

I[169]
assignment-operator :=  |= ^

I[170]
assignment-operator :=  ^= ^

I[171]
assignment-operator :=  &= ^

I[172]
assignment-operator :=  >>= ^

I[173]
assignment-operator :=  <<= ^

I[174]
assignment-operator :=  -= ^

I[175]
assignment-operator :=  += ^

I[176]
assignment-operator :=  %= ^

I[177]
assignment-operator :=  /= ^

I[178]
assignment-operator :=  *= ^

I[179]
unary-expression :=  ^ postfix-expression
unary-expression :=  ^ ++ unary-expression
unary-expression :=  ^ -- unary-expression
unary-expression :=  ^ unary-operator cast-expression
unary-expression :=  ^ sizeof unary-expression
unary-expression :=  ^ sizeof ( type-name )
postfix-expression :=  ^ primary-expression
postfix-expression :=  ^ postfix-expression [ expression ]
postfix-expression :=  ^ postfix-expression ( argument-expression-list )
postfix-expression :=  ^ postfix-expression ( )
postfix-expression :=  ^ postfix-expression . identifier
postfix-expression :=  ^ postfix-expression -> identifier
postfix-expression :=  ^ postfix-expression ++
postfix-expression :=  ^ postfix-expression --
unary-operator :=  ^ &
unary-operator :=  ^ *
unary-operator :=  ^ +
unary-operator :=  ^ -
unary-operator :=  ^ ~
unary-operator :=  ^ !
primary-expression :=  ^ identifier
primary-expression :=  ^ char-const
primary-expression :=  ^ float-const
primary-expression :=  ^ string-const
primary-expression :=  ^ int-const
primary-expression :=  ^ ( expression )
equality-expression :=  ^ relational-expression
equality-expression :=  ^ equality-expression equality-operator relational-expression
relational-expression :=  ^ shift-expression
relational-expression :=  ^ relational-expression relational-operator shift-expression
shift-expression :=  ^ additive-expression
shift-expression :=  ^ shift-expression shift-operator additive-expression
additive-expression :=  ^ multiplicative-expression
additive-expression :=  ^ additive-expression additive-operator multiplicative-expression
multiplicative-expression :=  ^ cast-expression
multiplicative-expression :=  ^ multiplicative-expression multiplicative-operator cast-expression
cast-expression :=  ^ unary-expression
cast-expression :=  ^ ( type-name ) cast-expression
AND-expression :=  AND-expression & ^ equality-expression

I[180]
unary-expression :=  ^ postfix-expression
unary-expression :=  ^ ++ unary-expression
unary-expression :=  ^ -- unary-expression
unary-expression :=  ^ unary-operator cast-expression
unary-expression :=  ^ sizeof unary-expression
unary-expression :=  ^ sizeof ( type-name )
postfix-expression :=  ^ primary-expression
postfix-expression :=  ^ postfix-expression [ expression ]
postfix-expression :=  ^ postfix-expression ( argument-expression-list )
postfix-expression :=  ^ postfix-expression ( )
postfix-expression :=  ^ postfix-expression . identifier
postfix-expression :=  ^ postfix-expression -> identifier
postfix-expression :=  ^ postfix-expression ++
postfix-expression :=  ^ postfix-expression --
unary-operator :=  ^ &
unary-operator :=  ^ *
unary-operator :=  ^ +
unary-operator :=  ^ -
unary-operator :=  ^ ~
unary-operator :=  ^ !
primary-expression :=  ^ identifier
primary-expression :=  ^ char-const
primary-expression :=  ^ float-const
primary-expression :=  ^ string-const
primary-expression :=  ^ int-const
primary-expression :=  ^ ( expression )
relational-expression :=  ^ shift-expression
relational-expression :=  ^ relational-expression relational-operator shift-expression
shift-expression :=  ^ additive-expression
shift-expression :=  ^ shift-expression shift-operator additive-expression
additive-expression :=  ^ multiplicative-expression
additive-expression :=  ^ additive-expression additive-operator multiplicative-expression
multiplicative-expression :=  ^ cast-expression
multiplicative-expression :=  ^ multiplicative-expression multiplicative-operator cast-expression
cast-expression :=  ^ unary-expression
cast-expression :=  ^ ( type-name ) cast-expression
equality-expression :=  equality-expression equality-operator ^ relational-expression

I[181]
equality-operator :=  != ^

I[182]
equality-operator :=  == ^

I[183]
unary-expression :=  ^ postfix-expression
unary-expression :=  ^ ++ unary-expression
unary-expression :=  ^ -- unary-expression
unary-expression :=  ^ unary-operator cast-expression
unary-expression :=  ^ sizeof unary-expression
unary-expression :=  ^ sizeof ( type-name )
postfix-expression :=  ^ primary-expression
postfix-expression :=  ^ postfix-expression [ expression ]
postfix-expression :=  ^ postfix-expression ( argument-expression-list )
postfix-expression :=  ^ postfix-expression ( )
postfix-expression :=  ^ postfix-expression . identifier
postfix-expression :=  ^ postfix-expression -> identifier
postfix-expression :=  ^ postfix-expression ++
postfix-expression :=  ^ postfix-expression --
unary-operator :=  ^ &
unary-operator :=  ^ *
unary-operator :=  ^ +
unary-operator :=  ^ -
unary-operator :=  ^ ~
unary-operator :=  ^ !
primary-expression :=  ^ identifier
primary-expression :=  ^ char-const
primary-expression :=  ^ float-const
primary-expression :=  ^ string-const
primary-expression :=  ^ int-const
primary-expression :=  ^ ( expression )
shift-expression :=  ^ additive-expression
shift-expression :=  ^ shift-expression shift-operator additive-expression
additive-expression :=  ^ multiplicative-expression
additive-expression :=  ^ additive-expression additive-operator multiplicative-expression
multiplicative-expression :=  ^ cast-expression
multiplicative-expression :=  ^ multiplicative-expression multiplicative-operator cast-expression
cast-expression :=  ^ unary-expression
cast-expression :=  ^ ( type-name ) cast-expression
relational-expression :=  relational-expression relational-operator ^ shift-expression

I[184]
relational-operator :=  >= ^

I[185]
relational-operator :=  <= ^

I[186]
relational-operator :=  > ^

I[187]
relational-operator :=  < ^

I[188]
unary-expression :=  ^ postfix-expression
unary-expression :=  ^ ++ unary-expression
unary-expression :=  ^ -- unary-expression
unary-expression :=  ^ unary-operator cast-expression
unary-expression :=  ^ sizeof unary-expression
unary-expression :=  ^ sizeof ( type-name )
postfix-expression :=  ^ primary-expression
postfix-expression :=  ^ postfix-expression [ expression ]
postfix-expression :=  ^ postfix-expression ( argument-expression-list )
postfix-expression :=  ^ postfix-expression ( )
postfix-expression :=  ^ postfix-expression . identifier
postfix-expression :=  ^ postfix-expression -> identifier
postfix-expression :=  ^ postfix-expression ++
postfix-expression :=  ^ postfix-expression --
unary-operator :=  ^ &
unary-operator :=  ^ *
unary-operator :=  ^ +
unary-operator :=  ^ -
unary-operator :=  ^ ~
unary-operator :=  ^ !
primary-expression :=  ^ identifier
primary-expression :=  ^ char-const
primary-expression :=  ^ float-const
primary-expression :=  ^ string-const
primary-expression :=  ^ int-const
primary-expression :=  ^ ( expression )
additive-expression :=  ^ multiplicative-expression
additive-expression :=  ^ additive-expression additive-operator multiplicative-expression
multiplicative-expression :=  ^ cast-expression
multiplicative-expression :=  ^ multiplicative-expression multiplicative-operator cast-expression
cast-expression :=  ^ unary-expression
cast-expression :=  ^ ( type-name ) cast-expression
shift-expression :=  shift-expression shift-operator ^ additive-expression

I[189]
shift-operator :=  >> ^

I[190]
shift-operator :=  << ^

I[191]
unary-expression :=  ^ postfix-expression
unary-expression :=  ^ ++ unary-expression
unary-expression :=  ^ -- unary-expression
unary-expression :=  ^ unary-operator cast-expression
unary-expression :=  ^ sizeof unary-expression
unary-expression :=  ^ sizeof ( type-name )
postfix-expression :=  ^ primary-expression
postfix-expression :=  ^ postfix-expression [ expression ]
postfix-expression :=  ^ postfix-expression ( argument-expression-list )
postfix-expression :=  ^ postfix-expression ( )
postfix-expression :=  ^ postfix-expression . identifier
postfix-expression :=  ^ postfix-expression -> identifier
postfix-expression :=  ^ postfix-expression ++
postfix-expression :=  ^ postfix-expression --
unary-operator :=  ^ &
unary-operator :=  ^ *
unary-operator :=  ^ +
unary-operator :=  ^ -
unary-operator :=  ^ ~
unary-operator :=  ^ !
primary-expression :=  ^ identifier
primary-expression :=  ^ char-const
primary-expression :=  ^ float-const
primary-expression :=  ^ string-const
primary-expression :=  ^ int-const
primary-expression :=  ^ ( expression )
multiplicative-expression :=  ^ cast-expression
multiplicative-expression :=  ^ multiplicative-expression multiplicative-operator cast-expression
cast-expression :=  ^ unary-expression
cast-expression :=  ^ ( type-name ) cast-expression
additive-expression :=  additive-expression additive-operator ^ multiplicative-expression

I[192]
additive-operator :=  - ^

I[193]
additive-operator :=  + ^

I[194]
unary-expression :=  ^ postfix-expression
unary-expression :=  ^ ++ unary-expression
unary-expression :=  ^ -- unary-expression
unary-expression :=  ^ unary-operator cast-expression
unary-expression :=  ^ sizeof unary-expression
unary-expression :=  ^ sizeof ( type-name )
postfix-expression :=  ^ primary-expression
postfix-expression :=  ^ postfix-expression [ expression ]
postfix-expression :=  ^ postfix-expression ( argument-expression-list )
postfix-expression :=  ^ postfix-expression ( )
postfix-expression :=  ^ postfix-expression . identifier
postfix-expression :=  ^ postfix-expression -> identifier
postfix-expression :=  ^ postfix-expression ++
postfix-expression :=  ^ postfix-expression --
unary-operator :=  ^ &
unary-operator :=  ^ *
unary-operator :=  ^ +
unary-operator :=  ^ -
unary-operator :=  ^ ~
unary-operator :=  ^ !
primary-expression :=  ^ identifier
primary-expression :=  ^ char-const
primary-expression :=  ^ float-const
primary-expression :=  ^ string-const
primary-expression :=  ^ int-const
primary-expression :=  ^ ( expression )
cast-expression :=  ^ unary-expression
cast-expression :=  ^ ( type-name ) cast-expression
multiplicative-expression :=  multiplicative-expression multiplicative-operator ^ cast-expression

I[195]
multiplicative-operator :=  / ^

I[196]
multiplicative-operator :=  % ^

I[197]
multiplicative-operator :=  * ^

I[198]
unary-expression :=  unary-operator cast-expression ^

I[199]
postfix-expression :=  postfix-expression ++ ^

I[200]
postfix-expression :=  postfix-expression -- ^

I[201]
postfix-expression :=  postfix-expression -> ^ identifier

I[202]
expression :=  ^ assignment-expression
expression :=  ^ expression , assignment-expression
assignment-expression :=  ^ condition-expression
assignment-expression :=  ^ unary-expression assignment-operator assignment-expression
condition-expression :=  ^ logical-OR-expression
condition-expression :=  ^ logical-OR-expression ? expression : condition-expression
unary-expression :=  ^ postfix-expression
unary-expression :=  ^ ++ unary-expression
unary-expression :=  ^ -- unary-expression
unary-expression :=  ^ unary-operator cast-expression
unary-expression :=  ^ sizeof unary-expression
unary-expression :=  ^ sizeof ( type-name )
logical-OR-expression :=  ^ logical-AND-expression
logical-OR-expression :=  ^ logical-OR-expression || logical-AND-expression
postfix-expression :=  ^ primary-expression
postfix-expression :=  ^ postfix-expression [ expression ]
postfix-expression :=  ^ postfix-expression ( argument-expression-list )
postfix-expression :=  ^ postfix-expression ( )
postfix-expression :=  ^ postfix-expression . identifier
postfix-expression :=  ^ postfix-expression -> identifier
postfix-expression :=  ^ postfix-expression ++
postfix-expression :=  ^ postfix-expression --
unary-operator :=  ^ &
unary-operator :=  ^ *
unary-operator :=  ^ +
unary-operator :=  ^ -
unary-operator :=  ^ ~
unary-operator :=  ^ !
logical-AND-expression :=  ^ inclusive-OR-expression
logical-AND-expression :=  ^ logical-AND-expression && inclusive-OR-expression
primary-expression :=  ^ identifier
primary-expression :=  ^ char-const
primary-expression :=  ^ float-const
primary-expression :=  ^ string-const
primary-expression :=  ^ int-const
primary-expression :=  ^ ( expression )
inclusive-OR-expression :=  ^ exclusive-OR-expression
inclusive-OR-expression :=  ^ inclusive-OR-expression | exclusive-OR-expression
exclusive-OR-expression :=  ^ AND-expression
exclusive-OR-expression :=  ^ exclusive-OR-expression ^ AND-expression
AND-expression :=  ^ equality-expression
AND-expression :=  ^ AND-expression & equality-expression
equality-expression :=  ^ relational-expression
equality-expression :=  ^ equality-expression equality-operator relational-expression
relational-expression :=  ^ shift-expression
relational-expression :=  ^ relational-expression relational-operator shift-expression
shift-expression :=  ^ additive-expression
shift-expression :=  ^ shift-expression shift-operator additive-expression
additive-expression :=  ^ multiplicative-expression
additive-expression :=  ^ additive-expression additive-operator multiplicative-expression
multiplicative-expression :=  ^ cast-expression
multiplicative-expression :=  ^ multiplicative-expression multiplicative-operator cast-expression
cast-expression :=  ^ unary-expression
cast-expression :=  ^ ( type-name ) cast-expression
postfix-expression :=  postfix-expression [ ^ expression ]

I[203]
assignment-expression :=  ^ condition-expression
assignment-expression :=  ^ unary-expression assignment-operator assignment-expression
condition-expression :=  ^ logical-OR-expression
condition-expression :=  ^ logical-OR-expression ? expression : condition-expression
unary-expression :=  ^ postfix-expression
unary-expression :=  ^ ++ unary-expression
unary-expression :=  ^ -- unary-expression
unary-expression :=  ^ unary-operator cast-expression
unary-expression :=  ^ sizeof unary-expression
unary-expression :=  ^ sizeof ( type-name )
logical-OR-expression :=  ^ logical-AND-expression
logical-OR-expression :=  ^ logical-OR-expression || logical-AND-expression
postfix-expression :=  ^ primary-expression
postfix-expression :=  ^ postfix-expression [ expression ]
postfix-expression :=  ^ postfix-expression ( argument-expression-list )
postfix-expression :=  ^ postfix-expression ( )
postfix-expression :=  ^ postfix-expression . identifier
postfix-expression :=  ^ postfix-expression -> identifier
postfix-expression :=  ^ postfix-expression ++
postfix-expression :=  ^ postfix-expression --
unary-operator :=  ^ &
unary-operator :=  ^ *
unary-operator :=  ^ +
unary-operator :=  ^ -
unary-operator :=  ^ ~
unary-operator :=  ^ !
logical-AND-expression :=  ^ inclusive-OR-expression
logical-AND-expression :=  ^ logical-AND-expression && inclusive-OR-expression
primary-expression :=  ^ identifier
primary-expression :=  ^ char-const
primary-expression :=  ^ float-const
primary-expression :=  ^ string-const
primary-expression :=  ^ int-const
primary-expression :=  ^ ( expression )
inclusive-OR-expression :=  ^ exclusive-OR-expression
inclusive-OR-expression :=  ^ inclusive-OR-expression | exclusive-OR-expression
exclusive-OR-expression :=  ^ AND-expression
exclusive-OR-expression :=  ^ exclusive-OR-expression ^ AND-expression
AND-expression :=  ^ equality-expression
AND-expression :=  ^ AND-expression & equality-expression
equality-expression :=  ^ relational-expression
equality-expression :=  ^ equality-expression equality-operator relational-expression
relational-expression :=  ^ shift-expression
relational-expression :=  ^ relational-expression relational-operator shift-expression
shift-expression :=  ^ additive-expression
shift-expression :=  ^ shift-expression shift-operator additive-expression
additive-expression :=  ^ multiplicative-expression
additive-expression :=  ^ additive-expression additive-operator multiplicative-expression
multiplicative-expression :=  ^ cast-expression
multiplicative-expression :=  ^ multiplicative-expression multiplicative-operator cast-expression
cast-expression :=  ^ unary-expression
cast-expression :=  ^ ( type-name ) cast-expression
postfix-expression :=  postfix-expression ( ^ argument-expression-list )
postfix-expression :=  postfix-expression ( ^ )
argument-expression-list :=  ^ assignment-expression
argument-expression-list :=  ^ argument-expression-list , assignment-expression

I[204]
postfix-expression :=  postfix-expression . ^ identifier

I[205]
composite-statement :=  ^ { declaration-list statement-list }
composite-statement :=  ^ { declaration-list }
composite-statement :=  ^ { statement-list }
composite-statement :=  ^ { }
statement :=  ^ labeled-statement
statement :=  ^ expression-statement
statement :=  ^ composite-statement
statement :=  ^ seletion-statement
statement :=  ^ iteration-statement
statement :=  ^ jump-statement
labeled-statement :=  ^ identifier : statement
labeled-statement :=  ^ case constant-expression : statement
labeled-statement :=  ^ default : statement
expression-statement :=  ^ expression ;
expression-statement :=  ^ ;
seletion-statement :=  ^ if ( expression ) statement
seletion-statement :=  ^ if ( expression ) statement else statement
seletion-statement :=  ^ switch ( expression ) statement
iteration-statement :=  ^ while ( expression ) statement
iteration-statement :=  ^ do statement while ( expression ) ;
iteration-statement :=  ^ for ( expression ; expression ; expression ) statement
iteration-statement :=  ^ for ( expression ; expression ; ) statement
iteration-statement :=  ^ for ( expression ; ; expression ) statement
iteration-statement :=  ^ for ( expression ; ; ) statement
iteration-statement :=  ^ for ( ; expression ; expression ) statement
iteration-statement :=  ^ for ( ; expression ; ) statement
iteration-statement :=  ^ for ( ; ; expression ) statement
iteration-statement :=  ^ for ( ; ; ) statement
jump-statement :=  ^ goto identifier ;
jump-statement :=  ^ return expression ;
jump-statement :=  ^ return ;
jump-statement :=  ^ continue ;
jump-statement :=  ^ break ;
expression :=  ^ assignment-expression
expression :=  ^ expression , assignment-expression
assignment-expression :=  ^ condition-expression
assignment-expression :=  ^ unary-expression assignment-operator assignment-expression
condition-expression :=  ^ logical-OR-expression
condition-expression :=  ^ logical-OR-expression ? expression : condition-expression
unary-expression :=  ^ postfix-expression
unary-expression :=  ^ ++ unary-expression
unary-expression :=  ^ -- unary-expression
unary-expression :=  ^ unary-operator cast-expression
unary-expression :=  ^ sizeof unary-expression
unary-expression :=  ^ sizeof ( type-name )
logical-OR-expression :=  ^ logical-AND-expression
logical-OR-expression :=  ^ logical-OR-expression || logical-AND-expression
postfix-expression :=  ^ primary-expression
postfix-expression :=  ^ postfix-expression [ expression ]
postfix-expression :=  ^ postfix-expression ( argument-expression-list )
postfix-expression :=  ^ postfix-expression ( )
postfix-expression :=  ^ postfix-expression . identifier
postfix-expression :=  ^ postfix-expression -> identifier
postfix-expression :=  ^ postfix-expression ++
postfix-expression :=  ^ postfix-expression --
unary-operator :=  ^ &
unary-operator :=  ^ *
unary-operator :=  ^ +
unary-operator :=  ^ -
unary-operator :=  ^ ~
unary-operator :=  ^ !
logical-AND-expression :=  ^ inclusive-OR-expression
logical-AND-expression :=  ^ logical-AND-expression && inclusive-OR-expression
primary-expression :=  ^ identifier
primary-expression :=  ^ char-const
primary-expression :=  ^ float-const
primary-expression :=  ^ string-const
primary-expression :=  ^ int-const
primary-expression :=  ^ ( expression )
inclusive-OR-expression :=  ^ exclusive-OR-expression
inclusive-OR-expression :=  ^ inclusive-OR-expression | exclusive-OR-expression
exclusive-OR-expression :=  ^ AND-expression
exclusive-OR-expression :=  ^ exclusive-OR-expression ^ AND-expression
AND-expression :=  ^ equality-expression
AND-expression :=  ^ AND-expression & equality-expression
equality-expression :=  ^ relational-expression
equality-expression :=  ^ equality-expression equality-operator relational-expression
relational-expression :=  ^ shift-expression
relational-expression :=  ^ relational-expression relational-operator shift-expression
shift-expression :=  ^ additive-expression
shift-expression :=  ^ shift-expression shift-operator additive-expression
additive-expression :=  ^ multiplicative-expression
additive-expression :=  ^ additive-expression additive-operator multiplicative-expression
multiplicative-expression :=  ^ cast-expression
multiplicative-expression :=  ^ multiplicative-expression multiplicative-operator cast-expression
cast-expression :=  ^ unary-expression
cast-expression :=  ^ ( type-name ) cast-expression
labeled-statement :=  identifier : ^ statement

I[206]
unary-expression :=  sizeof unary-expression ^

I[207]
type-specifier :=  ^ void
type-specifier :=  ^ char
type-specifier :=  ^ short
type-specifier :=  ^ int
type-specifier :=  ^ long
type-specifier :=  ^ float
type-specifier :=  ^ double
type-specifier :=  ^ signed
type-specifier :=  ^ unsigned
type-specifier :=  ^ struct-or-union-specifier
type-specifier :=  ^ enum-specifier
type-specifier :=  ^ identifier
type-qualifier :=  ^ const
type-qualifier :=  ^ volatile
struct-or-union-specifier :=  ^ struct-or-union identifier { struct-declaration-list }
struct-or-union-specifier :=  ^ struct-or-union { struct-declaration-list }
struct-or-union-specifier :=  ^ struct-or-union identifier
enum-specifier :=  ^ enum identifier { enumerator-list }
enum-specifier :=  ^ enum { enumerator-list }
enum-specifier :=  ^ enum identifier
struct-or-union :=  ^ struct
struct-or-union :=  ^ union
expression :=  ^ assignment-expression
expression :=  ^ expression , assignment-expression
assignment-expression :=  ^ condition-expression
assignment-expression :=  ^ unary-expression assignment-operator assignment-expression
condition-expression :=  ^ logical-OR-expression
condition-expression :=  ^ logical-OR-expression ? expression : condition-expression
unary-expression :=  ^ postfix-expression
unary-expression :=  ^ ++ unary-expression
unary-expression :=  ^ -- unary-expression
unary-expression :=  ^ unary-operator cast-expression
unary-expression :=  ^ sizeof unary-expression
unary-expression :=  ^ sizeof ( type-name )
logical-OR-expression :=  ^ logical-AND-expression
logical-OR-expression :=  ^ logical-OR-expression || logical-AND-expression
postfix-expression :=  ^ primary-expression
postfix-expression :=  ^ postfix-expression [ expression ]
postfix-expression :=  ^ postfix-expression ( argument-expression-list )
postfix-expression :=  ^ postfix-expression ( )
postfix-expression :=  ^ postfix-expression . identifier
postfix-expression :=  ^ postfix-expression -> identifier
postfix-expression :=  ^ postfix-expression ++
postfix-expression :=  ^ postfix-expression --
unary-operator :=  ^ &
unary-operator :=  ^ *
unary-operator :=  ^ +
unary-operator :=  ^ -
unary-operator :=  ^ ~
unary-operator :=  ^ !
logical-AND-expression :=  ^ inclusive-OR-expression
logical-AND-expression :=  ^ logical-AND-expression && inclusive-OR-expression
primary-expression :=  ^ identifier
primary-expression :=  ^ char-const
primary-expression :=  ^ float-const
primary-expression :=  ^ string-const
primary-expression :=  ^ int-const
primary-expression :=  ^ ( expression )
inclusive-OR-expression :=  ^ exclusive-OR-expression
inclusive-OR-expression :=  ^ inclusive-OR-expression | exclusive-OR-expression
exclusive-OR-expression :=  ^ AND-expression
exclusive-OR-expression :=  ^ exclusive-OR-expression ^ AND-expression
AND-expression :=  ^ equality-expression
AND-expression :=  ^ AND-expression & equality-expression
equality-expression :=  ^ relational-expression
equality-expression :=  ^ equality-expression equality-operator relational-expression
relational-expression :=  ^ shift-expression
relational-expression :=  ^ relational-expression relational-operator shift-expression
shift-expression :=  ^ additive-expression
shift-expression :=  ^ shift-expression shift-operator additive-expression
additive-expression :=  ^ multiplicative-expression
additive-expression :=  ^ additive-expression additive-operator multiplicative-expression
multiplicative-expression :=  ^ cast-expression
multiplicative-expression :=  ^ multiplicative-expression multiplicative-operator cast-expression
cast-expression :=  ^ unary-expression
cast-expression :=  ^ ( type-name ) cast-expression
specifier-qualifier-list :=  ^ type-qualifier specifier-qualifier-list
specifier-qualifier-list :=  ^ type-qualifier
specifier-qualifier-list :=  ^ type-specifier specifier-qualifier-list
specifier-qualifier-list :=  ^ type-specifier
primary-expression :=  ( ^ expression )
type-name :=  ^ specifier-qualifier-list abstract-declarator
type-name :=  ^ specifier-qualifier-list
unary-expression :=  sizeof ( ^ type-name )

I[208]
expression :=  ^ assignment-expression
expression :=  ^ expression , assignment-expression
assignment-expression :=  ^ condition-expression
assignment-expression :=  ^ unary-expression assignment-operator assignment-expression
condition-expression :=  ^ logical-OR-expression
condition-expression :=  ^ logical-OR-expression ? expression : condition-expression
unary-expression :=  ^ postfix-expression
unary-expression :=  ^ ++ unary-expression
unary-expression :=  ^ -- unary-expression
unary-expression :=  ^ unary-operator cast-expression
unary-expression :=  ^ sizeof unary-expression
unary-expression :=  ^ sizeof ( type-name )
logical-OR-expression :=  ^ logical-AND-expression
logical-OR-expression :=  ^ logical-OR-expression || logical-AND-expression
postfix-expression :=  ^ primary-expression
postfix-expression :=  ^ postfix-expression [ expression ]
postfix-expression :=  ^ postfix-expression ( argument-expression-list )
postfix-expression :=  ^ postfix-expression ( )
postfix-expression :=  ^ postfix-expression . identifier
postfix-expression :=  ^ postfix-expression -> identifier
postfix-expression :=  ^ postfix-expression ++
postfix-expression :=  ^ postfix-expression --
unary-operator :=  ^ &
unary-operator :=  ^ *
unary-operator :=  ^ +
unary-operator :=  ^ -
unary-operator :=  ^ ~
unary-operator :=  ^ !
logical-AND-expression :=  ^ inclusive-OR-expression
logical-AND-expression :=  ^ logical-AND-expression && inclusive-OR-expression
primary-expression :=  ^ identifier
primary-expression :=  ^ char-const
primary-expression :=  ^ float-const
primary-expression :=  ^ string-const
primary-expression :=  ^ int-const
primary-expression :=  ^ ( expression )
inclusive-OR-expression :=  ^ exclusive-OR-expression
inclusive-OR-expression :=  ^ inclusive-OR-expression | exclusive-OR-expression
exclusive-OR-expression :=  ^ AND-expression
exclusive-OR-expression :=  ^ exclusive-OR-expression ^ AND-expression
AND-expression :=  ^ equality-expression
AND-expression :=  ^ AND-expression & equality-expression
equality-expression :=  ^ relational-expression
equality-expression :=  ^ equality-expression equality-operator relational-expression
relational-expression :=  ^ shift-expression
relational-expression :=  ^ relational-expression relational-operator shift-expression
shift-expression :=  ^ additive-expression
shift-expression :=  ^ shift-expression shift-operator additive-expression
additive-expression :=  ^ multiplicative-expression
additive-expression :=  ^ additive-expression additive-operator multiplicative-expression
multiplicative-expression :=  ^ cast-expression
multiplicative-expression :=  ^ multiplicative-expression multiplicative-operator cast-expression
cast-expression :=  ^ unary-expression
cast-expression :=  ^ ( type-name ) cast-expression
iteration-statement :=  while ( ^ expression ) statement

I[209]
labeled-statement :=  case constant-expression ^ : statement

I[210]
composite-statement :=  ^ { declaration-list statement-list }
composite-statement :=  ^ { declaration-list }
composite-statement :=  ^ { statement-list }
composite-statement :=  ^ { }
statement :=  ^ labeled-statement
statement :=  ^ expression-statement
statement :=  ^ composite-statement
statement :=  ^ seletion-statement
statement :=  ^ iteration-statement
statement :=  ^ jump-statement
labeled-statement :=  ^ identifier : statement
labeled-statement :=  ^ case constant-expression : statement
labeled-statement :=  ^ default : statement
expression-statement :=  ^ expression ;
expression-statement :=  ^ ;
seletion-statement :=  ^ if ( expression ) statement
seletion-statement :=  ^ if ( expression ) statement else statement
seletion-statement :=  ^ switch ( expression ) statement
iteration-statement :=  ^ while ( expression ) statement
iteration-statement :=  ^ do statement while ( expression ) ;
iteration-statement :=  ^ for ( expression ; expression ; expression ) statement
iteration-statement :=  ^ for ( expression ; expression ; ) statement
iteration-statement :=  ^ for ( expression ; ; expression ) statement
iteration-statement :=  ^ for ( expression ; ; ) statement
iteration-statement :=  ^ for ( ; expression ; expression ) statement
iteration-statement :=  ^ for ( ; expression ; ) statement
iteration-statement :=  ^ for ( ; ; expression ) statement
iteration-statement :=  ^ for ( ; ; ) statement
jump-statement :=  ^ goto identifier ;
jump-statement :=  ^ return expression ;
jump-statement :=  ^ return ;
jump-statement :=  ^ continue ;
jump-statement :=  ^ break ;
expression :=  ^ assignment-expression
expression :=  ^ expression , assignment-expression
assignment-expression :=  ^ condition-expression
assignment-expression :=  ^ unary-expression assignment-operator assignment-expression
condition-expression :=  ^ logical-OR-expression
condition-expression :=  ^ logical-OR-expression ? expression : condition-expression
unary-expression :=  ^ postfix-expression
unary-expression :=  ^ ++ unary-expression
unary-expression :=  ^ -- unary-expression
unary-expression :=  ^ unary-operator cast-expression
unary-expression :=  ^ sizeof unary-expression
unary-expression :=  ^ sizeof ( type-name )
logical-OR-expression :=  ^ logical-AND-expression
logical-OR-expression :=  ^ logical-OR-expression || logical-AND-expression
postfix-expression :=  ^ primary-expression
postfix-expression :=  ^ postfix-expression [ expression ]
postfix-expression :=  ^ postfix-expression ( argument-expression-list )
postfix-expression :=  ^ postfix-expression ( )
postfix-expression :=  ^ postfix-expression . identifier
postfix-expression :=  ^ postfix-expression -> identifier
postfix-expression :=  ^ postfix-expression ++
postfix-expression :=  ^ postfix-expression --
unary-operator :=  ^ &
unary-operator :=  ^ *
unary-operator :=  ^ +
unary-operator :=  ^ -
unary-operator :=  ^ ~
unary-operator :=  ^ !
logical-AND-expression :=  ^ inclusive-OR-expression
logical-AND-expression :=  ^ logical-AND-expression && inclusive-OR-expression
primary-expression :=  ^ identifier
primary-expression :=  ^ char-const
primary-expression :=  ^ float-const
primary-expression :=  ^ string-const
primary-expression :=  ^ int-const
primary-expression :=  ^ ( expression )
inclusive-OR-expression :=  ^ exclusive-OR-expression
inclusive-OR-expression :=  ^ inclusive-OR-expression | exclusive-OR-expression
exclusive-OR-expression :=  ^ AND-expression
exclusive-OR-expression :=  ^ exclusive-OR-expression ^ AND-expression
AND-expression :=  ^ equality-expression
AND-expression :=  ^ AND-expression & equality-expression
equality-expression :=  ^ relational-expression
equality-expression :=  ^ equality-expression equality-operator relational-expression
relational-expression :=  ^ shift-expression
relational-expression :=  ^ relational-expression relational-operator shift-expression
shift-expression :=  ^ additive-expression
shift-expression :=  ^ shift-expression shift-operator additive-expression
additive-expression :=  ^ multiplicative-expression
additive-expression :=  ^ additive-expression additive-operator multiplicative-expression
multiplicative-expression :=  ^ cast-expression
multiplicative-expression :=  ^ multiplicative-expression multiplicative-operator cast-expression
cast-expression :=  ^ unary-expression
cast-expression :=  ^ ( type-name ) cast-expression
labeled-statement :=  default : ^ statement

I[211]
expression :=  ^ assignment-expression
expression :=  ^ expression , assignment-expression
assignment-expression :=  ^ condition-expression
assignment-expression :=  ^ unary-expression assignment-operator assignment-expression
condition-expression :=  ^ logical-OR-expression
condition-expression :=  ^ logical-OR-expression ? expression : condition-expression
unary-expression :=  ^ postfix-expression
unary-expression :=  ^ ++ unary-expression
unary-expression :=  ^ -- unary-expression
unary-expression :=  ^ unary-operator cast-expression
unary-expression :=  ^ sizeof unary-expression
unary-expression :=  ^ sizeof ( type-name )
logical-OR-expression :=  ^ logical-AND-expression
logical-OR-expression :=  ^ logical-OR-expression || logical-AND-expression
postfix-expression :=  ^ primary-expression
postfix-expression :=  ^ postfix-expression [ expression ]
postfix-expression :=  ^ postfix-expression ( argument-expression-list )
postfix-expression :=  ^ postfix-expression ( )
postfix-expression :=  ^ postfix-expression . identifier
postfix-expression :=  ^ postfix-expression -> identifier
postfix-expression :=  ^ postfix-expression ++
postfix-expression :=  ^ postfix-expression --
unary-operator :=  ^ &
unary-operator :=  ^ *
unary-operator :=  ^ +
unary-operator :=  ^ -
unary-operator :=  ^ ~
unary-operator :=  ^ !
logical-AND-expression :=  ^ inclusive-OR-expression
logical-AND-expression :=  ^ logical-AND-expression && inclusive-OR-expression
primary-expression :=  ^ identifier
primary-expression :=  ^ char-const
primary-expression :=  ^ float-const
primary-expression :=  ^ string-const
primary-expression :=  ^ int-const
primary-expression :=  ^ ( expression )
inclusive-OR-expression :=  ^ exclusive-OR-expression
inclusive-OR-expression :=  ^ inclusive-OR-expression | exclusive-OR-expression
exclusive-OR-expression :=  ^ AND-expression
exclusive-OR-expression :=  ^ exclusive-OR-expression ^ AND-expression
AND-expression :=  ^ equality-expression
AND-expression :=  ^ AND-expression & equality-expression
equality-expression :=  ^ relational-expression
equality-expression :=  ^ equality-expression equality-operator relational-expression
relational-expression :=  ^ shift-expression
relational-expression :=  ^ relational-expression relational-operator shift-expression
shift-expression :=  ^ additive-expression
shift-expression :=  ^ shift-expression shift-operator additive-expression
additive-expression :=  ^ multiplicative-expression
additive-expression :=  ^ additive-expression additive-operator multiplicative-expression
multiplicative-expression :=  ^ cast-expression
multiplicative-expression :=  ^ multiplicative-expression multiplicative-operator cast-expression
cast-expression :=  ^ unary-expression
cast-expression :=  ^ ( type-name ) cast-expression
seletion-statement :=  if ( ^ expression ) statement

I[212]
expression :=  ^ assignment-expression
expression :=  ^ expression , assignment-expression
assignment-expression :=  ^ condition-expression
assignment-expression :=  ^ unary-expression assignment-operator assignment-expression
condition-expression :=  ^ logical-OR-expression
condition-expression :=  ^ logical-OR-expression ? expression : condition-expression
unary-expression :=  ^ postfix-expression
unary-expression :=  ^ ++ unary-expression
unary-expression :=  ^ -- unary-expression
unary-expression :=  ^ unary-operator cast-expression
unary-expression :=  ^ sizeof unary-expression
unary-expression :=  ^ sizeof ( type-name )
logical-OR-expression :=  ^ logical-AND-expression
logical-OR-expression :=  ^ logical-OR-expression || logical-AND-expression
postfix-expression :=  ^ primary-expression
postfix-expression :=  ^ postfix-expression [ expression ]
postfix-expression :=  ^ postfix-expression ( argument-expression-list )
postfix-expression :=  ^ postfix-expression ( )
postfix-expression :=  ^ postfix-expression . identifier
postfix-expression :=  ^ postfix-expression -> identifier
postfix-expression :=  ^ postfix-expression ++
postfix-expression :=  ^ postfix-expression --
unary-operator :=  ^ &
unary-operator :=  ^ *
unary-operator :=  ^ +
unary-operator :=  ^ -
unary-operator :=  ^ ~
unary-operator :=  ^ !
logical-AND-expression :=  ^ inclusive-OR-expression
logical-AND-expression :=  ^ logical-AND-expression && inclusive-OR-expression
primary-expression :=  ^ identifier
primary-expression :=  ^ char-const
primary-expression :=  ^ float-const
primary-expression :=  ^ string-const
primary-expression :=  ^ int-const
primary-expression :=  ^ ( expression )
inclusive-OR-expression :=  ^ exclusive-OR-expression
inclusive-OR-expression :=  ^ inclusive-OR-expression | exclusive-OR-expression
exclusive-OR-expression :=  ^ AND-expression
exclusive-OR-expression :=  ^ exclusive-OR-expression ^ AND-expression
AND-expression :=  ^ equality-expression
AND-expression :=  ^ AND-expression & equality-expression
equality-expression :=  ^ relational-expression
equality-expression :=  ^ equality-expression equality-operator relational-expression
relational-expression :=  ^ shift-expression
relational-expression :=  ^ relational-expression relational-operator shift-expression
shift-expression :=  ^ additive-expression
shift-expression :=  ^ shift-expression shift-operator additive-expression
additive-expression :=  ^ multiplicative-expression
additive-expression :=  ^ additive-expression additive-operator multiplicative-expression
multiplicative-expression :=  ^ cast-expression
multiplicative-expression :=  ^ multiplicative-expression multiplicative-operator cast-expression
cast-expression :=  ^ unary-expression
cast-expression :=  ^ ( type-name ) cast-expression
seletion-statement :=  if ( ^ expression ) statement else statement

I[213]
expression :=  ^ assignment-expression
expression :=  ^ expression , assignment-expression
assignment-expression :=  ^ condition-expression
assignment-expression :=  ^ unary-expression assignment-operator assignment-expression
condition-expression :=  ^ logical-OR-expression
condition-expression :=  ^ logical-OR-expression ? expression : condition-expression
unary-expression :=  ^ postfix-expression
unary-expression :=  ^ ++ unary-expression
unary-expression :=  ^ -- unary-expression
unary-expression :=  ^ unary-operator cast-expression
unary-expression :=  ^ sizeof unary-expression
unary-expression :=  ^ sizeof ( type-name )
logical-OR-expression :=  ^ logical-AND-expression
logical-OR-expression :=  ^ logical-OR-expression || logical-AND-expression
postfix-expression :=  ^ primary-expression
postfix-expression :=  ^ postfix-expression [ expression ]
postfix-expression :=  ^ postfix-expression ( argument-expression-list )
postfix-expression :=  ^ postfix-expression ( )
postfix-expression :=  ^ postfix-expression . identifier
postfix-expression :=  ^ postfix-expression -> identifier
postfix-expression :=  ^ postfix-expression ++
postfix-expression :=  ^ postfix-expression --
unary-operator :=  ^ &
unary-operator :=  ^ *
unary-operator :=  ^ +
unary-operator :=  ^ -
unary-operator :=  ^ ~
unary-operator :=  ^ !
logical-AND-expression :=  ^ inclusive-OR-expression
logical-AND-expression :=  ^ logical-AND-expression && inclusive-OR-expression
primary-expression :=  ^ identifier
primary-expression :=  ^ char-const
primary-expression :=  ^ float-const
primary-expression :=  ^ string-const
primary-expression :=  ^ int-const
primary-expression :=  ^ ( expression )
inclusive-OR-expression :=  ^ exclusive-OR-expression
inclusive-OR-expression :=  ^ inclusive-OR-expression | exclusive-OR-expression
exclusive-OR-expression :=  ^ AND-expression
exclusive-OR-expression :=  ^ exclusive-OR-expression ^ AND-expression
AND-expression :=  ^ equality-expression
AND-expression :=  ^ AND-expression & equality-expression
equality-expression :=  ^ relational-expression
equality-expression :=  ^ equality-expression equality-operator relational-expression
relational-expression :=  ^ shift-expression
relational-expression :=  ^ relational-expression relational-operator shift-expression
shift-expression :=  ^ additive-expression
shift-expression :=  ^ shift-expression shift-operator additive-expression
additive-expression :=  ^ multiplicative-expression
additive-expression :=  ^ additive-expression additive-operator multiplicative-expression
multiplicative-expression :=  ^ cast-expression
multiplicative-expression :=  ^ multiplicative-expression multiplicative-operator cast-expression
cast-expression :=  ^ unary-expression
cast-expression :=  ^ ( type-name ) cast-expression
seletion-statement :=  switch ( ^ expression ) statement

I[214]
iteration-statement :=  do statement ^ while ( expression ) ;

I[215]
expression :=  ^ assignment-expression
expression :=  ^ expression , assignment-expression
assignment-expression :=  ^ condition-expression
assignment-expression :=  ^ unary-expression assignment-operator assignment-expression
condition-expression :=  ^ logical-OR-expression
condition-expression :=  ^ logical-OR-expression ? expression : condition-expression
unary-expression :=  ^ postfix-expression
unary-expression :=  ^ ++ unary-expression
unary-expression :=  ^ -- unary-expression
unary-expression :=  ^ unary-operator cast-expression
unary-expression :=  ^ sizeof unary-expression
unary-expression :=  ^ sizeof ( type-name )
logical-OR-expression :=  ^ logical-AND-expression
logical-OR-expression :=  ^ logical-OR-expression || logical-AND-expression
postfix-expression :=  ^ primary-expression
postfix-expression :=  ^ postfix-expression [ expression ]
postfix-expression :=  ^ postfix-expression ( argument-expression-list )
postfix-expression :=  ^ postfix-expression ( )
postfix-expression :=  ^ postfix-expression . identifier
postfix-expression :=  ^ postfix-expression -> identifier
postfix-expression :=  ^ postfix-expression ++
postfix-expression :=  ^ postfix-expression --
unary-operator :=  ^ &
unary-operator :=  ^ *
unary-operator :=  ^ +
unary-operator :=  ^ -
unary-operator :=  ^ ~
unary-operator :=  ^ !
logical-AND-expression :=  ^ inclusive-OR-expression
logical-AND-expression :=  ^ logical-AND-expression && inclusive-OR-expression
primary-expression :=  ^ identifier
primary-expression :=  ^ char-const
primary-expression :=  ^ float-const
primary-expression :=  ^ string-const
primary-expression :=  ^ int-const
primary-expression :=  ^ ( expression )
inclusive-OR-expression :=  ^ exclusive-OR-expression
inclusive-OR-expression :=  ^ inclusive-OR-expression | exclusive-OR-expression
exclusive-OR-expression :=  ^ AND-expression
exclusive-OR-expression :=  ^ exclusive-OR-expression ^ AND-expression
AND-expression :=  ^ equality-expression
AND-expression :=  ^ AND-expression & equality-expression
equality-expression :=  ^ relational-expression
equality-expression :=  ^ equality-expression equality-operator relational-expression
relational-expression :=  ^ shift-expression
relational-expression :=  ^ relational-expression relational-operator shift-expression
shift-expression :=  ^ additive-expression
shift-expression :=  ^ shift-expression shift-operator additive-expression
additive-expression :=  ^ multiplicative-expression
additive-expression :=  ^ additive-expression additive-operator multiplicative-expression
multiplicative-expression :=  ^ cast-expression
multiplicative-expression :=  ^ multiplicative-expression multiplicative-operator cast-expression
cast-expression :=  ^ unary-expression
cast-expression :=  ^ ( type-name ) cast-expression
iteration-statement :=  for ( ^ expression ; expression ; expression ) statement
iteration-statement :=  for ( ^ expression ; expression ; ) statement
iteration-statement :=  for ( ^ expression ; ; expression ) statement
iteration-statement :=  for ( ^ expression ; ; ) statement
iteration-statement :=  for ( ^ ; expression ; expression ) statement
iteration-statement :=  for ( ^ ; expression ; ) statement
iteration-statement :=  for ( ^ ; ; expression ) statement
iteration-statement :=  for ( ^ ; ; ) statement

I[216]
jump-statement :=  goto identifier ^ ;

I[217]
expression :=  expression ^ , assignment-expression
jump-statement :=  return expression ^ ;

I[218]
jump-statement :=  return ; ^

I[219]
jump-statement :=  continue ; ^

I[220]
jump-statement :=  break ; ^

I[221]
unary-expression :=  ++ unary-expression ^

I[222]
expression :=  ^ assignment-expression
expression :=  ^ expression , assignment-expression
assignment-expression :=  ^ condition-expression
assignment-expression :=  ^ unary-expression assignment-operator assignment-expression
condition-expression :=  ^ logical-OR-expression
condition-expression :=  ^ logical-OR-expression ? expression : condition-expression
unary-expression :=  ^ postfix-expression
unary-expression :=  ^ ++ unary-expression
unary-expression :=  ^ -- unary-expression
unary-expression :=  ^ unary-operator cast-expression
unary-expression :=  ^ sizeof unary-expression
unary-expression :=  ^ sizeof ( type-name )
logical-OR-expression :=  ^ logical-AND-expression
logical-OR-expression :=  ^ logical-OR-expression || logical-AND-expression
postfix-expression :=  ^ primary-expression
postfix-expression :=  ^ postfix-expression [ expression ]
postfix-expression :=  ^ postfix-expression ( argument-expression-list )
postfix-expression :=  ^ postfix-expression ( )
postfix-expression :=  ^ postfix-expression . identifier
postfix-expression :=  ^ postfix-expression -> identifier
postfix-expression :=  ^ postfix-expression ++
postfix-expression :=  ^ postfix-expression --
unary-operator :=  ^ &
unary-operator :=  ^ *
unary-operator :=  ^ +
unary-operator :=  ^ -
unary-operator :=  ^ ~
unary-operator :=  ^ !
logical-AND-expression :=  ^ inclusive-OR-expression
logical-AND-expression :=  ^ logical-AND-expression && inclusive-OR-expression
primary-expression :=  ^ identifier
primary-expression :=  ^ char-const
primary-expression :=  ^ float-const
primary-expression :=  ^ string-const
primary-expression :=  ^ int-const
primary-expression :=  ^ ( expression )
inclusive-OR-expression :=  ^ exclusive-OR-expression
inclusive-OR-expression :=  ^ inclusive-OR-expression | exclusive-OR-expression
exclusive-OR-expression :=  ^ AND-expression
exclusive-OR-expression :=  ^ exclusive-OR-expression ^ AND-expression
AND-expression :=  ^ equality-expression
AND-expression :=  ^ AND-expression & equality-expression
equality-expression :=  ^ relational-expression
equality-expression :=  ^ equality-expression equality-operator relational-expression
relational-expression :=  ^ shift-expression
relational-expression :=  ^ relational-expression relational-operator shift-expression
shift-expression :=  ^ additive-expression
shift-expression :=  ^ shift-expression shift-operator additive-expression
additive-expression :=  ^ multiplicative-expression
additive-expression :=  ^ additive-expression additive-operator multiplicative-expression
multiplicative-expression :=  ^ cast-expression
multiplicative-expression :=  ^ multiplicative-expression multiplicative-operator cast-expression
cast-expression :=  ^ unary-expression
cast-expression :=  ^ ( type-name ) cast-expression
primary-expression :=  ( ^ expression )

I[223]
unary-expression :=  -- unary-expression ^

I[224]
pointer :=  ^ * type-qualifier-list pointer
pointer :=  ^ * type-qualifier-list
pointer :=  ^ * pointer
pointer :=  ^ *
abstract-declarator :=  ^ pointer
abstract-declarator :=  ^ pointer direct-abstract-declarator
abstract-declarator :=  ^ direct-abstract-declarator
direct-abstract-declarator :=  ^ ( abstract-declarator )
direct-abstract-declarator :=  ^ direct-abstract-declarator [ constant-expression ]
direct-abstract-declarator :=  ^ direct-abstract-declarator [ ]
direct-abstract-declarator :=  ^ [ constant-expression ]
direct-abstract-declarator :=  ^ [ ]
direct-abstract-declarator :=  ^ direct-abstract-declarator ( parameter-type-list )
direct-abstract-declarator :=  ^ direct-abstract-declarator ( )
direct-abstract-declarator :=  ^ ( parameter-type-list )
direct-abstract-declarator :=  ^ ( )
type-name :=  specifier-qualifier-list ^ abstract-declarator
type-name :=  specifier-qualifier-list ^

I[225]
cast-expression :=  ( type-name ^ ) cast-expression

I[226]
expression :=  expression ^ , assignment-expression
primary-expression :=  ( expression ^ )

I[227]
type-specifier :=  identifier ^
primary-expression :=  identifier ^

I[228]
type-specifier :=  ^ void
type-specifier :=  ^ char
type-specifier :=  ^ short
type-specifier :=  ^ int
type-specifier :=  ^ long
type-specifier :=  ^ float
type-specifier :=  ^ double
type-specifier :=  ^ signed
type-specifier :=  ^ unsigned
type-specifier :=  ^ struct-or-union-specifier
type-specifier :=  ^ enum-specifier
type-specifier :=  ^ identifier
type-qualifier :=  ^ const
type-qualifier :=  ^ volatile
struct-or-union-specifier :=  ^ struct-or-union identifier { struct-declaration-list }
struct-or-union-specifier :=  ^ struct-or-union { struct-declaration-list }
struct-or-union-specifier :=  ^ struct-or-union identifier
enum-specifier :=  ^ enum identifier { enumerator-list }
enum-specifier :=  ^ enum { enumerator-list }
enum-specifier :=  ^ enum identifier
struct-or-union :=  ^ struct
struct-or-union :=  ^ union
struct-declaration :=  ^ specifier-qualifier-list struct-declarator-list
specifier-qualifier-list :=  ^ type-qualifier specifier-qualifier-list
specifier-qualifier-list :=  ^ type-qualifier
specifier-qualifier-list :=  ^ type-specifier specifier-qualifier-list
specifier-qualifier-list :=  ^ type-specifier
struct-declaration-list :=  struct-declaration-list ^ struct-declaration
struct-or-union-specifier :=  struct-or-union identifier { struct-declaration-list ^ }

I[229]
specifier-qualifier-list :=  type-specifier specifier-qualifier-list ^

I[230]
specifier-qualifier-list :=  type-qualifier specifier-qualifier-list ^

I[231]
struct-declaration-list :=  struct-declaration-list struct-declaration ^

I[232]
struct-or-union-specifier :=  struct-or-union { struct-declaration-list } ^

I[233]
struct-declarator :=  declarator ^
struct-declarator :=  declarator ^ : constant-expression

I[234]
declarator :=  ^ pointer direct-declarator
declarator :=  ^ direct-declarator
pointer :=  ^ * type-qualifier-list pointer
pointer :=  ^ * type-qualifier-list
pointer :=  ^ * pointer
pointer :=  ^ *
direct-declarator :=  ^ identifier
direct-declarator :=  ^ ( declarator )
direct-declarator :=  ^ direct-declarator [ constant-expression ]
direct-declarator :=  ^ direct-declarator [ ]
direct-declarator :=  ^ direct-declarator ( parameter-type-list )
direct-declarator :=  ^ direct-declarator ( identifier-list )
direct-declarator :=  ^ direct-declarator ( )
struct-declarator :=  ^ declarator
struct-declarator :=  ^ declarator : constant-expression
struct-declarator :=  ^ : constant-expression
struct-declaration :=  specifier-qualifier-list struct-declarator-list ^
struct-declarator-list :=  struct-declarator-list ^ struct-declarator

I[235]
struct-declarator-list :=  struct-declarator ^

I[236]
condition-expression :=  ^ logical-OR-expression
condition-expression :=  ^ logical-OR-expression ? expression : condition-expression
unary-expression :=  ^ postfix-expression
unary-expression :=  ^ ++ unary-expression
unary-expression :=  ^ -- unary-expression
unary-expression :=  ^ unary-operator cast-expression
unary-expression :=  ^ sizeof unary-expression
unary-expression :=  ^ sizeof ( type-name )
logical-OR-expression :=  ^ logical-AND-expression
logical-OR-expression :=  ^ logical-OR-expression || logical-AND-expression
postfix-expression :=  ^ primary-expression
postfix-expression :=  ^ postfix-expression [ expression ]
postfix-expression :=  ^ postfix-expression ( argument-expression-list )
postfix-expression :=  ^ postfix-expression ( )
postfix-expression :=  ^ postfix-expression . identifier
postfix-expression :=  ^ postfix-expression -> identifier
postfix-expression :=  ^ postfix-expression ++
postfix-expression :=  ^ postfix-expression --
unary-operator :=  ^ &
unary-operator :=  ^ *
unary-operator :=  ^ +
unary-operator :=  ^ -
unary-operator :=  ^ ~
unary-operator :=  ^ !
logical-AND-expression :=  ^ inclusive-OR-expression
logical-AND-expression :=  ^ logical-AND-expression && inclusive-OR-expression
primary-expression :=  ^ identifier
primary-expression :=  ^ char-const
primary-expression :=  ^ float-const
primary-expression :=  ^ string-const
primary-expression :=  ^ int-const
primary-expression :=  ^ ( expression )
inclusive-OR-expression :=  ^ exclusive-OR-expression
inclusive-OR-expression :=  ^ inclusive-OR-expression | exclusive-OR-expression
exclusive-OR-expression :=  ^ AND-expression
exclusive-OR-expression :=  ^ exclusive-OR-expression ^ AND-expression
AND-expression :=  ^ equality-expression
AND-expression :=  ^ AND-expression & equality-expression
equality-expression :=  ^ relational-expression
equality-expression :=  ^ equality-expression equality-operator relational-expression
relational-expression :=  ^ shift-expression
relational-expression :=  ^ relational-expression relational-operator shift-expression
shift-expression :=  ^ additive-expression
shift-expression :=  ^ shift-expression shift-operator additive-expression
additive-expression :=  ^ multiplicative-expression
additive-expression :=  ^ additive-expression additive-operator multiplicative-expression
multiplicative-expression :=  ^ cast-expression
multiplicative-expression :=  ^ multiplicative-expression multiplicative-operator cast-expression
cast-expression :=  ^ unary-expression
cast-expression :=  ^ ( type-name ) cast-expression
constant-expression :=  ^ condition-expression
struct-declarator :=  : ^ constant-expression

I[237]
direct-declarator :=  direct-declarator [ constant-expression ] ^

I[238]
parameter-declarator :=  declaration-specifier declarator ^

I[239]
direct-declarator :=  ^ identifier
direct-declarator :=  ^ ( declarator )
direct-declarator :=  ^ direct-declarator [ constant-expression ]
direct-declarator :=  ^ direct-declarator [ ]
direct-declarator :=  ^ direct-declarator ( parameter-type-list )
direct-declarator :=  ^ direct-declarator ( identifier-list )
direct-declarator :=  ^ direct-declarator ( )
declarator :=  pointer ^ direct-declarator
direct-abstract-declarator :=  ^ ( abstract-declarator )
direct-abstract-declarator :=  ^ direct-abstract-declarator [ constant-expression ]
direct-abstract-declarator :=  ^ direct-abstract-declarator [ ]
direct-abstract-declarator :=  ^ [ constant-expression ]
direct-abstract-declarator :=  ^ [ ]
direct-abstract-declarator :=  ^ direct-abstract-declarator ( parameter-type-list )
direct-abstract-declarator :=  ^ direct-abstract-declarator ( )
direct-abstract-declarator :=  ^ ( parameter-type-list )
direct-abstract-declarator :=  ^ ( )
abstract-declarator :=  pointer ^
abstract-declarator :=  pointer ^ direct-abstract-declarator

I[240]
parameter-declarator :=  declaration-specifier abstract-declarator ^

I[241]
abstract-declarator :=  direct-abstract-declarator ^
direct-abstract-declarator :=  direct-abstract-declarator ^ [ constant-expression ]
direct-abstract-declarator :=  direct-abstract-declarator ^ [ ]
direct-abstract-declarator :=  direct-abstract-declarator ^ ( parameter-type-list )
direct-abstract-declarator :=  direct-abstract-declarator ^ ( )

I[242]
condition-expression :=  ^ logical-OR-expression
condition-expression :=  ^ logical-OR-expression ? expression : condition-expression
unary-expression :=  ^ postfix-expression
unary-expression :=  ^ ++ unary-expression
unary-expression :=  ^ -- unary-expression
unary-expression :=  ^ unary-operator cast-expression
unary-expression :=  ^ sizeof unary-expression
unary-expression :=  ^ sizeof ( type-name )
logical-OR-expression :=  ^ logical-AND-expression
logical-OR-expression :=  ^ logical-OR-expression || logical-AND-expression
postfix-expression :=  ^ primary-expression
postfix-expression :=  ^ postfix-expression [ expression ]
postfix-expression :=  ^ postfix-expression ( argument-expression-list )
postfix-expression :=  ^ postfix-expression ( )
postfix-expression :=  ^ postfix-expression . identifier
postfix-expression :=  ^ postfix-expression -> identifier
postfix-expression :=  ^ postfix-expression ++
postfix-expression :=  ^ postfix-expression --
unary-operator :=  ^ &
unary-operator :=  ^ *
unary-operator :=  ^ +
unary-operator :=  ^ -
unary-operator :=  ^ ~
unary-operator :=  ^ !
logical-AND-expression :=  ^ inclusive-OR-expression
logical-AND-expression :=  ^ logical-AND-expression && inclusive-OR-expression
primary-expression :=  ^ identifier
primary-expression :=  ^ char-const
primary-expression :=  ^ float-const
primary-expression :=  ^ string-const
primary-expression :=  ^ int-const
primary-expression :=  ^ ( expression )
inclusive-OR-expression :=  ^ exclusive-OR-expression
inclusive-OR-expression :=  ^ inclusive-OR-expression | exclusive-OR-expression
exclusive-OR-expression :=  ^ AND-expression
exclusive-OR-expression :=  ^ exclusive-OR-expression ^ AND-expression
AND-expression :=  ^ equality-expression
AND-expression :=  ^ AND-expression & equality-expression
equality-expression :=  ^ relational-expression
equality-expression :=  ^ equality-expression equality-operator relational-expression
relational-expression :=  ^ shift-expression
relational-expression :=  ^ relational-expression relational-operator shift-expression
shift-expression :=  ^ additive-expression
shift-expression :=  ^ shift-expression shift-operator additive-expression
additive-expression :=  ^ multiplicative-expression
additive-expression :=  ^ additive-expression additive-operator multiplicative-expression
multiplicative-expression :=  ^ cast-expression
multiplicative-expression :=  ^ multiplicative-expression multiplicative-operator cast-expression
cast-expression :=  ^ unary-expression
cast-expression :=  ^ ( type-name ) cast-expression
constant-expression :=  ^ condition-expression
direct-abstract-declarator :=  [ ^ constant-expression ]
direct-abstract-declarator :=  [ ^ ]

I[243]
declaration-specifier :=  ^ storage-class-specifier declaration-specifier
declaration-specifier :=  ^ storage-class-specifier
declaration-specifier :=  ^ type-specifier declaration-specifier
declaration-specifier :=  ^ type-specifier
declaration-specifier :=  ^ type-qualifier declaration-specifier
declaration-specifier :=  ^ type-qualifier
declarator :=  ^ pointer direct-declarator
declarator :=  ^ direct-declarator
storage-class-specifier :=  ^ auto
storage-class-specifier :=  ^ register
storage-class-specifier :=  ^ static
storage-class-specifier :=  ^ extern
storage-class-specifier :=  ^ typedef
type-specifier :=  ^ void
type-specifier :=  ^ char
type-specifier :=  ^ short
type-specifier :=  ^ int
type-specifier :=  ^ long
type-specifier :=  ^ float
type-specifier :=  ^ double
type-specifier :=  ^ signed
type-specifier :=  ^ unsigned
type-specifier :=  ^ struct-or-union-specifier
type-specifier :=  ^ enum-specifier
type-specifier :=  ^ identifier
type-qualifier :=  ^ const
type-qualifier :=  ^ volatile
pointer :=  ^ * type-qualifier-list pointer
pointer :=  ^ * type-qualifier-list
pointer :=  ^ * pointer
pointer :=  ^ *
direct-declarator :=  ^ identifier
direct-declarator :=  ^ ( declarator )
direct-declarator :=  ^ direct-declarator [ constant-expression ]
direct-declarator :=  ^ direct-declarator [ ]
direct-declarator :=  ^ direct-declarator ( parameter-type-list )
direct-declarator :=  ^ direct-declarator ( identifier-list )
direct-declarator :=  ^ direct-declarator ( )
struct-or-union-specifier :=  ^ struct-or-union identifier { struct-declaration-list }
struct-or-union-specifier :=  ^ struct-or-union { struct-declaration-list }
struct-or-union-specifier :=  ^ struct-or-union identifier
enum-specifier :=  ^ enum identifier { enumerator-list }
enum-specifier :=  ^ enum { enumerator-list }
enum-specifier :=  ^ enum identifier
struct-or-union :=  ^ struct
struct-or-union :=  ^ union
direct-declarator :=  ( ^ declarator )
parameter-type-list :=  ^ parameter-list
parameter-type-list :=  ^ parameter-list , . . .
parameter-list :=  ^ parameter-declarator
parameter-list :=  ^ parameter-list , parameter-declarator
parameter-declarator :=  ^ declaration-specifier declarator
parameter-declarator :=  ^ declaration-specifier abstract-declarator
parameter-declarator :=  ^ declaration-specifier
abstract-declarator :=  ^ pointer
abstract-declarator :=  ^ pointer direct-abstract-declarator
abstract-declarator :=  ^ direct-abstract-declarator
direct-abstract-declarator :=  ^ ( abstract-declarator )
direct-abstract-declarator :=  ^ direct-abstract-declarator [ constant-expression ]
direct-abstract-declarator :=  ^ direct-abstract-declarator [ ]
direct-abstract-declarator :=  ^ [ constant-expression ]
direct-abstract-declarator :=  ^ [ ]
direct-abstract-declarator :=  ^ direct-abstract-declarator ( parameter-type-list )
direct-abstract-declarator :=  ^ direct-abstract-declarator ( )
direct-abstract-declarator :=  ^ ( parameter-type-list )
direct-abstract-declarator :=  ^ ( )
direct-abstract-declarator :=  ( ^ abstract-declarator )
direct-abstract-declarator :=  ( ^ parameter-type-list )
direct-abstract-declarator :=  ( ^ )

I[244]
direct-declarator :=  direct-declarator ( parameter-type-list ) ^

I[245]
direct-declarator :=  direct-declarator ( identifier-list ) ^

I[246]
identifier-list :=  identifier-list , ^ identifier

I[247]
declaration-specifier :=  ^ storage-class-specifier declaration-specifier
declaration-specifier :=  ^ storage-class-specifier
declaration-specifier :=  ^ type-specifier declaration-specifier
declaration-specifier :=  ^ type-specifier
declaration-specifier :=  ^ type-qualifier declaration-specifier
declaration-specifier :=  ^ type-qualifier
storage-class-specifier :=  ^ auto
storage-class-specifier :=  ^ register
storage-class-specifier :=  ^ static
storage-class-specifier :=  ^ extern
storage-class-specifier :=  ^ typedef
type-specifier :=  ^ void
type-specifier :=  ^ char
type-specifier :=  ^ short
type-specifier :=  ^ int
type-specifier :=  ^ long
type-specifier :=  ^ float
type-specifier :=  ^ double
type-specifier :=  ^ signed
type-specifier :=  ^ unsigned
type-specifier :=  ^ struct-or-union-specifier
type-specifier :=  ^ enum-specifier
type-specifier :=  ^ identifier
type-qualifier :=  ^ const
type-qualifier :=  ^ volatile
struct-or-union-specifier :=  ^ struct-or-union identifier { struct-declaration-list }
struct-or-union-specifier :=  ^ struct-or-union { struct-declaration-list }
struct-or-union-specifier :=  ^ struct-or-union identifier
enum-specifier :=  ^ enum identifier { enumerator-list }
enum-specifier :=  ^ enum { enumerator-list }
enum-specifier :=  ^ enum identifier
struct-or-union :=  ^ struct
struct-or-union :=  ^ union
parameter-declarator :=  ^ declaration-specifier declarator
parameter-declarator :=  ^ declaration-specifier abstract-declarator
parameter-declarator :=  ^ declaration-specifier
parameter-type-list :=  parameter-list , ^ . . .
parameter-list :=  parameter-list , ^ parameter-declarator

I[248]
enumerator :=  ^ identifier
enumerator :=  ^ identifier = constant-expression
enumerator-list :=  enumerator-list ^ enumerator
enum-specifier :=  enum identifier { enumerator-list ^ }

I[249]
enumerator-list :=  enumerator-list enumerator ^

I[250]
enum-specifier :=  enum { enumerator-list } ^

I[251]
condition-expression :=  ^ logical-OR-expression
condition-expression :=  ^ logical-OR-expression ? expression : condition-expression
unary-expression :=  ^ postfix-expression
unary-expression :=  ^ ++ unary-expression
unary-expression :=  ^ -- unary-expression
unary-expression :=  ^ unary-operator cast-expression
unary-expression :=  ^ sizeof unary-expression
unary-expression :=  ^ sizeof ( type-name )
logical-OR-expression :=  ^ logical-AND-expression
logical-OR-expression :=  ^ logical-OR-expression || logical-AND-expression
postfix-expression :=  ^ primary-expression
postfix-expression :=  ^ postfix-expression [ expression ]
postfix-expression :=  ^ postfix-expression ( argument-expression-list )
postfix-expression :=  ^ postfix-expression ( )
postfix-expression :=  ^ postfix-expression . identifier
postfix-expression :=  ^ postfix-expression -> identifier
postfix-expression :=  ^ postfix-expression ++
postfix-expression :=  ^ postfix-expression --
unary-operator :=  ^ &
unary-operator :=  ^ *
unary-operator :=  ^ +
unary-operator :=  ^ -
unary-operator :=  ^ ~
unary-operator :=  ^ !
logical-AND-expression :=  ^ inclusive-OR-expression
logical-AND-expression :=  ^ logical-AND-expression && inclusive-OR-expression
primary-expression :=  ^ identifier
primary-expression :=  ^ char-const
primary-expression :=  ^ float-const
primary-expression :=  ^ string-const
primary-expression :=  ^ int-const
primary-expression :=  ^ ( expression )
inclusive-OR-expression :=  ^ exclusive-OR-expression
inclusive-OR-expression :=  ^ inclusive-OR-expression | exclusive-OR-expression
exclusive-OR-expression :=  ^ AND-expression
exclusive-OR-expression :=  ^ exclusive-OR-expression ^ AND-expression
AND-expression :=  ^ equality-expression
AND-expression :=  ^ AND-expression & equality-expression
equality-expression :=  ^ relational-expression
equality-expression :=  ^ equality-expression equality-operator relational-expression
relational-expression :=  ^ shift-expression
relational-expression :=  ^ relational-expression relational-operator shift-expression
shift-expression :=  ^ additive-expression
shift-expression :=  ^ shift-expression shift-operator additive-expression
additive-expression :=  ^ multiplicative-expression
additive-expression :=  ^ additive-expression additive-operator multiplicative-expression
multiplicative-expression :=  ^ cast-expression
multiplicative-expression :=  ^ multiplicative-expression multiplicative-operator cast-expression
cast-expression :=  ^ unary-expression
cast-expression :=  ^ ( type-name ) cast-expression
constant-expression :=  ^ condition-expression
enumerator :=  identifier = ^ constant-expression

I[252]
initializer-list :=  initializer ^

I[253]
initializer :=  { initializer-list ^ }
initializer :=  { initializer-list ^ , }
initializer-list :=  initializer-list ^ , initializer

I[254]
composite-statement :=  { declaration-list statement-list } ^

I[255]
expression :=  expression , assignment-expression ^

I[256]
logical-AND-expression :=  logical-AND-expression ^ && inclusive-OR-expression
logical-OR-expression :=  logical-OR-expression || logical-AND-expression ^

I[257]
expression :=  expression ^ , assignment-expression
condition-expression :=  logical-OR-expression ? expression ^ : condition-expression

I[258]
inclusive-OR-expression :=  inclusive-OR-expression ^ | exclusive-OR-expression
logical-AND-expression :=  logical-AND-expression && inclusive-OR-expression ^

I[259]
exclusive-OR-expression :=  exclusive-OR-expression ^ ^ AND-expression
inclusive-OR-expression :=  inclusive-OR-expression | exclusive-OR-expression ^

I[260]
AND-expression :=  AND-expression ^ & equality-expression
exclusive-OR-expression :=  exclusive-OR-expression ^ AND-expression ^

I[261]
assignment-expression :=  unary-expression assignment-operator assignment-expression ^

I[262]
equality-expression :=  equality-expression ^ equality-operator relational-expression
equality-operator :=  ^ ==
equality-operator :=  ^ !=
AND-expression :=  AND-expression & equality-expression ^

I[263]
relational-expression :=  relational-expression ^ relational-operator shift-expression
relational-operator :=  ^ <
relational-operator :=  ^ >
relational-operator :=  ^ <=
relational-operator :=  ^ >=
equality-expression :=  equality-expression equality-operator relational-expression ^

I[264]
shift-expression :=  shift-expression ^ shift-operator additive-expression
shift-operator :=  ^ <<
shift-operator :=  ^ >>
relational-expression :=  relational-expression relational-operator shift-expression ^

I[265]
additive-expression :=  additive-expression ^ additive-operator multiplicative-expression
additive-operator :=  ^ +
additive-operator :=  ^ -
shift-expression :=  shift-expression shift-operator additive-expression ^

I[266]
multiplicative-expression :=  multiplicative-expression ^ multiplicative-operator cast-expression
multiplicative-operator :=  ^ *
multiplicative-operator :=  ^ %
multiplicative-operator :=  ^ /
additive-expression :=  additive-expression additive-operator multiplicative-expression ^

I[267]
multiplicative-expression :=  multiplicative-expression multiplicative-operator cast-expression ^

I[268]
postfix-expression :=  postfix-expression -> identifier ^

I[269]
expression :=  expression ^ , assignment-expression
postfix-expression :=  postfix-expression [ expression ^ ]

I[270]
argument-expression-list :=  assignment-expression ^

I[271]
postfix-expression :=  postfix-expression ( argument-expression-list ^ )
argument-expression-list :=  argument-expression-list ^ , assignment-expression

I[272]
postfix-expression :=  postfix-expression ( ) ^

I[273]
postfix-expression :=  postfix-expression . identifier ^

I[274]
labeled-statement :=  identifier : statement ^

I[275]
unary-expression :=  sizeof ( type-name ^ )

I[276]
expression :=  expression ^ , assignment-expression
iteration-statement :=  while ( expression ^ ) statement

I[277]
composite-statement :=  ^ { declaration-list statement-list }
composite-statement :=  ^ { declaration-list }
composite-statement :=  ^ { statement-list }
composite-statement :=  ^ { }
statement :=  ^ labeled-statement
statement :=  ^ expression-statement
statement :=  ^ composite-statement
statement :=  ^ seletion-statement
statement :=  ^ iteration-statement
statement :=  ^ jump-statement
labeled-statement :=  ^ identifier : statement
labeled-statement :=  ^ case constant-expression : statement
labeled-statement :=  ^ default : statement
expression-statement :=  ^ expression ;
expression-statement :=  ^ ;
seletion-statement :=  ^ if ( expression ) statement
seletion-statement :=  ^ if ( expression ) statement else statement
seletion-statement :=  ^ switch ( expression ) statement
iteration-statement :=  ^ while ( expression ) statement
iteration-statement :=  ^ do statement while ( expression ) ;
iteration-statement :=  ^ for ( expression ; expression ; expression ) statement
iteration-statement :=  ^ for ( expression ; expression ; ) statement
iteration-statement :=  ^ for ( expression ; ; expression ) statement
iteration-statement :=  ^ for ( expression ; ; ) statement
iteration-statement :=  ^ for ( ; expression ; expression ) statement
iteration-statement :=  ^ for ( ; expression ; ) statement
iteration-statement :=  ^ for ( ; ; expression ) statement
iteration-statement :=  ^ for ( ; ; ) statement
jump-statement :=  ^ goto identifier ;
jump-statement :=  ^ return expression ;
jump-statement :=  ^ return ;
jump-statement :=  ^ continue ;
jump-statement :=  ^ break ;
expression :=  ^ assignment-expression
expression :=  ^ expression , assignment-expression
assignment-expression :=  ^ condition-expression
assignment-expression :=  ^ unary-expression assignment-operator assignment-expression
condition-expression :=  ^ logical-OR-expression
condition-expression :=  ^ logical-OR-expression ? expression : condition-expression
unary-expression :=  ^ postfix-expression
unary-expression :=  ^ ++ unary-expression
unary-expression :=  ^ -- unary-expression
unary-expression :=  ^ unary-operator cast-expression
unary-expression :=  ^ sizeof unary-expression
unary-expression :=  ^ sizeof ( type-name )
logical-OR-expression :=  ^ logical-AND-expression
logical-OR-expression :=  ^ logical-OR-expression || logical-AND-expression
postfix-expression :=  ^ primary-expression
postfix-expression :=  ^ postfix-expression [ expression ]
postfix-expression :=  ^ postfix-expression ( argument-expression-list )
postfix-expression :=  ^ postfix-expression ( )
postfix-expression :=  ^ postfix-expression . identifier
postfix-expression :=  ^ postfix-expression -> identifier
postfix-expression :=  ^ postfix-expression ++
postfix-expression :=  ^ postfix-expression --
unary-operator :=  ^ &
unary-operator :=  ^ *
unary-operator :=  ^ +
unary-operator :=  ^ -
unary-operator :=  ^ ~
unary-operator :=  ^ !
logical-AND-expression :=  ^ inclusive-OR-expression
logical-AND-expression :=  ^ logical-AND-expression && inclusive-OR-expression
primary-expression :=  ^ identifier
primary-expression :=  ^ char-const
primary-expression :=  ^ float-const
primary-expression :=  ^ string-const
primary-expression :=  ^ int-const
primary-expression :=  ^ ( expression )
inclusive-OR-expression :=  ^ exclusive-OR-expression
inclusive-OR-expression :=  ^ inclusive-OR-expression | exclusive-OR-expression
exclusive-OR-expression :=  ^ AND-expression
exclusive-OR-expression :=  ^ exclusive-OR-expression ^ AND-expression
AND-expression :=  ^ equality-expression
AND-expression :=  ^ AND-expression & equality-expression
equality-expression :=  ^ relational-expression
equality-expression :=  ^ equality-expression equality-operator relational-expression
relational-expression :=  ^ shift-expression
relational-expression :=  ^ relational-expression relational-operator shift-expression
shift-expression :=  ^ additive-expression
shift-expression :=  ^ shift-expression shift-operator additive-expression
additive-expression :=  ^ multiplicative-expression
additive-expression :=  ^ additive-expression additive-operator multiplicative-expression
multiplicative-expression :=  ^ cast-expression
multiplicative-expression :=  ^ multiplicative-expression multiplicative-operator cast-expression
cast-expression :=  ^ unary-expression
cast-expression :=  ^ ( type-name ) cast-expression
labeled-statement :=  case constant-expression : ^ statement

I[278]
labeled-statement :=  default : statement ^

I[279]
expression :=  expression ^ , assignment-expression
seletion-statement :=  if ( expression ^ ) statement

I[280]
expression :=  expression ^ , assignment-expression
seletion-statement :=  if ( expression ^ ) statement else statement

I[281]
expression :=  expression ^ , assignment-expression
seletion-statement :=  switch ( expression ^ ) statement

I[282]
iteration-statement :=  do statement while ^ ( expression ) ;

I[283]
expression :=  expression ^ , assignment-expression
iteration-statement :=  for ( expression ^ ; expression ; expression ) statement
iteration-statement :=  for ( expression ^ ; expression ; ) statement
iteration-statement :=  for ( expression ^ ; ; expression ) statement
iteration-statement :=  for ( expression ^ ; ; ) statement

I[284]
expression :=  ^ assignment-expression
expression :=  ^ expression , assignment-expression
assignment-expression :=  ^ condition-expression
assignment-expression :=  ^ unary-expression assignment-operator assignment-expression
condition-expression :=  ^ logical-OR-expression
condition-expression :=  ^ logical-OR-expression ? expression : condition-expression
unary-expression :=  ^ postfix-expression
unary-expression :=  ^ ++ unary-expression
unary-expression :=  ^ -- unary-expression
unary-expression :=  ^ unary-operator cast-expression
unary-expression :=  ^ sizeof unary-expression
unary-expression :=  ^ sizeof ( type-name )
logical-OR-expression :=  ^ logical-AND-expression
logical-OR-expression :=  ^ logical-OR-expression || logical-AND-expression
postfix-expression :=  ^ primary-expression
postfix-expression :=  ^ postfix-expression [ expression ]
postfix-expression :=  ^ postfix-expression ( argument-expression-list )
postfix-expression :=  ^ postfix-expression ( )
postfix-expression :=  ^ postfix-expression . identifier
postfix-expression :=  ^ postfix-expression -> identifier
postfix-expression :=  ^ postfix-expression ++
postfix-expression :=  ^ postfix-expression --
unary-operator :=  ^ &
unary-operator :=  ^ *
unary-operator :=  ^ +
unary-operator :=  ^ -
unary-operator :=  ^ ~
unary-operator :=  ^ !
logical-AND-expression :=  ^ inclusive-OR-expression
logical-AND-expression :=  ^ logical-AND-expression && inclusive-OR-expression
primary-expression :=  ^ identifier
primary-expression :=  ^ char-const
primary-expression :=  ^ float-const
primary-expression :=  ^ string-const
primary-expression :=  ^ int-const
primary-expression :=  ^ ( expression )
inclusive-OR-expression :=  ^ exclusive-OR-expression
inclusive-OR-expression :=  ^ inclusive-OR-expression | exclusive-OR-expression
exclusive-OR-expression :=  ^ AND-expression
exclusive-OR-expression :=  ^ exclusive-OR-expression ^ AND-expression
AND-expression :=  ^ equality-expression
AND-expression :=  ^ AND-expression & equality-expression
equality-expression :=  ^ relational-expression
equality-expression :=  ^ equality-expression equality-operator relational-expression
relational-expression :=  ^ shift-expression
relational-expression :=  ^ relational-expression relational-operator shift-expression
shift-expression :=  ^ additive-expression
shift-expression :=  ^ shift-expression shift-operator additive-expression
additive-expression :=  ^ multiplicative-expression
additive-expression :=  ^ additive-expression additive-operator multiplicative-expression
multiplicative-expression :=  ^ cast-expression
multiplicative-expression :=  ^ multiplicative-expression multiplicative-operator cast-expression
cast-expression :=  ^ unary-expression
cast-expression :=  ^ ( type-name ) cast-expression
iteration-statement :=  for ( ; ^ expression ; expression ) statement
iteration-statement :=  for ( ; ^ expression ; ) statement
iteration-statement :=  for ( ; ^ ; expression ) statement
iteration-statement :=  for ( ; ^ ; ) statement

I[285]
jump-statement :=  goto identifier ; ^

I[286]
jump-statement :=  return expression ; ^

I[287]
direct-abstract-declarator :=  ^ ( abstract-declarator )
direct-abstract-declarator :=  ^ direct-abstract-declarator [ constant-expression ]
direct-abstract-declarator :=  ^ direct-abstract-declarator [ ]
direct-abstract-declarator :=  ^ [ constant-expression ]
direct-abstract-declarator :=  ^ [ ]
direct-abstract-declarator :=  ^ direct-abstract-declarator ( parameter-type-list )
direct-abstract-declarator :=  ^ direct-abstract-declarator ( )
direct-abstract-declarator :=  ^ ( parameter-type-list )
direct-abstract-declarator :=  ^ ( )
abstract-declarator :=  pointer ^
abstract-declarator :=  pointer ^ direct-abstract-declarator

I[288]
type-name :=  specifier-qualifier-list abstract-declarator ^

I[289]
declaration-specifier :=  ^ storage-class-specifier declaration-specifier
declaration-specifier :=  ^ storage-class-specifier
declaration-specifier :=  ^ type-specifier declaration-specifier
declaration-specifier :=  ^ type-specifier
declaration-specifier :=  ^ type-qualifier declaration-specifier
declaration-specifier :=  ^ type-qualifier
storage-class-specifier :=  ^ auto
storage-class-specifier :=  ^ register
storage-class-specifier :=  ^ static
storage-class-specifier :=  ^ extern
storage-class-specifier :=  ^ typedef
type-specifier :=  ^ void
type-specifier :=  ^ char
type-specifier :=  ^ short
type-specifier :=  ^ int
type-specifier :=  ^ long
type-specifier :=  ^ float
type-specifier :=  ^ double
type-specifier :=  ^ signed
type-specifier :=  ^ unsigned
type-specifier :=  ^ struct-or-union-specifier
type-specifier :=  ^ enum-specifier
type-specifier :=  ^ identifier
type-qualifier :=  ^ const
type-qualifier :=  ^ volatile
pointer :=  ^ * type-qualifier-list pointer
pointer :=  ^ * type-qualifier-list
pointer :=  ^ * pointer
pointer :=  ^ *
struct-or-union-specifier :=  ^ struct-or-union identifier { struct-declaration-list }
struct-or-union-specifier :=  ^ struct-or-union { struct-declaration-list }
struct-or-union-specifier :=  ^ struct-or-union identifier
enum-specifier :=  ^ enum identifier { enumerator-list }
enum-specifier :=  ^ enum { enumerator-list }
enum-specifier :=  ^ enum identifier
struct-or-union :=  ^ struct
struct-or-union :=  ^ union
parameter-type-list :=  ^ parameter-list
parameter-type-list :=  ^ parameter-list , . . .
parameter-list :=  ^ parameter-declarator
parameter-list :=  ^ parameter-list , parameter-declarator
parameter-declarator :=  ^ declaration-specifier declarator
parameter-declarator :=  ^ declaration-specifier abstract-declarator
parameter-declarator :=  ^ declaration-specifier
abstract-declarator :=  ^ pointer
abstract-declarator :=  ^ pointer direct-abstract-declarator
abstract-declarator :=  ^ direct-abstract-declarator
direct-abstract-declarator :=  ^ ( abstract-declarator )
direct-abstract-declarator :=  ^ direct-abstract-declarator [ constant-expression ]
direct-abstract-declarator :=  ^ direct-abstract-declarator [ ]
direct-abstract-declarator :=  ^ [ constant-expression ]
direct-abstract-declarator :=  ^ [ ]
direct-abstract-declarator :=  ^ direct-abstract-declarator ( parameter-type-list )
direct-abstract-declarator :=  ^ direct-abstract-declarator ( )
direct-abstract-declarator :=  ^ ( parameter-type-list )
direct-abstract-declarator :=  ^ ( )
direct-abstract-declarator :=  ( ^ abstract-declarator )
direct-abstract-declarator :=  ( ^ parameter-type-list )
direct-abstract-declarator :=  ( ^ )

I[290]
unary-expression :=  ^ postfix-expression
unary-expression :=  ^ ++ unary-expression
unary-expression :=  ^ -- unary-expression
unary-expression :=  ^ unary-operator cast-expression
unary-expression :=  ^ sizeof unary-expression
unary-expression :=  ^ sizeof ( type-name )
postfix-expression :=  ^ primary-expression
postfix-expression :=  ^ postfix-expression [ expression ]
postfix-expression :=  ^ postfix-expression ( argument-expression-list )
postfix-expression :=  ^ postfix-expression ( )
postfix-expression :=  ^ postfix-expression . identifier
postfix-expression :=  ^ postfix-expression -> identifier
postfix-expression :=  ^ postfix-expression ++
postfix-expression :=  ^ postfix-expression --
unary-operator :=  ^ &
unary-operator :=  ^ *
unary-operator :=  ^ +
unary-operator :=  ^ -
unary-operator :=  ^ ~
unary-operator :=  ^ !
primary-expression :=  ^ identifier
primary-expression :=  ^ char-const
primary-expression :=  ^ float-const
primary-expression :=  ^ string-const
primary-expression :=  ^ int-const
primary-expression :=  ^ ( expression )
cast-expression :=  ^ unary-expression
cast-expression :=  ^ ( type-name ) cast-expression
cast-expression :=  ( type-name ) ^ cast-expression

I[291]
primary-expression :=  ( expression ) ^

I[292]
struct-or-union-specifier :=  struct-or-union identifier { struct-declaration-list } ^

I[293]
condition-expression :=  ^ logical-OR-expression
condition-expression :=  ^ logical-OR-expression ? expression : condition-expression
unary-expression :=  ^ postfix-expression
unary-expression :=  ^ ++ unary-expression
unary-expression :=  ^ -- unary-expression
unary-expression :=  ^ unary-operator cast-expression
unary-expression :=  ^ sizeof unary-expression
unary-expression :=  ^ sizeof ( type-name )
logical-OR-expression :=  ^ logical-AND-expression
logical-OR-expression :=  ^ logical-OR-expression || logical-AND-expression
postfix-expression :=  ^ primary-expression
postfix-expression :=  ^ postfix-expression [ expression ]
postfix-expression :=  ^ postfix-expression ( argument-expression-list )
postfix-expression :=  ^ postfix-expression ( )
postfix-expression :=  ^ postfix-expression . identifier
postfix-expression :=  ^ postfix-expression -> identifier
postfix-expression :=  ^ postfix-expression ++
postfix-expression :=  ^ postfix-expression --
unary-operator :=  ^ &
unary-operator :=  ^ *
unary-operator :=  ^ +
unary-operator :=  ^ -
unary-operator :=  ^ ~
unary-operator :=  ^ !
logical-AND-expression :=  ^ inclusive-OR-expression
logical-AND-expression :=  ^ logical-AND-expression && inclusive-OR-expression
primary-expression :=  ^ identifier
primary-expression :=  ^ char-const
primary-expression :=  ^ float-const
primary-expression :=  ^ string-const
primary-expression :=  ^ int-const
primary-expression :=  ^ ( expression )
inclusive-OR-expression :=  ^ exclusive-OR-expression
inclusive-OR-expression :=  ^ inclusive-OR-expression | exclusive-OR-expression
exclusive-OR-expression :=  ^ AND-expression
exclusive-OR-expression :=  ^ exclusive-OR-expression ^ AND-expression
AND-expression :=  ^ equality-expression
AND-expression :=  ^ AND-expression & equality-expression
equality-expression :=  ^ relational-expression
equality-expression :=  ^ equality-expression equality-operator relational-expression
relational-expression :=  ^ shift-expression
relational-expression :=  ^ relational-expression relational-operator shift-expression
shift-expression :=  ^ additive-expression
shift-expression :=  ^ shift-expression shift-operator additive-expression
additive-expression :=  ^ multiplicative-expression
additive-expression :=  ^ additive-expression additive-operator multiplicative-expression
multiplicative-expression :=  ^ cast-expression
multiplicative-expression :=  ^ multiplicative-expression multiplicative-operator cast-expression
cast-expression :=  ^ unary-expression
cast-expression :=  ^ ( type-name ) cast-expression
constant-expression :=  ^ condition-expression
struct-declarator :=  declarator : ^ constant-expression

I[294]
struct-declarator-list :=  struct-declarator-list struct-declarator ^

I[295]
struct-declarator :=  : constant-expression ^

I[296]
direct-abstract-declarator :=  direct-abstract-declarator ^ [ constant-expression ]
direct-abstract-declarator :=  direct-abstract-declarator ^ [ ]
direct-abstract-declarator :=  direct-abstract-declarator ^ ( parameter-type-list )
direct-abstract-declarator :=  direct-abstract-declarator ^ ( )
abstract-declarator :=  pointer direct-abstract-declarator ^

I[297]
condition-expression :=  ^ logical-OR-expression
condition-expression :=  ^ logical-OR-expression ? expression : condition-expression
unary-expression :=  ^ postfix-expression
unary-expression :=  ^ ++ unary-expression
unary-expression :=  ^ -- unary-expression
unary-expression :=  ^ unary-operator cast-expression
unary-expression :=  ^ sizeof unary-expression
unary-expression :=  ^ sizeof ( type-name )
logical-OR-expression :=  ^ logical-AND-expression
logical-OR-expression :=  ^ logical-OR-expression || logical-AND-expression
postfix-expression :=  ^ primary-expression
postfix-expression :=  ^ postfix-expression [ expression ]
postfix-expression :=  ^ postfix-expression ( argument-expression-list )
postfix-expression :=  ^ postfix-expression ( )
postfix-expression :=  ^ postfix-expression . identifier
postfix-expression :=  ^ postfix-expression -> identifier
postfix-expression :=  ^ postfix-expression ++
postfix-expression :=  ^ postfix-expression --
unary-operator :=  ^ &
unary-operator :=  ^ *
unary-operator :=  ^ +
unary-operator :=  ^ -
unary-operator :=  ^ ~
unary-operator :=  ^ !
logical-AND-expression :=  ^ inclusive-OR-expression
logical-AND-expression :=  ^ logical-AND-expression && inclusive-OR-expression
primary-expression :=  ^ identifier
primary-expression :=  ^ char-const
primary-expression :=  ^ float-const
primary-expression :=  ^ string-const
primary-expression :=  ^ int-const
primary-expression :=  ^ ( expression )
inclusive-OR-expression :=  ^ exclusive-OR-expression
inclusive-OR-expression :=  ^ inclusive-OR-expression | exclusive-OR-expression
exclusive-OR-expression :=  ^ AND-expression
exclusive-OR-expression :=  ^ exclusive-OR-expression ^ AND-expression
AND-expression :=  ^ equality-expression
AND-expression :=  ^ AND-expression & equality-expression
equality-expression :=  ^ relational-expression
equality-expression :=  ^ equality-expression equality-operator relational-expression
relational-expression :=  ^ shift-expression
relational-expression :=  ^ relational-expression relational-operator shift-expression
shift-expression :=  ^ additive-expression
shift-expression :=  ^ shift-expression shift-operator additive-expression
additive-expression :=  ^ multiplicative-expression
additive-expression :=  ^ additive-expression additive-operator multiplicative-expression
multiplicative-expression :=  ^ cast-expression
multiplicative-expression :=  ^ multiplicative-expression multiplicative-operator cast-expression
cast-expression :=  ^ unary-expression
cast-expression :=  ^ ( type-name ) cast-expression
constant-expression :=  ^ condition-expression
direct-abstract-declarator :=  direct-abstract-declarator [ ^ constant-expression ]
direct-abstract-declarator :=  direct-abstract-declarator [ ^ ]

I[298]
declaration-specifier :=  ^ storage-class-specifier declaration-specifier
declaration-specifier :=  ^ storage-class-specifier
declaration-specifier :=  ^ type-specifier declaration-specifier
declaration-specifier :=  ^ type-specifier
declaration-specifier :=  ^ type-qualifier declaration-specifier
declaration-specifier :=  ^ type-qualifier
storage-class-specifier :=  ^ auto
storage-class-specifier :=  ^ register
storage-class-specifier :=  ^ static
storage-class-specifier :=  ^ extern
storage-class-specifier :=  ^ typedef
type-specifier :=  ^ void
type-specifier :=  ^ char
type-specifier :=  ^ short
type-specifier :=  ^ int
type-specifier :=  ^ long
type-specifier :=  ^ float
type-specifier :=  ^ double
type-specifier :=  ^ signed
type-specifier :=  ^ unsigned
type-specifier :=  ^ struct-or-union-specifier
type-specifier :=  ^ enum-specifier
type-specifier :=  ^ identifier
type-qualifier :=  ^ const
type-qualifier :=  ^ volatile
struct-or-union-specifier :=  ^ struct-or-union identifier { struct-declaration-list }
struct-or-union-specifier :=  ^ struct-or-union { struct-declaration-list }
struct-or-union-specifier :=  ^ struct-or-union identifier
enum-specifier :=  ^ enum identifier { enumerator-list }
enum-specifier :=  ^ enum { enumerator-list }
enum-specifier :=  ^ enum identifier
struct-or-union :=  ^ struct
struct-or-union :=  ^ union
parameter-type-list :=  ^ parameter-list
parameter-type-list :=  ^ parameter-list , . . .
parameter-list :=  ^ parameter-declarator
parameter-list :=  ^ parameter-list , parameter-declarator
parameter-declarator :=  ^ declaration-specifier declarator
parameter-declarator :=  ^ declaration-specifier abstract-declarator
parameter-declarator :=  ^ declaration-specifier
direct-abstract-declarator :=  direct-abstract-declarator ( ^ parameter-type-list )
direct-abstract-declarator :=  direct-abstract-declarator ( ^ )

I[299]
direct-abstract-declarator :=  [ constant-expression ^ ]

I[300]
direct-abstract-declarator :=  [ ] ^

I[301]
direct-abstract-declarator :=  ( parameter-type-list ^ )

I[302]
direct-abstract-declarator :=  ( abstract-declarator ^ )

I[303]
direct-abstract-declarator :=  ( ) ^

I[304]
identifier-list :=  identifier-list , identifier ^

I[305]
parameter-list :=  parameter-list , parameter-declarator ^

I[306]
parameter-type-list :=  parameter-list , . ^ . .

I[307]
enum-specifier :=  enum identifier { enumerator-list } ^

I[308]
enumerator :=  identifier = constant-expression ^

I[309]
initializer :=  { initializer-list } ^

I[310]
assignment-expression :=  ^ condition-expression
assignment-expression :=  ^ unary-expression assignment-operator assignment-expression
condition-expression :=  ^ logical-OR-expression
condition-expression :=  ^ logical-OR-expression ? expression : condition-expression
unary-expression :=  ^ postfix-expression
unary-expression :=  ^ ++ unary-expression
unary-expression :=  ^ -- unary-expression
unary-expression :=  ^ unary-operator cast-expression
unary-expression :=  ^ sizeof unary-expression
unary-expression :=  ^ sizeof ( type-name )
logical-OR-expression :=  ^ logical-AND-expression
logical-OR-expression :=  ^ logical-OR-expression || logical-AND-expression
postfix-expression :=  ^ primary-expression
postfix-expression :=  ^ postfix-expression [ expression ]
postfix-expression :=  ^ postfix-expression ( argument-expression-list )
postfix-expression :=  ^ postfix-expression ( )
postfix-expression :=  ^ postfix-expression . identifier
postfix-expression :=  ^ postfix-expression -> identifier
postfix-expression :=  ^ postfix-expression ++
postfix-expression :=  ^ postfix-expression --
unary-operator :=  ^ &
unary-operator :=  ^ *
unary-operator :=  ^ +
unary-operator :=  ^ -
unary-operator :=  ^ ~
unary-operator :=  ^ !
logical-AND-expression :=  ^ inclusive-OR-expression
logical-AND-expression :=  ^ logical-AND-expression && inclusive-OR-expression
primary-expression :=  ^ identifier
primary-expression :=  ^ char-const
primary-expression :=  ^ float-const
primary-expression :=  ^ string-const
primary-expression :=  ^ int-const
primary-expression :=  ^ ( expression )
inclusive-OR-expression :=  ^ exclusive-OR-expression
inclusive-OR-expression :=  ^ inclusive-OR-expression | exclusive-OR-expression
exclusive-OR-expression :=  ^ AND-expression
exclusive-OR-expression :=  ^ exclusive-OR-expression ^ AND-expression
AND-expression :=  ^ equality-expression
AND-expression :=  ^ AND-expression & equality-expression
equality-expression :=  ^ relational-expression
equality-expression :=  ^ equality-expression equality-operator relational-expression
relational-expression :=  ^ shift-expression
relational-expression :=  ^ relational-expression relational-operator shift-expression
shift-expression :=  ^ additive-expression
shift-expression :=  ^ shift-expression shift-operator additive-expression
additive-expression :=  ^ multiplicative-expression
additive-expression :=  ^ additive-expression additive-operator multiplicative-expression
multiplicative-expression :=  ^ cast-expression
multiplicative-expression :=  ^ multiplicative-expression multiplicative-operator cast-expression
cast-expression :=  ^ unary-expression
cast-expression :=  ^ ( type-name ) cast-expression
initializer :=  ^ assignment-expression
initializer :=  ^ { initializer-list }
initializer :=  ^ { initializer-list , }
initializer :=  { initializer-list , ^ }
initializer-list :=  initializer-list , ^ initializer

I[311]
condition-expression :=  ^ logical-OR-expression
condition-expression :=  ^ logical-OR-expression ? expression : condition-expression
unary-expression :=  ^ postfix-expression
unary-expression :=  ^ ++ unary-expression
unary-expression :=  ^ -- unary-expression
unary-expression :=  ^ unary-operator cast-expression
unary-expression :=  ^ sizeof unary-expression
unary-expression :=  ^ sizeof ( type-name )
logical-OR-expression :=  ^ logical-AND-expression
logical-OR-expression :=  ^ logical-OR-expression || logical-AND-expression
postfix-expression :=  ^ primary-expression
postfix-expression :=  ^ postfix-expression [ expression ]
postfix-expression :=  ^ postfix-expression ( argument-expression-list )
postfix-expression :=  ^ postfix-expression ( )
postfix-expression :=  ^ postfix-expression . identifier
postfix-expression :=  ^ postfix-expression -> identifier
postfix-expression :=  ^ postfix-expression ++
postfix-expression :=  ^ postfix-expression --
unary-operator :=  ^ &
unary-operator :=  ^ *
unary-operator :=  ^ +
unary-operator :=  ^ -
unary-operator :=  ^ ~
unary-operator :=  ^ !
logical-AND-expression :=  ^ inclusive-OR-expression
logical-AND-expression :=  ^ logical-AND-expression && inclusive-OR-expression
primary-expression :=  ^ identifier
primary-expression :=  ^ char-const
primary-expression :=  ^ float-const
primary-expression :=  ^ string-const
primary-expression :=  ^ int-const
primary-expression :=  ^ ( expression )
inclusive-OR-expression :=  ^ exclusive-OR-expression
inclusive-OR-expression :=  ^ inclusive-OR-expression | exclusive-OR-expression
exclusive-OR-expression :=  ^ AND-expression
exclusive-OR-expression :=  ^ exclusive-OR-expression ^ AND-expression
AND-expression :=  ^ equality-expression
AND-expression :=  ^ AND-expression & equality-expression
equality-expression :=  ^ relational-expression
equality-expression :=  ^ equality-expression equality-operator relational-expression
relational-expression :=  ^ shift-expression
relational-expression :=  ^ relational-expression relational-operator shift-expression
shift-expression :=  ^ additive-expression
shift-expression :=  ^ shift-expression shift-operator additive-expression
additive-expression :=  ^ multiplicative-expression
additive-expression :=  ^ additive-expression additive-operator multiplicative-expression
multiplicative-expression :=  ^ cast-expression
multiplicative-expression :=  ^ multiplicative-expression multiplicative-operator cast-expression
cast-expression :=  ^ unary-expression
cast-expression :=  ^ ( type-name ) cast-expression
condition-expression :=  logical-OR-expression ? expression : ^ condition-expression

I[312]
postfix-expression :=  postfix-expression [ expression ] ^

I[313]
postfix-expression :=  postfix-expression ( argument-expression-list ) ^

I[314]
assignment-expression :=  ^ condition-expression
assignment-expression :=  ^ unary-expression assignment-operator assignment-expression
condition-expression :=  ^ logical-OR-expression
condition-expression :=  ^ logical-OR-expression ? expression : condition-expression
unary-expression :=  ^ postfix-expression
unary-expression :=  ^ ++ unary-expression
unary-expression :=  ^ -- unary-expression
unary-expression :=  ^ unary-operator cast-expression
unary-expression :=  ^ sizeof unary-expression
unary-expression :=  ^ sizeof ( type-name )
logical-OR-expression :=  ^ logical-AND-expression
logical-OR-expression :=  ^ logical-OR-expression || logical-AND-expression
postfix-expression :=  ^ primary-expression
postfix-expression :=  ^ postfix-expression [ expression ]
postfix-expression :=  ^ postfix-expression ( argument-expression-list )
postfix-expression :=  ^ postfix-expression ( )
postfix-expression :=  ^ postfix-expression . identifier
postfix-expression :=  ^ postfix-expression -> identifier
postfix-expression :=  ^ postfix-expression ++
postfix-expression :=  ^ postfix-expression --
unary-operator :=  ^ &
unary-operator :=  ^ *
unary-operator :=  ^ +
unary-operator :=  ^ -
unary-operator :=  ^ ~
unary-operator :=  ^ !
logical-AND-expression :=  ^ inclusive-OR-expression
logical-AND-expression :=  ^ logical-AND-expression && inclusive-OR-expression
primary-expression :=  ^ identifier
primary-expression :=  ^ char-const
primary-expression :=  ^ float-const
primary-expression :=  ^ string-const
primary-expression :=  ^ int-const
primary-expression :=  ^ ( expression )
inclusive-OR-expression :=  ^ exclusive-OR-expression
inclusive-OR-expression :=  ^ inclusive-OR-expression | exclusive-OR-expression
exclusive-OR-expression :=  ^ AND-expression
exclusive-OR-expression :=  ^ exclusive-OR-expression ^ AND-expression
AND-expression :=  ^ equality-expression
AND-expression :=  ^ AND-expression & equality-expression
equality-expression :=  ^ relational-expression
equality-expression :=  ^ equality-expression equality-operator relational-expression
relational-expression :=  ^ shift-expression
relational-expression :=  ^ relational-expression relational-operator shift-expression
shift-expression :=  ^ additive-expression
shift-expression :=  ^ shift-expression shift-operator additive-expression
additive-expression :=  ^ multiplicative-expression
additive-expression :=  ^ additive-expression additive-operator multiplicative-expression
multiplicative-expression :=  ^ cast-expression
multiplicative-expression :=  ^ multiplicative-expression multiplicative-operator cast-expression
cast-expression :=  ^ unary-expression
cast-expression :=  ^ ( type-name ) cast-expression
argument-expression-list :=  argument-expression-list , ^ assignment-expression

I[315]
unary-expression :=  sizeof ( type-name ) ^

I[316]
composite-statement :=  ^ { declaration-list statement-list }
composite-statement :=  ^ { declaration-list }
composite-statement :=  ^ { statement-list }
composite-statement :=  ^ { }
statement :=  ^ labeled-statement
statement :=  ^ expression-statement
statement :=  ^ composite-statement
statement :=  ^ seletion-statement
statement :=  ^ iteration-statement
statement :=  ^ jump-statement
labeled-statement :=  ^ identifier : statement
labeled-statement :=  ^ case constant-expression : statement
labeled-statement :=  ^ default : statement
expression-statement :=  ^ expression ;
expression-statement :=  ^ ;
seletion-statement :=  ^ if ( expression ) statement
seletion-statement :=  ^ if ( expression ) statement else statement
seletion-statement :=  ^ switch ( expression ) statement
iteration-statement :=  ^ while ( expression ) statement
iteration-statement :=  ^ do statement while ( expression ) ;
iteration-statement :=  ^ for ( expression ; expression ; expression ) statement
iteration-statement :=  ^ for ( expression ; expression ; ) statement
iteration-statement :=  ^ for ( expression ; ; expression ) statement
iteration-statement :=  ^ for ( expression ; ; ) statement
iteration-statement :=  ^ for ( ; expression ; expression ) statement
iteration-statement :=  ^ for ( ; expression ; ) statement
iteration-statement :=  ^ for ( ; ; expression ) statement
iteration-statement :=  ^ for ( ; ; ) statement
jump-statement :=  ^ goto identifier ;
jump-statement :=  ^ return expression ;
jump-statement :=  ^ return ;
jump-statement :=  ^ continue ;
jump-statement :=  ^ break ;
expression :=  ^ assignment-expression
expression :=  ^ expression , assignment-expression
assignment-expression :=  ^ condition-expression
assignment-expression :=  ^ unary-expression assignment-operator assignment-expression
condition-expression :=  ^ logical-OR-expression
condition-expression :=  ^ logical-OR-expression ? expression : condition-expression
unary-expression :=  ^ postfix-expression
unary-expression :=  ^ ++ unary-expression
unary-expression :=  ^ -- unary-expression
unary-expression :=  ^ unary-operator cast-expression
unary-expression :=  ^ sizeof unary-expression
unary-expression :=  ^ sizeof ( type-name )
logical-OR-expression :=  ^ logical-AND-expression
logical-OR-expression :=  ^ logical-OR-expression || logical-AND-expression
postfix-expression :=  ^ primary-expression
postfix-expression :=  ^ postfix-expression [ expression ]
postfix-expression :=  ^ postfix-expression ( argument-expression-list )
postfix-expression :=  ^ postfix-expression ( )
postfix-expression :=  ^ postfix-expression . identifier
postfix-expression :=  ^ postfix-expression -> identifier
postfix-expression :=  ^ postfix-expression ++
postfix-expression :=  ^ postfix-expression --
unary-operator :=  ^ &
unary-operator :=  ^ *
unary-operator :=  ^ +
unary-operator :=  ^ -
unary-operator :=  ^ ~
unary-operator :=  ^ !
logical-AND-expression :=  ^ inclusive-OR-expression
logical-AND-expression :=  ^ logical-AND-expression && inclusive-OR-expression
primary-expression :=  ^ identifier
primary-expression :=  ^ char-const
primary-expression :=  ^ float-const
primary-expression :=  ^ string-const
primary-expression :=  ^ int-const
primary-expression :=  ^ ( expression )
inclusive-OR-expression :=  ^ exclusive-OR-expression
inclusive-OR-expression :=  ^ inclusive-OR-expression | exclusive-OR-expression
exclusive-OR-expression :=  ^ AND-expression
exclusive-OR-expression :=  ^ exclusive-OR-expression ^ AND-expression
AND-expression :=  ^ equality-expression
AND-expression :=  ^ AND-expression & equality-expression
equality-expression :=  ^ relational-expression
equality-expression :=  ^ equality-expression equality-operator relational-expression
relational-expression :=  ^ shift-expression
relational-expression :=  ^ relational-expression relational-operator shift-expression
shift-expression :=  ^ additive-expression
shift-expression :=  ^ shift-expression shift-operator additive-expression
additive-expression :=  ^ multiplicative-expression
additive-expression :=  ^ additive-expression additive-operator multiplicative-expression
multiplicative-expression :=  ^ cast-expression
multiplicative-expression :=  ^ multiplicative-expression multiplicative-operator cast-expression
cast-expression :=  ^ unary-expression
cast-expression :=  ^ ( type-name ) cast-expression
iteration-statement :=  while ( expression ) ^ statement

I[317]
labeled-statement :=  case constant-expression : statement ^

I[318]
composite-statement :=  ^ { declaration-list statement-list }
composite-statement :=  ^ { declaration-list }
composite-statement :=  ^ { statement-list }
composite-statement :=  ^ { }
statement :=  ^ labeled-statement
statement :=  ^ expression-statement
statement :=  ^ composite-statement
statement :=  ^ seletion-statement
statement :=  ^ iteration-statement
statement :=  ^ jump-statement
labeled-statement :=  ^ identifier : statement
labeled-statement :=  ^ case constant-expression : statement
labeled-statement :=  ^ default : statement
expression-statement :=  ^ expression ;
expression-statement :=  ^ ;
seletion-statement :=  ^ if ( expression ) statement
seletion-statement :=  ^ if ( expression ) statement else statement
seletion-statement :=  ^ switch ( expression ) statement
iteration-statement :=  ^ while ( expression ) statement
iteration-statement :=  ^ do statement while ( expression ) ;
iteration-statement :=  ^ for ( expression ; expression ; expression ) statement
iteration-statement :=  ^ for ( expression ; expression ; ) statement
iteration-statement :=  ^ for ( expression ; ; expression ) statement
iteration-statement :=  ^ for ( expression ; ; ) statement
iteration-statement :=  ^ for ( ; expression ; expression ) statement
iteration-statement :=  ^ for ( ; expression ; ) statement
iteration-statement :=  ^ for ( ; ; expression ) statement
iteration-statement :=  ^ for ( ; ; ) statement
jump-statement :=  ^ goto identifier ;
jump-statement :=  ^ return expression ;
jump-statement :=  ^ return ;
jump-statement :=  ^ continue ;
jump-statement :=  ^ break ;
expression :=  ^ assignment-expression
expression :=  ^ expression , assignment-expression
assignment-expression :=  ^ condition-expression
assignment-expression :=  ^ unary-expression assignment-operator assignment-expression
condition-expression :=  ^ logical-OR-expression
condition-expression :=  ^ logical-OR-expression ? expression : condition-expression
unary-expression :=  ^ postfix-expression
unary-expression :=  ^ ++ unary-expression
unary-expression :=  ^ -- unary-expression
unary-expression :=  ^ unary-operator cast-expression
unary-expression :=  ^ sizeof unary-expression
unary-expression :=  ^ sizeof ( type-name )
logical-OR-expression :=  ^ logical-AND-expression
logical-OR-expression :=  ^ logical-OR-expression || logical-AND-expression
postfix-expression :=  ^ primary-expression
postfix-expression :=  ^ postfix-expression [ expression ]
postfix-expression :=  ^ postfix-expression ( argument-expression-list )
postfix-expression :=  ^ postfix-expression ( )
postfix-expression :=  ^ postfix-expression . identifier
postfix-expression :=  ^ postfix-expression -> identifier
postfix-expression :=  ^ postfix-expression ++
postfix-expression :=  ^ postfix-expression --
unary-operator :=  ^ &
unary-operator :=  ^ *
unary-operator :=  ^ +
unary-operator :=  ^ -
unary-operator :=  ^ ~
unary-operator :=  ^ !
logical-AND-expression :=  ^ inclusive-OR-expression
logical-AND-expression :=  ^ logical-AND-expression && inclusive-OR-expression
primary-expression :=  ^ identifier
primary-expression :=  ^ char-const
primary-expression :=  ^ float-const
primary-expression :=  ^ string-const
primary-expression :=  ^ int-const
primary-expression :=  ^ ( expression )
inclusive-OR-expression :=  ^ exclusive-OR-expression
inclusive-OR-expression :=  ^ inclusive-OR-expression | exclusive-OR-expression
exclusive-OR-expression :=  ^ AND-expression
exclusive-OR-expression :=  ^ exclusive-OR-expression ^ AND-expression
AND-expression :=  ^ equality-expression
AND-expression :=  ^ AND-expression & equality-expression
equality-expression :=  ^ relational-expression
equality-expression :=  ^ equality-expression equality-operator relational-expression
relational-expression :=  ^ shift-expression
relational-expression :=  ^ relational-expression relational-operator shift-expression
shift-expression :=  ^ additive-expression
shift-expression :=  ^ shift-expression shift-operator additive-expression
additive-expression :=  ^ multiplicative-expression
additive-expression :=  ^ additive-expression additive-operator multiplicative-expression
multiplicative-expression :=  ^ cast-expression
multiplicative-expression :=  ^ multiplicative-expression multiplicative-operator cast-expression
cast-expression :=  ^ unary-expression
cast-expression :=  ^ ( type-name ) cast-expression
seletion-statement :=  if ( expression ) ^ statement

I[319]
composite-statement :=  ^ { declaration-list statement-list }
composite-statement :=  ^ { declaration-list }
composite-statement :=  ^ { statement-list }
composite-statement :=  ^ { }
statement :=  ^ labeled-statement
statement :=  ^ expression-statement
statement :=  ^ composite-statement
statement :=  ^ seletion-statement
statement :=  ^ iteration-statement
statement :=  ^ jump-statement
labeled-statement :=  ^ identifier : statement
labeled-statement :=  ^ case constant-expression : statement
labeled-statement :=  ^ default : statement
expression-statement :=  ^ expression ;
expression-statement :=  ^ ;
seletion-statement :=  ^ if ( expression ) statement
seletion-statement :=  ^ if ( expression ) statement else statement
seletion-statement :=  ^ switch ( expression ) statement
iteration-statement :=  ^ while ( expression ) statement
iteration-statement :=  ^ do statement while ( expression ) ;
iteration-statement :=  ^ for ( expression ; expression ; expression ) statement
iteration-statement :=  ^ for ( expression ; expression ; ) statement
iteration-statement :=  ^ for ( expression ; ; expression ) statement
iteration-statement :=  ^ for ( expression ; ; ) statement
iteration-statement :=  ^ for ( ; expression ; expression ) statement
iteration-statement :=  ^ for ( ; expression ; ) statement
iteration-statement :=  ^ for ( ; ; expression ) statement
iteration-statement :=  ^ for ( ; ; ) statement
jump-statement :=  ^ goto identifier ;
jump-statement :=  ^ return expression ;
jump-statement :=  ^ return ;
jump-statement :=  ^ continue ;
jump-statement :=  ^ break ;
expression :=  ^ assignment-expression
expression :=  ^ expression , assignment-expression
assignment-expression :=  ^ condition-expression
assignment-expression :=  ^ unary-expression assignment-operator assignment-expression
condition-expression :=  ^ logical-OR-expression
condition-expression :=  ^ logical-OR-expression ? expression : condition-expression
unary-expression :=  ^ postfix-expression
unary-expression :=  ^ ++ unary-expression
unary-expression :=  ^ -- unary-expression
unary-expression :=  ^ unary-operator cast-expression
unary-expression :=  ^ sizeof unary-expression
unary-expression :=  ^ sizeof ( type-name )
logical-OR-expression :=  ^ logical-AND-expression
logical-OR-expression :=  ^ logical-OR-expression || logical-AND-expression
postfix-expression :=  ^ primary-expression
postfix-expression :=  ^ postfix-expression [ expression ]
postfix-expression :=  ^ postfix-expression ( argument-expression-list )
postfix-expression :=  ^ postfix-expression ( )
postfix-expression :=  ^ postfix-expression . identifier
postfix-expression :=  ^ postfix-expression -> identifier
postfix-expression :=  ^ postfix-expression ++
postfix-expression :=  ^ postfix-expression --
unary-operator :=  ^ &
unary-operator :=  ^ *
unary-operator :=  ^ +
unary-operator :=  ^ -
unary-operator :=  ^ ~
unary-operator :=  ^ !
logical-AND-expression :=  ^ inclusive-OR-expression
logical-AND-expression :=  ^ logical-AND-expression && inclusive-OR-expression
primary-expression :=  ^ identifier
primary-expression :=  ^ char-const
primary-expression :=  ^ float-const
primary-expression :=  ^ string-const
primary-expression :=  ^ int-const
primary-expression :=  ^ ( expression )
inclusive-OR-expression :=  ^ exclusive-OR-expression
inclusive-OR-expression :=  ^ inclusive-OR-expression | exclusive-OR-expression
exclusive-OR-expression :=  ^ AND-expression
exclusive-OR-expression :=  ^ exclusive-OR-expression ^ AND-expression
AND-expression :=  ^ equality-expression
AND-expression :=  ^ AND-expression & equality-expression
equality-expression :=  ^ relational-expression
equality-expression :=  ^ equality-expression equality-operator relational-expression
relational-expression :=  ^ shift-expression
relational-expression :=  ^ relational-expression relational-operator shift-expression
shift-expression :=  ^ additive-expression
shift-expression :=  ^ shift-expression shift-operator additive-expression
additive-expression :=  ^ multiplicative-expression
additive-expression :=  ^ additive-expression additive-operator multiplicative-expression
multiplicative-expression :=  ^ cast-expression
multiplicative-expression :=  ^ multiplicative-expression multiplicative-operator cast-expression
cast-expression :=  ^ unary-expression
cast-expression :=  ^ ( type-name ) cast-expression
seletion-statement :=  if ( expression ) ^ statement else statement

I[320]
composite-statement :=  ^ { declaration-list statement-list }
composite-statement :=  ^ { declaration-list }
composite-statement :=  ^ { statement-list }
composite-statement :=  ^ { }
statement :=  ^ labeled-statement
statement :=  ^ expression-statement
statement :=  ^ composite-statement
statement :=  ^ seletion-statement
statement :=  ^ iteration-statement
statement :=  ^ jump-statement
labeled-statement :=  ^ identifier : statement
labeled-statement :=  ^ case constant-expression : statement
labeled-statement :=  ^ default : statement
expression-statement :=  ^ expression ;
expression-statement :=  ^ ;
seletion-statement :=  ^ if ( expression ) statement
seletion-statement :=  ^ if ( expression ) statement else statement
seletion-statement :=  ^ switch ( expression ) statement
iteration-statement :=  ^ while ( expression ) statement
iteration-statement :=  ^ do statement while ( expression ) ;
iteration-statement :=  ^ for ( expression ; expression ; expression ) statement
iteration-statement :=  ^ for ( expression ; expression ; ) statement
iteration-statement :=  ^ for ( expression ; ; expression ) statement
iteration-statement :=  ^ for ( expression ; ; ) statement
iteration-statement :=  ^ for ( ; expression ; expression ) statement
iteration-statement :=  ^ for ( ; expression ; ) statement
iteration-statement :=  ^ for ( ; ; expression ) statement
iteration-statement :=  ^ for ( ; ; ) statement
jump-statement :=  ^ goto identifier ;
jump-statement :=  ^ return expression ;
jump-statement :=  ^ return ;
jump-statement :=  ^ continue ;
jump-statement :=  ^ break ;
expression :=  ^ assignment-expression
expression :=  ^ expression , assignment-expression
assignment-expression :=  ^ condition-expression
assignment-expression :=  ^ unary-expression assignment-operator assignment-expression
condition-expression :=  ^ logical-OR-expression
condition-expression :=  ^ logical-OR-expression ? expression : condition-expression
unary-expression :=  ^ postfix-expression
unary-expression :=  ^ ++ unary-expression
unary-expression :=  ^ -- unary-expression
unary-expression :=  ^ unary-operator cast-expression
unary-expression :=  ^ sizeof unary-expression
unary-expression :=  ^ sizeof ( type-name )
logical-OR-expression :=  ^ logical-AND-expression
logical-OR-expression :=  ^ logical-OR-expression || logical-AND-expression
postfix-expression :=  ^ primary-expression
postfix-expression :=  ^ postfix-expression [ expression ]
postfix-expression :=  ^ postfix-expression ( argument-expression-list )
postfix-expression :=  ^ postfix-expression ( )
postfix-expression :=  ^ postfix-expression . identifier
postfix-expression :=  ^ postfix-expression -> identifier
postfix-expression :=  ^ postfix-expression ++
postfix-expression :=  ^ postfix-expression --
unary-operator :=  ^ &
unary-operator :=  ^ *
unary-operator :=  ^ +
unary-operator :=  ^ -
unary-operator :=  ^ ~
unary-operator :=  ^ !
logical-AND-expression :=  ^ inclusive-OR-expression
logical-AND-expression :=  ^ logical-AND-expression && inclusive-OR-expression
primary-expression :=  ^ identifier
primary-expression :=  ^ char-const
primary-expression :=  ^ float-const
primary-expression :=  ^ string-const
primary-expression :=  ^ int-const
primary-expression :=  ^ ( expression )
inclusive-OR-expression :=  ^ exclusive-OR-expression
inclusive-OR-expression :=  ^ inclusive-OR-expression | exclusive-OR-expression
exclusive-OR-expression :=  ^ AND-expression
exclusive-OR-expression :=  ^ exclusive-OR-expression ^ AND-expression
AND-expression :=  ^ equality-expression
AND-expression :=  ^ AND-expression & equality-expression
equality-expression :=  ^ relational-expression
equality-expression :=  ^ equality-expression equality-operator relational-expression
relational-expression :=  ^ shift-expression
relational-expression :=  ^ relational-expression relational-operator shift-expression
shift-expression :=  ^ additive-expression
shift-expression :=  ^ shift-expression shift-operator additive-expression
additive-expression :=  ^ multiplicative-expression
additive-expression :=  ^ additive-expression additive-operator multiplicative-expression
multiplicative-expression :=  ^ cast-expression
multiplicative-expression :=  ^ multiplicative-expression multiplicative-operator cast-expression
cast-expression :=  ^ unary-expression
cast-expression :=  ^ ( type-name ) cast-expression
seletion-statement :=  switch ( expression ) ^ statement

I[321]
expression :=  ^ assignment-expression
expression :=  ^ expression , assignment-expression
assignment-expression :=  ^ condition-expression
assignment-expression :=  ^ unary-expression assignment-operator assignment-expression
condition-expression :=  ^ logical-OR-expression
condition-expression :=  ^ logical-OR-expression ? expression : condition-expression
unary-expression :=  ^ postfix-expression
unary-expression :=  ^ ++ unary-expression
unary-expression :=  ^ -- unary-expression
unary-expression :=  ^ unary-operator cast-expression
unary-expression :=  ^ sizeof unary-expression
unary-expression :=  ^ sizeof ( type-name )
logical-OR-expression :=  ^ logical-AND-expression
logical-OR-expression :=  ^ logical-OR-expression || logical-AND-expression
postfix-expression :=  ^ primary-expression
postfix-expression :=  ^ postfix-expression [ expression ]
postfix-expression :=  ^ postfix-expression ( argument-expression-list )
postfix-expression :=  ^ postfix-expression ( )
postfix-expression :=  ^ postfix-expression . identifier
postfix-expression :=  ^ postfix-expression -> identifier
postfix-expression :=  ^ postfix-expression ++
postfix-expression :=  ^ postfix-expression --
unary-operator :=  ^ &
unary-operator :=  ^ *
unary-operator :=  ^ +
unary-operator :=  ^ -
unary-operator :=  ^ ~
unary-operator :=  ^ !
logical-AND-expression :=  ^ inclusive-OR-expression
logical-AND-expression :=  ^ logical-AND-expression && inclusive-OR-expression
primary-expression :=  ^ identifier
primary-expression :=  ^ char-const
primary-expression :=  ^ float-const
primary-expression :=  ^ string-const
primary-expression :=  ^ int-const
primary-expression :=  ^ ( expression )
inclusive-OR-expression :=  ^ exclusive-OR-expression
inclusive-OR-expression :=  ^ inclusive-OR-expression | exclusive-OR-expression
exclusive-OR-expression :=  ^ AND-expression
exclusive-OR-expression :=  ^ exclusive-OR-expression ^ AND-expression
AND-expression :=  ^ equality-expression
AND-expression :=  ^ AND-expression & equality-expression
equality-expression :=  ^ relational-expression
equality-expression :=  ^ equality-expression equality-operator relational-expression
relational-expression :=  ^ shift-expression
relational-expression :=  ^ relational-expression relational-operator shift-expression
shift-expression :=  ^ additive-expression
shift-expression :=  ^ shift-expression shift-operator additive-expression
additive-expression :=  ^ multiplicative-expression
additive-expression :=  ^ additive-expression additive-operator multiplicative-expression
multiplicative-expression :=  ^ cast-expression
multiplicative-expression :=  ^ multiplicative-expression multiplicative-operator cast-expression
cast-expression :=  ^ unary-expression
cast-expression :=  ^ ( type-name ) cast-expression
iteration-statement :=  do statement while ( ^ expression ) ;

I[322]
expression :=  ^ assignment-expression
expression :=  ^ expression , assignment-expression
assignment-expression :=  ^ condition-expression
assignment-expression :=  ^ unary-expression assignment-operator assignment-expression
condition-expression :=  ^ logical-OR-expression
condition-expression :=  ^ logical-OR-expression ? expression : condition-expression
unary-expression :=  ^ postfix-expression
unary-expression :=  ^ ++ unary-expression
unary-expression :=  ^ -- unary-expression
unary-expression :=  ^ unary-operator cast-expression
unary-expression :=  ^ sizeof unary-expression
unary-expression :=  ^ sizeof ( type-name )
logical-OR-expression :=  ^ logical-AND-expression
logical-OR-expression :=  ^ logical-OR-expression || logical-AND-expression
postfix-expression :=  ^ primary-expression
postfix-expression :=  ^ postfix-expression [ expression ]
postfix-expression :=  ^ postfix-expression ( argument-expression-list )
postfix-expression :=  ^ postfix-expression ( )
postfix-expression :=  ^ postfix-expression . identifier
postfix-expression :=  ^ postfix-expression -> identifier
postfix-expression :=  ^ postfix-expression ++
postfix-expression :=  ^ postfix-expression --
unary-operator :=  ^ &
unary-operator :=  ^ *
unary-operator :=  ^ +
unary-operator :=  ^ -
unary-operator :=  ^ ~
unary-operator :=  ^ !
logical-AND-expression :=  ^ inclusive-OR-expression
logical-AND-expression :=  ^ logical-AND-expression && inclusive-OR-expression
primary-expression :=  ^ identifier
primary-expression :=  ^ char-const
primary-expression :=  ^ float-const
primary-expression :=  ^ string-const
primary-expression :=  ^ int-const
primary-expression :=  ^ ( expression )
inclusive-OR-expression :=  ^ exclusive-OR-expression
inclusive-OR-expression :=  ^ inclusive-OR-expression | exclusive-OR-expression
exclusive-OR-expression :=  ^ AND-expression
exclusive-OR-expression :=  ^ exclusive-OR-expression ^ AND-expression
AND-expression :=  ^ equality-expression
AND-expression :=  ^ AND-expression & equality-expression
equality-expression :=  ^ relational-expression
equality-expression :=  ^ equality-expression equality-operator relational-expression
relational-expression :=  ^ shift-expression
relational-expression :=  ^ relational-expression relational-operator shift-expression
shift-expression :=  ^ additive-expression
shift-expression :=  ^ shift-expression shift-operator additive-expression
additive-expression :=  ^ multiplicative-expression
additive-expression :=  ^ additive-expression additive-operator multiplicative-expression
multiplicative-expression :=  ^ cast-expression
multiplicative-expression :=  ^ multiplicative-expression multiplicative-operator cast-expression
cast-expression :=  ^ unary-expression
cast-expression :=  ^ ( type-name ) cast-expression
iteration-statement :=  for ( expression ; ^ expression ; expression ) statement
iteration-statement :=  for ( expression ; ^ expression ; ) statement
iteration-statement :=  for ( expression ; ^ ; expression ) statement
iteration-statement :=  for ( expression ; ^ ; ) statement

I[323]
expression :=  expression ^ , assignment-expression
iteration-statement :=  for ( ; expression ^ ; expression ) statement
iteration-statement :=  for ( ; expression ^ ; ) statement

I[324]
expression :=  ^ assignment-expression
expression :=  ^ expression , assignment-expression
assignment-expression :=  ^ condition-expression
assignment-expression :=  ^ unary-expression assignment-operator assignment-expression
condition-expression :=  ^ logical-OR-expression
condition-expression :=  ^ logical-OR-expression ? expression : condition-expression
unary-expression :=  ^ postfix-expression
unary-expression :=  ^ ++ unary-expression
unary-expression :=  ^ -- unary-expression
unary-expression :=  ^ unary-operator cast-expression
unary-expression :=  ^ sizeof unary-expression
unary-expression :=  ^ sizeof ( type-name )
logical-OR-expression :=  ^ logical-AND-expression
logical-OR-expression :=  ^ logical-OR-expression || logical-AND-expression
postfix-expression :=  ^ primary-expression
postfix-expression :=  ^ postfix-expression [ expression ]
postfix-expression :=  ^ postfix-expression ( argument-expression-list )
postfix-expression :=  ^ postfix-expression ( )
postfix-expression :=  ^ postfix-expression . identifier
postfix-expression :=  ^ postfix-expression -> identifier
postfix-expression :=  ^ postfix-expression ++
postfix-expression :=  ^ postfix-expression --
unary-operator :=  ^ &
unary-operator :=  ^ *
unary-operator :=  ^ +
unary-operator :=  ^ -
unary-operator :=  ^ ~
unary-operator :=  ^ !
logical-AND-expression :=  ^ inclusive-OR-expression
logical-AND-expression :=  ^ logical-AND-expression && inclusive-OR-expression
primary-expression :=  ^ identifier
primary-expression :=  ^ char-const
primary-expression :=  ^ float-const
primary-expression :=  ^ string-const
primary-expression :=  ^ int-const
primary-expression :=  ^ ( expression )
inclusive-OR-expression :=  ^ exclusive-OR-expression
inclusive-OR-expression :=  ^ inclusive-OR-expression | exclusive-OR-expression
exclusive-OR-expression :=  ^ AND-expression
exclusive-OR-expression :=  ^ exclusive-OR-expression ^ AND-expression
AND-expression :=  ^ equality-expression
AND-expression :=  ^ AND-expression & equality-expression
equality-expression :=  ^ relational-expression
equality-expression :=  ^ equality-expression equality-operator relational-expression
relational-expression :=  ^ shift-expression
relational-expression :=  ^ relational-expression relational-operator shift-expression
shift-expression :=  ^ additive-expression
shift-expression :=  ^ shift-expression shift-operator additive-expression
additive-expression :=  ^ multiplicative-expression
additive-expression :=  ^ additive-expression additive-operator multiplicative-expression
multiplicative-expression :=  ^ cast-expression
multiplicative-expression :=  ^ multiplicative-expression multiplicative-operator cast-expression
cast-expression :=  ^ unary-expression
cast-expression :=  ^ ( type-name ) cast-expression
iteration-statement :=  for ( ; ; ^ expression ) statement
iteration-statement :=  for ( ; ; ^ ) statement

I[325]
cast-expression :=  ( type-name ) cast-expression ^

I[326]
struct-declarator :=  declarator : constant-expression ^

I[327]
direct-abstract-declarator :=  direct-abstract-declarator [ constant-expression ^ ]

I[328]
direct-abstract-declarator :=  direct-abstract-declarator [ ] ^

I[329]
direct-abstract-declarator :=  direct-abstract-declarator ( parameter-type-list ^ )

I[330]
direct-abstract-declarator :=  direct-abstract-declarator ( ) ^

I[331]
direct-abstract-declarator :=  [ constant-expression ] ^

I[332]
direct-abstract-declarator :=  ( parameter-type-list ) ^

I[333]
direct-abstract-declarator :=  ( abstract-declarator ) ^

I[334]
parameter-type-list :=  parameter-list , . . ^ .

I[335]
initializer-list :=  initializer-list , initializer ^

I[336]
initializer :=  { initializer-list , } ^

I[337]
condition-expression :=  logical-OR-expression ? expression : condition-expression ^

I[338]
argument-expression-list :=  argument-expression-list , assignment-expression ^

I[339]
iteration-statement :=  while ( expression ) statement ^

I[340]
seletion-statement :=  if ( expression ) statement ^

I[341]
seletion-statement :=  if ( expression ) statement ^ else statement

I[342]
seletion-statement :=  switch ( expression ) statement ^

I[343]
expression :=  expression ^ , assignment-expression
iteration-statement :=  do statement while ( expression ^ ) ;

I[344]
expression :=  expression ^ , assignment-expression
iteration-statement :=  for ( expression ; expression ^ ; expression ) statement
iteration-statement :=  for ( expression ; expression ^ ; ) statement

I[345]
expression :=  ^ assignment-expression
expression :=  ^ expression , assignment-expression
assignment-expression :=  ^ condition-expression
assignment-expression :=  ^ unary-expression assignment-operator assignment-expression
condition-expression :=  ^ logical-OR-expression
condition-expression :=  ^ logical-OR-expression ? expression : condition-expression
unary-expression :=  ^ postfix-expression
unary-expression :=  ^ ++ unary-expression
unary-expression :=  ^ -- unary-expression
unary-expression :=  ^ unary-operator cast-expression
unary-expression :=  ^ sizeof unary-expression
unary-expression :=  ^ sizeof ( type-name )
logical-OR-expression :=  ^ logical-AND-expression
logical-OR-expression :=  ^ logical-OR-expression || logical-AND-expression
postfix-expression :=  ^ primary-expression
postfix-expression :=  ^ postfix-expression [ expression ]
postfix-expression :=  ^ postfix-expression ( argument-expression-list )
postfix-expression :=  ^ postfix-expression ( )
postfix-expression :=  ^ postfix-expression . identifier
postfix-expression :=  ^ postfix-expression -> identifier
postfix-expression :=  ^ postfix-expression ++
postfix-expression :=  ^ postfix-expression --
unary-operator :=  ^ &
unary-operator :=  ^ *
unary-operator :=  ^ +
unary-operator :=  ^ -
unary-operator :=  ^ ~
unary-operator :=  ^ !
logical-AND-expression :=  ^ inclusive-OR-expression
logical-AND-expression :=  ^ logical-AND-expression && inclusive-OR-expression
primary-expression :=  ^ identifier
primary-expression :=  ^ char-const
primary-expression :=  ^ float-const
primary-expression :=  ^ string-const
primary-expression :=  ^ int-const
primary-expression :=  ^ ( expression )
inclusive-OR-expression :=  ^ exclusive-OR-expression
inclusive-OR-expression :=  ^ inclusive-OR-expression | exclusive-OR-expression
exclusive-OR-expression :=  ^ AND-expression
exclusive-OR-expression :=  ^ exclusive-OR-expression ^ AND-expression
AND-expression :=  ^ equality-expression
AND-expression :=  ^ AND-expression & equality-expression
equality-expression :=  ^ relational-expression
equality-expression :=  ^ equality-expression equality-operator relational-expression
relational-expression :=  ^ shift-expression
relational-expression :=  ^ relational-expression relational-operator shift-expression
shift-expression :=  ^ additive-expression
shift-expression :=  ^ shift-expression shift-operator additive-expression
additive-expression :=  ^ multiplicative-expression
additive-expression :=  ^ additive-expression additive-operator multiplicative-expression
multiplicative-expression :=  ^ cast-expression
multiplicative-expression :=  ^ multiplicative-expression multiplicative-operator cast-expression
cast-expression :=  ^ unary-expression
cast-expression :=  ^ ( type-name ) cast-expression
iteration-statement :=  for ( expression ; ; ^ expression ) statement
iteration-statement :=  for ( expression ; ; ^ ) statement

I[346]
expression :=  ^ assignment-expression
expression :=  ^ expression , assignment-expression
assignment-expression :=  ^ condition-expression
assignment-expression :=  ^ unary-expression assignment-operator assignment-expression
condition-expression :=  ^ logical-OR-expression
condition-expression :=  ^ logical-OR-expression ? expression : condition-expression
unary-expression :=  ^ postfix-expression
unary-expression :=  ^ ++ unary-expression
unary-expression :=  ^ -- unary-expression
unary-expression :=  ^ unary-operator cast-expression
unary-expression :=  ^ sizeof unary-expression
unary-expression :=  ^ sizeof ( type-name )
logical-OR-expression :=  ^ logical-AND-expression
logical-OR-expression :=  ^ logical-OR-expression || logical-AND-expression
postfix-expression :=  ^ primary-expression
postfix-expression :=  ^ postfix-expression [ expression ]
postfix-expression :=  ^ postfix-expression ( argument-expression-list )
postfix-expression :=  ^ postfix-expression ( )
postfix-expression :=  ^ postfix-expression . identifier
postfix-expression :=  ^ postfix-expression -> identifier
postfix-expression :=  ^ postfix-expression ++
postfix-expression :=  ^ postfix-expression --
unary-operator :=  ^ &
unary-operator :=  ^ *
unary-operator :=  ^ +
unary-operator :=  ^ -
unary-operator :=  ^ ~
unary-operator :=  ^ !
logical-AND-expression :=  ^ inclusive-OR-expression
logical-AND-expression :=  ^ logical-AND-expression && inclusive-OR-expression
primary-expression :=  ^ identifier
primary-expression :=  ^ char-const
primary-expression :=  ^ float-const
primary-expression :=  ^ string-const
primary-expression :=  ^ int-const
primary-expression :=  ^ ( expression )
inclusive-OR-expression :=  ^ exclusive-OR-expression
inclusive-OR-expression :=  ^ inclusive-OR-expression | exclusive-OR-expression
exclusive-OR-expression :=  ^ AND-expression
exclusive-OR-expression :=  ^ exclusive-OR-expression ^ AND-expression
AND-expression :=  ^ equality-expression
AND-expression :=  ^ AND-expression & equality-expression
equality-expression :=  ^ relational-expression
equality-expression :=  ^ equality-expression equality-operator relational-expression
relational-expression :=  ^ shift-expression
relational-expression :=  ^ relational-expression relational-operator shift-expression
shift-expression :=  ^ additive-expression
shift-expression :=  ^ shift-expression shift-operator additive-expression
additive-expression :=  ^ multiplicative-expression
additive-expression :=  ^ additive-expression additive-operator multiplicative-expression
multiplicative-expression :=  ^ cast-expression
multiplicative-expression :=  ^ multiplicative-expression multiplicative-operator cast-expression
cast-expression :=  ^ unary-expression
cast-expression :=  ^ ( type-name ) cast-expression
iteration-statement :=  for ( ; expression ; ^ expression ) statement
iteration-statement :=  for ( ; expression ; ^ ) statement

I[347]
expression :=  expression ^ , assignment-expression
iteration-statement :=  for ( ; ; expression ^ ) statement

I[348]
composite-statement :=  ^ { declaration-list statement-list }
composite-statement :=  ^ { declaration-list }
composite-statement :=  ^ { statement-list }
composite-statement :=  ^ { }
statement :=  ^ labeled-statement
statement :=  ^ expression-statement
statement :=  ^ composite-statement
statement :=  ^ seletion-statement
statement :=  ^ iteration-statement
statement :=  ^ jump-statement
labeled-statement :=  ^ identifier : statement
labeled-statement :=  ^ case constant-expression : statement
labeled-statement :=  ^ default : statement
expression-statement :=  ^ expression ;
expression-statement :=  ^ ;
seletion-statement :=  ^ if ( expression ) statement
seletion-statement :=  ^ if ( expression ) statement else statement
seletion-statement :=  ^ switch ( expression ) statement
iteration-statement :=  ^ while ( expression ) statement
iteration-statement :=  ^ do statement while ( expression ) ;
iteration-statement :=  ^ for ( expression ; expression ; expression ) statement
iteration-statement :=  ^ for ( expression ; expression ; ) statement
iteration-statement :=  ^ for ( expression ; ; expression ) statement
iteration-statement :=  ^ for ( expression ; ; ) statement
iteration-statement :=  ^ for ( ; expression ; expression ) statement
iteration-statement :=  ^ for ( ; expression ; ) statement
iteration-statement :=  ^ for ( ; ; expression ) statement
iteration-statement :=  ^ for ( ; ; ) statement
jump-statement :=  ^ goto identifier ;
jump-statement :=  ^ return expression ;
jump-statement :=  ^ return ;
jump-statement :=  ^ continue ;
jump-statement :=  ^ break ;
expression :=  ^ assignment-expression
expression :=  ^ expression , assignment-expression
assignment-expression :=  ^ condition-expression
assignment-expression :=  ^ unary-expression assignment-operator assignment-expression
condition-expression :=  ^ logical-OR-expression
condition-expression :=  ^ logical-OR-expression ? expression : condition-expression
unary-expression :=  ^ postfix-expression
unary-expression :=  ^ ++ unary-expression
unary-expression :=  ^ -- unary-expression
unary-expression :=  ^ unary-operator cast-expression
unary-expression :=  ^ sizeof unary-expression
unary-expression :=  ^ sizeof ( type-name )
logical-OR-expression :=  ^ logical-AND-expression
logical-OR-expression :=  ^ logical-OR-expression || logical-AND-expression
postfix-expression :=  ^ primary-expression
postfix-expression :=  ^ postfix-expression [ expression ]
postfix-expression :=  ^ postfix-expression ( argument-expression-list )
postfix-expression :=  ^ postfix-expression ( )
postfix-expression :=  ^ postfix-expression . identifier
postfix-expression :=  ^ postfix-expression -> identifier
postfix-expression :=  ^ postfix-expression ++
postfix-expression :=  ^ postfix-expression --
unary-operator :=  ^ &
unary-operator :=  ^ *
unary-operator :=  ^ +
unary-operator :=  ^ -
unary-operator :=  ^ ~
unary-operator :=  ^ !
logical-AND-expression :=  ^ inclusive-OR-expression
logical-AND-expression :=  ^ logical-AND-expression && inclusive-OR-expression
primary-expression :=  ^ identifier
primary-expression :=  ^ char-const
primary-expression :=  ^ float-const
primary-expression :=  ^ string-const
primary-expression :=  ^ int-const
primary-expression :=  ^ ( expression )
inclusive-OR-expression :=  ^ exclusive-OR-expression
inclusive-OR-expression :=  ^ inclusive-OR-expression | exclusive-OR-expression
exclusive-OR-expression :=  ^ AND-expression
exclusive-OR-expression :=  ^ exclusive-OR-expression ^ AND-expression
AND-expression :=  ^ equality-expression
AND-expression :=  ^ AND-expression & equality-expression
equality-expression :=  ^ relational-expression
equality-expression :=  ^ equality-expression equality-operator relational-expression
relational-expression :=  ^ shift-expression
relational-expression :=  ^ relational-expression relational-operator shift-expression
shift-expression :=  ^ additive-expression
shift-expression :=  ^ shift-expression shift-operator additive-expression
additive-expression :=  ^ multiplicative-expression
additive-expression :=  ^ additive-expression additive-operator multiplicative-expression
multiplicative-expression :=  ^ cast-expression
multiplicative-expression :=  ^ multiplicative-expression multiplicative-operator cast-expression
cast-expression :=  ^ unary-expression
cast-expression :=  ^ ( type-name ) cast-expression
iteration-statement :=  for ( ; ; ) ^ statement

I[349]
direct-abstract-declarator :=  direct-abstract-declarator [ constant-expression ] ^

I[350]
direct-abstract-declarator :=  direct-abstract-declarator ( parameter-type-list ) ^

I[351]
parameter-type-list :=  parameter-list , . . . ^

I[352]
composite-statement :=  ^ { declaration-list statement-list }
composite-statement :=  ^ { declaration-list }
composite-statement :=  ^ { statement-list }
composite-statement :=  ^ { }
statement :=  ^ labeled-statement
statement :=  ^ expression-statement
statement :=  ^ composite-statement
statement :=  ^ seletion-statement
statement :=  ^ iteration-statement
statement :=  ^ jump-statement
labeled-statement :=  ^ identifier : statement
labeled-statement :=  ^ case constant-expression : statement
labeled-statement :=  ^ default : statement
expression-statement :=  ^ expression ;
expression-statement :=  ^ ;
seletion-statement :=  ^ if ( expression ) statement
seletion-statement :=  ^ if ( expression ) statement else statement
seletion-statement :=  ^ switch ( expression ) statement
iteration-statement :=  ^ while ( expression ) statement
iteration-statement :=  ^ do statement while ( expression ) ;
iteration-statement :=  ^ for ( expression ; expression ; expression ) statement
iteration-statement :=  ^ for ( expression ; expression ; ) statement
iteration-statement :=  ^ for ( expression ; ; expression ) statement
iteration-statement :=  ^ for ( expression ; ; ) statement
iteration-statement :=  ^ for ( ; expression ; expression ) statement
iteration-statement :=  ^ for ( ; expression ; ) statement
iteration-statement :=  ^ for ( ; ; expression ) statement
iteration-statement :=  ^ for ( ; ; ) statement
jump-statement :=  ^ goto identifier ;
jump-statement :=  ^ return expression ;
jump-statement :=  ^ return ;
jump-statement :=  ^ continue ;
jump-statement :=  ^ break ;
expression :=  ^ assignment-expression
expression :=  ^ expression , assignment-expression
assignment-expression :=  ^ condition-expression
assignment-expression :=  ^ unary-expression assignment-operator assignment-expression
condition-expression :=  ^ logical-OR-expression
condition-expression :=  ^ logical-OR-expression ? expression : condition-expression
unary-expression :=  ^ postfix-expression
unary-expression :=  ^ ++ unary-expression
unary-expression :=  ^ -- unary-expression
unary-expression :=  ^ unary-operator cast-expression
unary-expression :=  ^ sizeof unary-expression
unary-expression :=  ^ sizeof ( type-name )
logical-OR-expression :=  ^ logical-AND-expression
logical-OR-expression :=  ^ logical-OR-expression || logical-AND-expression
postfix-expression :=  ^ primary-expression
postfix-expression :=  ^ postfix-expression [ expression ]
postfix-expression :=  ^ postfix-expression ( argument-expression-list )
postfix-expression :=  ^ postfix-expression ( )
postfix-expression :=  ^ postfix-expression . identifier
postfix-expression :=  ^ postfix-expression -> identifier
postfix-expression :=  ^ postfix-expression ++
postfix-expression :=  ^ postfix-expression --
unary-operator :=  ^ &
unary-operator :=  ^ *
unary-operator :=  ^ +
unary-operator :=  ^ -
unary-operator :=  ^ ~
unary-operator :=  ^ !
logical-AND-expression :=  ^ inclusive-OR-expression
logical-AND-expression :=  ^ logical-AND-expression && inclusive-OR-expression
primary-expression :=  ^ identifier
primary-expression :=  ^ char-const
primary-expression :=  ^ float-const
primary-expression :=  ^ string-const
primary-expression :=  ^ int-const
primary-expression :=  ^ ( expression )
inclusive-OR-expression :=  ^ exclusive-OR-expression
inclusive-OR-expression :=  ^ inclusive-OR-expression | exclusive-OR-expression
exclusive-OR-expression :=  ^ AND-expression
exclusive-OR-expression :=  ^ exclusive-OR-expression ^ AND-expression
AND-expression :=  ^ equality-expression
AND-expression :=  ^ AND-expression & equality-expression
equality-expression :=  ^ relational-expression
equality-expression :=  ^ equality-expression equality-operator relational-expression
relational-expression :=  ^ shift-expression
relational-expression :=  ^ relational-expression relational-operator shift-expression
shift-expression :=  ^ additive-expression
shift-expression :=  ^ shift-expression shift-operator additive-expression
additive-expression :=  ^ multiplicative-expression
additive-expression :=  ^ additive-expression additive-operator multiplicative-expression
multiplicative-expression :=  ^ cast-expression
multiplicative-expression :=  ^ multiplicative-expression multiplicative-operator cast-expression
cast-expression :=  ^ unary-expression
cast-expression :=  ^ ( type-name ) cast-expression
seletion-statement :=  if ( expression ) statement else ^ statement

I[353]
iteration-statement :=  do statement while ( expression ) ^ ;

I[354]
expression :=  ^ assignment-expression
expression :=  ^ expression , assignment-expression
assignment-expression :=  ^ condition-expression
assignment-expression :=  ^ unary-expression assignment-operator assignment-expression
condition-expression :=  ^ logical-OR-expression
condition-expression :=  ^ logical-OR-expression ? expression : condition-expression
unary-expression :=  ^ postfix-expression
unary-expression :=  ^ ++ unary-expression
unary-expression :=  ^ -- unary-expression
unary-expression :=  ^ unary-operator cast-expression
unary-expression :=  ^ sizeof unary-expression
unary-expression :=  ^ sizeof ( type-name )
logical-OR-expression :=  ^ logical-AND-expression
logical-OR-expression :=  ^ logical-OR-expression || logical-AND-expression
postfix-expression :=  ^ primary-expression
postfix-expression :=  ^ postfix-expression [ expression ]
postfix-expression :=  ^ postfix-expression ( argument-expression-list )
postfix-expression :=  ^ postfix-expression ( )
postfix-expression :=  ^ postfix-expression . identifier
postfix-expression :=  ^ postfix-expression -> identifier
postfix-expression :=  ^ postfix-expression ++
postfix-expression :=  ^ postfix-expression --
unary-operator :=  ^ &
unary-operator :=  ^ *
unary-operator :=  ^ +
unary-operator :=  ^ -
unary-operator :=  ^ ~
unary-operator :=  ^ !
logical-AND-expression :=  ^ inclusive-OR-expression
logical-AND-expression :=  ^ logical-AND-expression && inclusive-OR-expression
primary-expression :=  ^ identifier
primary-expression :=  ^ char-const
primary-expression :=  ^ float-const
primary-expression :=  ^ string-const
primary-expression :=  ^ int-const
primary-expression :=  ^ ( expression )
inclusive-OR-expression :=  ^ exclusive-OR-expression
inclusive-OR-expression :=  ^ inclusive-OR-expression | exclusive-OR-expression
exclusive-OR-expression :=  ^ AND-expression
exclusive-OR-expression :=  ^ exclusive-OR-expression ^ AND-expression
AND-expression :=  ^ equality-expression
AND-expression :=  ^ AND-expression & equality-expression
equality-expression :=  ^ relational-expression
equality-expression :=  ^ equality-expression equality-operator relational-expression
relational-expression :=  ^ shift-expression
relational-expression :=  ^ relational-expression relational-operator shift-expression
shift-expression :=  ^ additive-expression
shift-expression :=  ^ shift-expression shift-operator additive-expression
additive-expression :=  ^ multiplicative-expression
additive-expression :=  ^ additive-expression additive-operator multiplicative-expression
multiplicative-expression :=  ^ cast-expression
multiplicative-expression :=  ^ multiplicative-expression multiplicative-operator cast-expression
cast-expression :=  ^ unary-expression
cast-expression :=  ^ ( type-name ) cast-expression
iteration-statement :=  for ( expression ; expression ; ^ expression ) statement
iteration-statement :=  for ( expression ; expression ; ^ ) statement

I[355]
expression :=  expression ^ , assignment-expression
iteration-statement :=  for ( expression ; ; expression ^ ) statement

I[356]
composite-statement :=  ^ { declaration-list statement-list }
composite-statement :=  ^ { declaration-list }
composite-statement :=  ^ { statement-list }
composite-statement :=  ^ { }
statement :=  ^ labeled-statement
statement :=  ^ expression-statement
statement :=  ^ composite-statement
statement :=  ^ seletion-statement
statement :=  ^ iteration-statement
statement :=  ^ jump-statement
labeled-statement :=  ^ identifier : statement
labeled-statement :=  ^ case constant-expression : statement
labeled-statement :=  ^ default : statement
expression-statement :=  ^ expression ;
expression-statement :=  ^ ;
seletion-statement :=  ^ if ( expression ) statement
seletion-statement :=  ^ if ( expression ) statement else statement
seletion-statement :=  ^ switch ( expression ) statement
iteration-statement :=  ^ while ( expression ) statement
iteration-statement :=  ^ do statement while ( expression ) ;
iteration-statement :=  ^ for ( expression ; expression ; expression ) statement
iteration-statement :=  ^ for ( expression ; expression ; ) statement
iteration-statement :=  ^ for ( expression ; ; expression ) statement
iteration-statement :=  ^ for ( expression ; ; ) statement
iteration-statement :=  ^ for ( ; expression ; expression ) statement
iteration-statement :=  ^ for ( ; expression ; ) statement
iteration-statement :=  ^ for ( ; ; expression ) statement
iteration-statement :=  ^ for ( ; ; ) statement
jump-statement :=  ^ goto identifier ;
jump-statement :=  ^ return expression ;
jump-statement :=  ^ return ;
jump-statement :=  ^ continue ;
jump-statement :=  ^ break ;
expression :=  ^ assignment-expression
expression :=  ^ expression , assignment-expression
assignment-expression :=  ^ condition-expression
assignment-expression :=  ^ unary-expression assignment-operator assignment-expression
condition-expression :=  ^ logical-OR-expression
condition-expression :=  ^ logical-OR-expression ? expression : condition-expression
unary-expression :=  ^ postfix-expression
unary-expression :=  ^ ++ unary-expression
unary-expression :=  ^ -- unary-expression
unary-expression :=  ^ unary-operator cast-expression
unary-expression :=  ^ sizeof unary-expression
unary-expression :=  ^ sizeof ( type-name )
logical-OR-expression :=  ^ logical-AND-expression
logical-OR-expression :=  ^ logical-OR-expression || logical-AND-expression
postfix-expression :=  ^ primary-expression
postfix-expression :=  ^ postfix-expression [ expression ]
postfix-expression :=  ^ postfix-expression ( argument-expression-list )
postfix-expression :=  ^ postfix-expression ( )
postfix-expression :=  ^ postfix-expression . identifier
postfix-expression :=  ^ postfix-expression -> identifier
postfix-expression :=  ^ postfix-expression ++
postfix-expression :=  ^ postfix-expression --
unary-operator :=  ^ &
unary-operator :=  ^ *
unary-operator :=  ^ +
unary-operator :=  ^ -
unary-operator :=  ^ ~
unary-operator :=  ^ !
logical-AND-expression :=  ^ inclusive-OR-expression
logical-AND-expression :=  ^ logical-AND-expression && inclusive-OR-expression
primary-expression :=  ^ identifier
primary-expression :=  ^ char-const
primary-expression :=  ^ float-const
primary-expression :=  ^ string-const
primary-expression :=  ^ int-const
primary-expression :=  ^ ( expression )
inclusive-OR-expression :=  ^ exclusive-OR-expression
inclusive-OR-expression :=  ^ inclusive-OR-expression | exclusive-OR-expression
exclusive-OR-expression :=  ^ AND-expression
exclusive-OR-expression :=  ^ exclusive-OR-expression ^ AND-expression
AND-expression :=  ^ equality-expression
AND-expression :=  ^ AND-expression & equality-expression
equality-expression :=  ^ relational-expression
equality-expression :=  ^ equality-expression equality-operator relational-expression
relational-expression :=  ^ shift-expression
relational-expression :=  ^ relational-expression relational-operator shift-expression
shift-expression :=  ^ additive-expression
shift-expression :=  ^ shift-expression shift-operator additive-expression
additive-expression :=  ^ multiplicative-expression
additive-expression :=  ^ additive-expression additive-operator multiplicative-expression
multiplicative-expression :=  ^ cast-expression
multiplicative-expression :=  ^ multiplicative-expression multiplicative-operator cast-expression
cast-expression :=  ^ unary-expression
cast-expression :=  ^ ( type-name ) cast-expression
iteration-statement :=  for ( expression ; ; ) ^ statement

I[357]
expression :=  expression ^ , assignment-expression
iteration-statement :=  for ( ; expression ; expression ^ ) statement

I[358]
composite-statement :=  ^ { declaration-list statement-list }
composite-statement :=  ^ { declaration-list }
composite-statement :=  ^ { statement-list }
composite-statement :=  ^ { }
statement :=  ^ labeled-statement
statement :=  ^ expression-statement
statement :=  ^ composite-statement
statement :=  ^ seletion-statement
statement :=  ^ iteration-statement
statement :=  ^ jump-statement
labeled-statement :=  ^ identifier : statement
labeled-statement :=  ^ case constant-expression : statement
labeled-statement :=  ^ default : statement
expression-statement :=  ^ expression ;
expression-statement :=  ^ ;
seletion-statement :=  ^ if ( expression ) statement
seletion-statement :=  ^ if ( expression ) statement else statement
seletion-statement :=  ^ switch ( expression ) statement
iteration-statement :=  ^ while ( expression ) statement
iteration-statement :=  ^ do statement while ( expression ) ;
iteration-statement :=  ^ for ( expression ; expression ; expression ) statement
iteration-statement :=  ^ for ( expression ; expression ; ) statement
iteration-statement :=  ^ for ( expression ; ; expression ) statement
iteration-statement :=  ^ for ( expression ; ; ) statement
iteration-statement :=  ^ for ( ; expression ; expression ) statement
iteration-statement :=  ^ for ( ; expression ; ) statement
iteration-statement :=  ^ for ( ; ; expression ) statement
iteration-statement :=  ^ for ( ; ; ) statement
jump-statement :=  ^ goto identifier ;
jump-statement :=  ^ return expression ;
jump-statement :=  ^ return ;
jump-statement :=  ^ continue ;
jump-statement :=  ^ break ;
expression :=  ^ assignment-expression
expression :=  ^ expression , assignment-expression
assignment-expression :=  ^ condition-expression
assignment-expression :=  ^ unary-expression assignment-operator assignment-expression
condition-expression :=  ^ logical-OR-expression
condition-expression :=  ^ logical-OR-expression ? expression : condition-expression
unary-expression :=  ^ postfix-expression
unary-expression :=  ^ ++ unary-expression
unary-expression :=  ^ -- unary-expression
unary-expression :=  ^ unary-operator cast-expression
unary-expression :=  ^ sizeof unary-expression
unary-expression :=  ^ sizeof ( type-name )
logical-OR-expression :=  ^ logical-AND-expression
logical-OR-expression :=  ^ logical-OR-expression || logical-AND-expression
postfix-expression :=  ^ primary-expression
postfix-expression :=  ^ postfix-expression [ expression ]
postfix-expression :=  ^ postfix-expression ( argument-expression-list )
postfix-expression :=  ^ postfix-expression ( )
postfix-expression :=  ^ postfix-expression . identifier
postfix-expression :=  ^ postfix-expression -> identifier
postfix-expression :=  ^ postfix-expression ++
postfix-expression :=  ^ postfix-expression --
unary-operator :=  ^ &
unary-operator :=  ^ *
unary-operator :=  ^ +
unary-operator :=  ^ -
unary-operator :=  ^ ~
unary-operator :=  ^ !
logical-AND-expression :=  ^ inclusive-OR-expression
logical-AND-expression :=  ^ logical-AND-expression && inclusive-OR-expression
primary-expression :=  ^ identifier
primary-expression :=  ^ char-const
primary-expression :=  ^ float-const
primary-expression :=  ^ string-const
primary-expression :=  ^ int-const
primary-expression :=  ^ ( expression )
inclusive-OR-expression :=  ^ exclusive-OR-expression
inclusive-OR-expression :=  ^ inclusive-OR-expression | exclusive-OR-expression
exclusive-OR-expression :=  ^ AND-expression
exclusive-OR-expression :=  ^ exclusive-OR-expression ^ AND-expression
AND-expression :=  ^ equality-expression
AND-expression :=  ^ AND-expression & equality-expression
equality-expression :=  ^ relational-expression
equality-expression :=  ^ equality-expression equality-operator relational-expression
relational-expression :=  ^ shift-expression
relational-expression :=  ^ relational-expression relational-operator shift-expression
shift-expression :=  ^ additive-expression
shift-expression :=  ^ shift-expression shift-operator additive-expression
additive-expression :=  ^ multiplicative-expression
additive-expression :=  ^ additive-expression additive-operator multiplicative-expression
multiplicative-expression :=  ^ cast-expression
multiplicative-expression :=  ^ multiplicative-expression multiplicative-operator cast-expression
cast-expression :=  ^ unary-expression
cast-expression :=  ^ ( type-name ) cast-expression
iteration-statement :=  for ( ; expression ; ) ^ statement

I[359]
composite-statement :=  ^ { declaration-list statement-list }
composite-statement :=  ^ { declaration-list }
composite-statement :=  ^ { statement-list }
composite-statement :=  ^ { }
statement :=  ^ labeled-statement
statement :=  ^ expression-statement
statement :=  ^ composite-statement
statement :=  ^ seletion-statement
statement :=  ^ iteration-statement
statement :=  ^ jump-statement
labeled-statement :=  ^ identifier : statement
labeled-statement :=  ^ case constant-expression : statement
labeled-statement :=  ^ default : statement
expression-statement :=  ^ expression ;
expression-statement :=  ^ ;
seletion-statement :=  ^ if ( expression ) statement
seletion-statement :=  ^ if ( expression ) statement else statement
seletion-statement :=  ^ switch ( expression ) statement
iteration-statement :=  ^ while ( expression ) statement
iteration-statement :=  ^ do statement while ( expression ) ;
iteration-statement :=  ^ for ( expression ; expression ; expression ) statement
iteration-statement :=  ^ for ( expression ; expression ; ) statement
iteration-statement :=  ^ for ( expression ; ; expression ) statement
iteration-statement :=  ^ for ( expression ; ; ) statement
iteration-statement :=  ^ for ( ; expression ; expression ) statement
iteration-statement :=  ^ for ( ; expression ; ) statement
iteration-statement :=  ^ for ( ; ; expression ) statement
iteration-statement :=  ^ for ( ; ; ) statement
jump-statement :=  ^ goto identifier ;
jump-statement :=  ^ return expression ;
jump-statement :=  ^ return ;
jump-statement :=  ^ continue ;
jump-statement :=  ^ break ;
expression :=  ^ assignment-expression
expression :=  ^ expression , assignment-expression
assignment-expression :=  ^ condition-expression
assignment-expression :=  ^ unary-expression assignment-operator assignment-expression
condition-expression :=  ^ logical-OR-expression
condition-expression :=  ^ logical-OR-expression ? expression : condition-expression
unary-expression :=  ^ postfix-expression
unary-expression :=  ^ ++ unary-expression
unary-expression :=  ^ -- unary-expression
unary-expression :=  ^ unary-operator cast-expression
unary-expression :=  ^ sizeof unary-expression
unary-expression :=  ^ sizeof ( type-name )
logical-OR-expression :=  ^ logical-AND-expression
logical-OR-expression :=  ^ logical-OR-expression || logical-AND-expression
postfix-expression :=  ^ primary-expression
postfix-expression :=  ^ postfix-expression [ expression ]
postfix-expression :=  ^ postfix-expression ( argument-expression-list )
postfix-expression :=  ^ postfix-expression ( )
postfix-expression :=  ^ postfix-expression . identifier
postfix-expression :=  ^ postfix-expression -> identifier
postfix-expression :=  ^ postfix-expression ++
postfix-expression :=  ^ postfix-expression --
unary-operator :=  ^ &
unary-operator :=  ^ *
unary-operator :=  ^ +
unary-operator :=  ^ -
unary-operator :=  ^ ~
unary-operator :=  ^ !
logical-AND-expression :=  ^ inclusive-OR-expression
logical-AND-expression :=  ^ logical-AND-expression && inclusive-OR-expression
primary-expression :=  ^ identifier
primary-expression :=  ^ char-const
primary-expression :=  ^ float-const
primary-expression :=  ^ string-const
primary-expression :=  ^ int-const
primary-expression :=  ^ ( expression )
inclusive-OR-expression :=  ^ exclusive-OR-expression
inclusive-OR-expression :=  ^ inclusive-OR-expression | exclusive-OR-expression
exclusive-OR-expression :=  ^ AND-expression
exclusive-OR-expression :=  ^ exclusive-OR-expression ^ AND-expression
AND-expression :=  ^ equality-expression
AND-expression :=  ^ AND-expression & equality-expression
equality-expression :=  ^ relational-expression
equality-expression :=  ^ equality-expression equality-operator relational-expression
relational-expression :=  ^ shift-expression
relational-expression :=  ^ relational-expression relational-operator shift-expression
shift-expression :=  ^ additive-expression
shift-expression :=  ^ shift-expression shift-operator additive-expression
additive-expression :=  ^ multiplicative-expression
additive-expression :=  ^ additive-expression additive-operator multiplicative-expression
multiplicative-expression :=  ^ cast-expression
multiplicative-expression :=  ^ multiplicative-expression multiplicative-operator cast-expression
cast-expression :=  ^ unary-expression
cast-expression :=  ^ ( type-name ) cast-expression
iteration-statement :=  for ( ; ; expression ) ^ statement

I[360]
iteration-statement :=  for ( ; ; ) statement ^

I[361]
seletion-statement :=  if ( expression ) statement else statement ^

I[362]
iteration-statement :=  do statement while ( expression ) ; ^

I[363]
expression :=  expression ^ , assignment-expression
iteration-statement :=  for ( expression ; expression ; expression ^ ) statement

I[364]
composite-statement :=  ^ { declaration-list statement-list }
composite-statement :=  ^ { declaration-list }
composite-statement :=  ^ { statement-list }
composite-statement :=  ^ { }
statement :=  ^ labeled-statement
statement :=  ^ expression-statement
statement :=  ^ composite-statement
statement :=  ^ seletion-statement
statement :=  ^ iteration-statement
statement :=  ^ jump-statement
labeled-statement :=  ^ identifier : statement
labeled-statement :=  ^ case constant-expression : statement
labeled-statement :=  ^ default : statement
expression-statement :=  ^ expression ;
expression-statement :=  ^ ;
seletion-statement :=  ^ if ( expression ) statement
seletion-statement :=  ^ if ( expression ) statement else statement
seletion-statement :=  ^ switch ( expression ) statement
iteration-statement :=  ^ while ( expression ) statement
iteration-statement :=  ^ do statement while ( expression ) ;
iteration-statement :=  ^ for ( expression ; expression ; expression ) statement
iteration-statement :=  ^ for ( expression ; expression ; ) statement
iteration-statement :=  ^ for ( expression ; ; expression ) statement
iteration-statement :=  ^ for ( expression ; ; ) statement
iteration-statement :=  ^ for ( ; expression ; expression ) statement
iteration-statement :=  ^ for ( ; expression ; ) statement
iteration-statement :=  ^ for ( ; ; expression ) statement
iteration-statement :=  ^ for ( ; ; ) statement
jump-statement :=  ^ goto identifier ;
jump-statement :=  ^ return expression ;
jump-statement :=  ^ return ;
jump-statement :=  ^ continue ;
jump-statement :=  ^ break ;
expression :=  ^ assignment-expression
expression :=  ^ expression , assignment-expression
assignment-expression :=  ^ condition-expression
assignment-expression :=  ^ unary-expression assignment-operator assignment-expression
condition-expression :=  ^ logical-OR-expression
condition-expression :=  ^ logical-OR-expression ? expression : condition-expression
unary-expression :=  ^ postfix-expression
unary-expression :=  ^ ++ unary-expression
unary-expression :=  ^ -- unary-expression
unary-expression :=  ^ unary-operator cast-expression
unary-expression :=  ^ sizeof unary-expression
unary-expression :=  ^ sizeof ( type-name )
logical-OR-expression :=  ^ logical-AND-expression
logical-OR-expression :=  ^ logical-OR-expression || logical-AND-expression
postfix-expression :=  ^ primary-expression
postfix-expression :=  ^ postfix-expression [ expression ]
postfix-expression :=  ^ postfix-expression ( argument-expression-list )
postfix-expression :=  ^ postfix-expression ( )
postfix-expression :=  ^ postfix-expression . identifier
postfix-expression :=  ^ postfix-expression -> identifier
postfix-expression :=  ^ postfix-expression ++
postfix-expression :=  ^ postfix-expression --
unary-operator :=  ^ &
unary-operator :=  ^ *
unary-operator :=  ^ +
unary-operator :=  ^ -
unary-operator :=  ^ ~
unary-operator :=  ^ !
logical-AND-expression :=  ^ inclusive-OR-expression
logical-AND-expression :=  ^ logical-AND-expression && inclusive-OR-expression
primary-expression :=  ^ identifier
primary-expression :=  ^ char-const
primary-expression :=  ^ float-const
primary-expression :=  ^ string-const
primary-expression :=  ^ int-const
primary-expression :=  ^ ( expression )
inclusive-OR-expression :=  ^ exclusive-OR-expression
inclusive-OR-expression :=  ^ inclusive-OR-expression | exclusive-OR-expression
exclusive-OR-expression :=  ^ AND-expression
exclusive-OR-expression :=  ^ exclusive-OR-expression ^ AND-expression
AND-expression :=  ^ equality-expression
AND-expression :=  ^ AND-expression & equality-expression
equality-expression :=  ^ relational-expression
equality-expression :=  ^ equality-expression equality-operator relational-expression
relational-expression :=  ^ shift-expression
relational-expression :=  ^ relational-expression relational-operator shift-expression
shift-expression :=  ^ additive-expression
shift-expression :=  ^ shift-expression shift-operator additive-expression
additive-expression :=  ^ multiplicative-expression
additive-expression :=  ^ additive-expression additive-operator multiplicative-expression
multiplicative-expression :=  ^ cast-expression
multiplicative-expression :=  ^ multiplicative-expression multiplicative-operator cast-expression
cast-expression :=  ^ unary-expression
cast-expression :=  ^ ( type-name ) cast-expression
iteration-statement :=  for ( expression ; expression ; ) ^ statement

I[365]
composite-statement :=  ^ { declaration-list statement-list }
composite-statement :=  ^ { declaration-list }
composite-statement :=  ^ { statement-list }
composite-statement :=  ^ { }
statement :=  ^ labeled-statement
statement :=  ^ expression-statement
statement :=  ^ composite-statement
statement :=  ^ seletion-statement
statement :=  ^ iteration-statement
statement :=  ^ jump-statement
labeled-statement :=  ^ identifier : statement
labeled-statement :=  ^ case constant-expression : statement
labeled-statement :=  ^ default : statement
expression-statement :=  ^ expression ;
expression-statement :=  ^ ;
seletion-statement :=  ^ if ( expression ) statement
seletion-statement :=  ^ if ( expression ) statement else statement
seletion-statement :=  ^ switch ( expression ) statement
iteration-statement :=  ^ while ( expression ) statement
iteration-statement :=  ^ do statement while ( expression ) ;
iteration-statement :=  ^ for ( expression ; expression ; expression ) statement
iteration-statement :=  ^ for ( expression ; expression ; ) statement
iteration-statement :=  ^ for ( expression ; ; expression ) statement
iteration-statement :=  ^ for ( expression ; ; ) statement
iteration-statement :=  ^ for ( ; expression ; expression ) statement
iteration-statement :=  ^ for ( ; expression ; ) statement
iteration-statement :=  ^ for ( ; ; expression ) statement
iteration-statement :=  ^ for ( ; ; ) statement
jump-statement :=  ^ goto identifier ;
jump-statement :=  ^ return expression ;
jump-statement :=  ^ return ;
jump-statement :=  ^ continue ;
jump-statement :=  ^ break ;
expression :=  ^ assignment-expression
expression :=  ^ expression , assignment-expression
assignment-expression :=  ^ condition-expression
assignment-expression :=  ^ unary-expression assignment-operator assignment-expression
condition-expression :=  ^ logical-OR-expression
condition-expression :=  ^ logical-OR-expression ? expression : condition-expression
unary-expression :=  ^ postfix-expression
unary-expression :=  ^ ++ unary-expression
unary-expression :=  ^ -- unary-expression
unary-expression :=  ^ unary-operator cast-expression
unary-expression :=  ^ sizeof unary-expression
unary-expression :=  ^ sizeof ( type-name )
logical-OR-expression :=  ^ logical-AND-expression
logical-OR-expression :=  ^ logical-OR-expression || logical-AND-expression
postfix-expression :=  ^ primary-expression
postfix-expression :=  ^ postfix-expression [ expression ]
postfix-expression :=  ^ postfix-expression ( argument-expression-list )
postfix-expression :=  ^ postfix-expression ( )
postfix-expression :=  ^ postfix-expression . identifier
postfix-expression :=  ^ postfix-expression -> identifier
postfix-expression :=  ^ postfix-expression ++
postfix-expression :=  ^ postfix-expression --
unary-operator :=  ^ &
unary-operator :=  ^ *
unary-operator :=  ^ +
unary-operator :=  ^ -
unary-operator :=  ^ ~
unary-operator :=  ^ !
logical-AND-expression :=  ^ inclusive-OR-expression
logical-AND-expression :=  ^ logical-AND-expression && inclusive-OR-expression
primary-expression :=  ^ identifier
primary-expression :=  ^ char-const
primary-expression :=  ^ float-const
primary-expression :=  ^ string-const
primary-expression :=  ^ int-const
primary-expression :=  ^ ( expression )
inclusive-OR-expression :=  ^ exclusive-OR-expression
inclusive-OR-expression :=  ^ inclusive-OR-expression | exclusive-OR-expression
exclusive-OR-expression :=  ^ AND-expression
exclusive-OR-expression :=  ^ exclusive-OR-expression ^ AND-expression
AND-expression :=  ^ equality-expression
AND-expression :=  ^ AND-expression & equality-expression
equality-expression :=  ^ relational-expression
equality-expression :=  ^ equality-expression equality-operator relational-expression
relational-expression :=  ^ shift-expression
relational-expression :=  ^ relational-expression relational-operator shift-expression
shift-expression :=  ^ additive-expression
shift-expression :=  ^ shift-expression shift-operator additive-expression
additive-expression :=  ^ multiplicative-expression
additive-expression :=  ^ additive-expression additive-operator multiplicative-expression
multiplicative-expression :=  ^ cast-expression
multiplicative-expression :=  ^ multiplicative-expression multiplicative-operator cast-expression
cast-expression :=  ^ unary-expression
cast-expression :=  ^ ( type-name ) cast-expression
iteration-statement :=  for ( expression ; ; expression ) ^ statement

I[366]
iteration-statement :=  for ( expression ; ; ) statement ^

I[367]
composite-statement :=  ^ { declaration-list statement-list }
composite-statement :=  ^ { declaration-list }
composite-statement :=  ^ { statement-list }
composite-statement :=  ^ { }
statement :=  ^ labeled-statement
statement :=  ^ expression-statement
statement :=  ^ composite-statement
statement :=  ^ seletion-statement
statement :=  ^ iteration-statement
statement :=  ^ jump-statement
labeled-statement :=  ^ identifier : statement
labeled-statement :=  ^ case constant-expression : statement
labeled-statement :=  ^ default : statement
expression-statement :=  ^ expression ;
expression-statement :=  ^ ;
seletion-statement :=  ^ if ( expression ) statement
seletion-statement :=  ^ if ( expression ) statement else statement
seletion-statement :=  ^ switch ( expression ) statement
iteration-statement :=  ^ while ( expression ) statement
iteration-statement :=  ^ do statement while ( expression ) ;
iteration-statement :=  ^ for ( expression ; expression ; expression ) statement
iteration-statement :=  ^ for ( expression ; expression ; ) statement
iteration-statement :=  ^ for ( expression ; ; expression ) statement
iteration-statement :=  ^ for ( expression ; ; ) statement
iteration-statement :=  ^ for ( ; expression ; expression ) statement
iteration-statement :=  ^ for ( ; expression ; ) statement
iteration-statement :=  ^ for ( ; ; expression ) statement
iteration-statement :=  ^ for ( ; ; ) statement
jump-statement :=  ^ goto identifier ;
jump-statement :=  ^ return expression ;
jump-statement :=  ^ return ;
jump-statement :=  ^ continue ;
jump-statement :=  ^ break ;
expression :=  ^ assignment-expression
expression :=  ^ expression , assignment-expression
assignment-expression :=  ^ condition-expression
assignment-expression :=  ^ unary-expression assignment-operator assignment-expression
condition-expression :=  ^ logical-OR-expression
condition-expression :=  ^ logical-OR-expression ? expression : condition-expression
unary-expression :=  ^ postfix-expression
unary-expression :=  ^ ++ unary-expression
unary-expression :=  ^ -- unary-expression
unary-expression :=  ^ unary-operator cast-expression
unary-expression :=  ^ sizeof unary-expression
unary-expression :=  ^ sizeof ( type-name )
logical-OR-expression :=  ^ logical-AND-expression
logical-OR-expression :=  ^ logical-OR-expression || logical-AND-expression
postfix-expression :=  ^ primary-expression
postfix-expression :=  ^ postfix-expression [ expression ]
postfix-expression :=  ^ postfix-expression ( argument-expression-list )
postfix-expression :=  ^ postfix-expression ( )
postfix-expression :=  ^ postfix-expression . identifier
postfix-expression :=  ^ postfix-expression -> identifier
postfix-expression :=  ^ postfix-expression ++
postfix-expression :=  ^ postfix-expression --
unary-operator :=  ^ &
unary-operator :=  ^ *
unary-operator :=  ^ +
unary-operator :=  ^ -
unary-operator :=  ^ ~
unary-operator :=  ^ !
logical-AND-expression :=  ^ inclusive-OR-expression
logical-AND-expression :=  ^ logical-AND-expression && inclusive-OR-expression
primary-expression :=  ^ identifier
primary-expression :=  ^ char-const
primary-expression :=  ^ float-const
primary-expression :=  ^ string-const
primary-expression :=  ^ int-const
primary-expression :=  ^ ( expression )
inclusive-OR-expression :=  ^ exclusive-OR-expression
inclusive-OR-expression :=  ^ inclusive-OR-expression | exclusive-OR-expression
exclusive-OR-expression :=  ^ AND-expression
exclusive-OR-expression :=  ^ exclusive-OR-expression ^ AND-expression
AND-expression :=  ^ equality-expression
AND-expression :=  ^ AND-expression & equality-expression
equality-expression :=  ^ relational-expression
equality-expression :=  ^ equality-expression equality-operator relational-expression
relational-expression :=  ^ shift-expression
relational-expression :=  ^ relational-expression relational-operator shift-expression
shift-expression :=  ^ additive-expression
shift-expression :=  ^ shift-expression shift-operator additive-expression
additive-expression :=  ^ multiplicative-expression
additive-expression :=  ^ additive-expression additive-operator multiplicative-expression
multiplicative-expression :=  ^ cast-expression
multiplicative-expression :=  ^ multiplicative-expression multiplicative-operator cast-expression
cast-expression :=  ^ unary-expression
cast-expression :=  ^ ( type-name ) cast-expression
iteration-statement :=  for ( ; expression ; expression ) ^ statement

I[368]
iteration-statement :=  for ( ; expression ; ) statement ^

I[369]
iteration-statement :=  for ( ; ; expression ) statement ^

I[370]
composite-statement :=  ^ { declaration-list statement-list }
composite-statement :=  ^ { declaration-list }
composite-statement :=  ^ { statement-list }
composite-statement :=  ^ { }
statement :=  ^ labeled-statement
statement :=  ^ expression-statement
statement :=  ^ composite-statement
statement :=  ^ seletion-statement
statement :=  ^ iteration-statement
statement :=  ^ jump-statement
labeled-statement :=  ^ identifier : statement
labeled-statement :=  ^ case constant-expression : statement
labeled-statement :=  ^ default : statement
expression-statement :=  ^ expression ;
expression-statement :=  ^ ;
seletion-statement :=  ^ if ( expression ) statement
seletion-statement :=  ^ if ( expression ) statement else statement
seletion-statement :=  ^ switch ( expression ) statement
iteration-statement :=  ^ while ( expression ) statement
iteration-statement :=  ^ do statement while ( expression ) ;
iteration-statement :=  ^ for ( expression ; expression ; expression ) statement
iteration-statement :=  ^ for ( expression ; expression ; ) statement
iteration-statement :=  ^ for ( expression ; ; expression ) statement
iteration-statement :=  ^ for ( expression ; ; ) statement
iteration-statement :=  ^ for ( ; expression ; expression ) statement
iteration-statement :=  ^ for ( ; expression ; ) statement
iteration-statement :=  ^ for ( ; ; expression ) statement
iteration-statement :=  ^ for ( ; ; ) statement
jump-statement :=  ^ goto identifier ;
jump-statement :=  ^ return expression ;
jump-statement :=  ^ return ;
jump-statement :=  ^ continue ;
jump-statement :=  ^ break ;
expression :=  ^ assignment-expression
expression :=  ^ expression , assignment-expression
assignment-expression :=  ^ condition-expression
assignment-expression :=  ^ unary-expression assignment-operator assignment-expression
condition-expression :=  ^ logical-OR-expression
condition-expression :=  ^ logical-OR-expression ? expression : condition-expression
unary-expression :=  ^ postfix-expression
unary-expression :=  ^ ++ unary-expression
unary-expression :=  ^ -- unary-expression
unary-expression :=  ^ unary-operator cast-expression
unary-expression :=  ^ sizeof unary-expression
unary-expression :=  ^ sizeof ( type-name )
logical-OR-expression :=  ^ logical-AND-expression
logical-OR-expression :=  ^ logical-OR-expression || logical-AND-expression
postfix-expression :=  ^ primary-expression
postfix-expression :=  ^ postfix-expression [ expression ]
postfix-expression :=  ^ postfix-expression ( argument-expression-list )
postfix-expression :=  ^ postfix-expression ( )
postfix-expression :=  ^ postfix-expression . identifier
postfix-expression :=  ^ postfix-expression -> identifier
postfix-expression :=  ^ postfix-expression ++
postfix-expression :=  ^ postfix-expression --
unary-operator :=  ^ &
unary-operator :=  ^ *
unary-operator :=  ^ +
unary-operator :=  ^ -
unary-operator :=  ^ ~
unary-operator :=  ^ !
logical-AND-expression :=  ^ inclusive-OR-expression
logical-AND-expression :=  ^ logical-AND-expression && inclusive-OR-expression
primary-expression :=  ^ identifier
primary-expression :=  ^ char-const
primary-expression :=  ^ float-const
primary-expression :=  ^ string-const
primary-expression :=  ^ int-const
primary-expression :=  ^ ( expression )
inclusive-OR-expression :=  ^ exclusive-OR-expression
inclusive-OR-expression :=  ^ inclusive-OR-expression | exclusive-OR-expression
exclusive-OR-expression :=  ^ AND-expression
exclusive-OR-expression :=  ^ exclusive-OR-expression ^ AND-expression
AND-expression :=  ^ equality-expression
AND-expression :=  ^ AND-expression & equality-expression
equality-expression :=  ^ relational-expression
equality-expression :=  ^ equality-expression equality-operator relational-expression
relational-expression :=  ^ shift-expression
relational-expression :=  ^ relational-expression relational-operator shift-expression
shift-expression :=  ^ additive-expression
shift-expression :=  ^ shift-expression shift-operator additive-expression
additive-expression :=  ^ multiplicative-expression
additive-expression :=  ^ additive-expression additive-operator multiplicative-expression
multiplicative-expression :=  ^ cast-expression
multiplicative-expression :=  ^ multiplicative-expression multiplicative-operator cast-expression
cast-expression :=  ^ unary-expression
cast-expression :=  ^ ( type-name ) cast-expression
iteration-statement :=  for ( expression ; expression ; expression ) ^ statement

I[371]
iteration-statement :=  for ( expression ; expression ; ) statement ^

I[372]
iteration-statement :=  for ( expression ; ; expression ) statement ^

I[373]
iteration-statement :=  for ( ; expression ; expression ) statement ^

I[374]
iteration-statement :=  for ( expression ; expression ; expression ) statement ^

