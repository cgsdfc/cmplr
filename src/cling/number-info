＜步长＞ ::= ＜非零数字＞｛＜数字＞｝
作用：步长可以是数字或者非零数字。
限制：可以改写成＜步长＞ ::= <无符号整数>，步长不能为0 。


＜无符号整数＞  ::= ＜非零数字＞｛＜数字＞｝
作用：无符号整数由不以零开头的数字组成。
限制：注意，０不属于无符号整数。
句子示例：1, 12, 123, 1234

＜整数＞    ::= ［＋｜－］＜无符号整数＞｜０
作用：整数是０或者是带可选符号的无符号整数。
限制：没有l，ll，ul等后缀，不可以是八进制或者十六进制。
句子示例：0, -1, 1, 2, -2

＜变量定义＞  ::= ＜类型标识符＞(＜标识符＞|＜标识符＞‘[’＜无符号整数＞‘]’){,
＜标识符＞|＜标识符＞‘[’＜无符号整数＞‘]’ }
作用：既可以声明单个变量也可以声明数组变量，注意这里的变量定义不要求和类型配对。
限制：不可以声明指针变量，或者函数指针，或者数组指针，或者指针数组变量。
句子示例：int a[1], b[2], c[3], A, B, C;

＜常量＞ ::=  ＜整数＞|＜字符＞

＜因子＞  ::= ＜标识符＞｜＜标识符＞‘[’＜表达式＞‘]’｜＜整数＞|＜字符＞｜
＜有返回值函数调用语句＞|‘(’＜表达式＞‘)’

＜情况子语句＞  ::=  case＜常量＞：＜语句＞
作用：由case，常量　冒号，语句组成。
限制：case后面只能跟常量。
句子示例：case ‘a’: return 67;

＜表达式＞  ::= ［＋｜－］＜项＞{＜加法运算符＞＜项＞}
作用：表达式前面可能有＋或者－，一定会有一个项，
后面可能会有加法运算符和项的列表。
限制：注意这里的±和加法运算符是不一样的。
句子示例：+1-2。

